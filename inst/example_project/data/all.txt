---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2
")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)


#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# Load the cnt data from the rsem data
```{r}
load("../107_RNAseq_1stRun/cache/genes.results.RData")
load("../107_RNAseq_2ndRun/cache/utah.rsem.RData")

inova.cnt <- map(genes.results, ~.$expected_count) %>% do.call("cbind", .)
dim(inova.cnt)

utah.cnt <-  map(utah.rsem, ~.$expected_count) %>% do.call("cbind", .)
dim(utah.cnt)

ProjectTemplate::cache("inova.cnt")
ProjectTemplate::cache("utah.cnt")
```
# Load the mapping statistics from RSEM
```{r, fig.width=10, fig.height=5}
source("lib/RSEM_misc.R")
inova.stat <- get_RSEM_stat("~/107/rsem2", main="Inova 150 samples")

utah.stat  <- get_RSEM_stat("~/107/utah/rsem/", main="Utah samples")
```


# Construct the count matrix 
```{r}
# load the sam information
load("../107_3rdRun/cache/all.sam.RData")
load("../107_RNAseq_2ndRun/cache/genes.ann.RData")
comm <- compare(all.sam$ID, c(colnames(inova.cnt), colnames(utah.cnt)))

all.cnt <- cbind(inova.cnt, utah.cnt) %>% as.data.frame %>% `[`(all.sam$ID)
row.names(all.cnt) <- genes.ann$id
all.cnt[1:5, 1:5]
ProjectTemplate::cache("all.cnt")
```
# DGEList
```{r}
library(edgeR)
all.dge <- DGEList(counts = all.cnt, genes = genes.ann)

A <- rowSums(all.dge$counts)
# isexpr <- A > 100 
isexpr <-  rowSums(all.dge$counts>1) > ncol(all.dge) * 0.25
sum(isexpr)

# Keep only genes with defined annotation:
hasannot <- !is.na(all.dge$genes$gene.name)
dge.flt <- all.dge[isexpr & hasannot, , keep.lib.size = FALSE] 
dim(dge.flt)
```
# scale normalization
```{r}
dge.flt <- calcNormFactors(dge.flt)

# check the sample names in dge are aligned with all.sam
all(all.sam$ID == row.names(dge.flt$samples))

data.src <- substring(all.sam$source,1,1) 

# if chose top=50, gender becomes significant in the second dimension
plotMDS(dge.flt, labels=data.src, top=500, col=ifelse(data.src=="I","blue","red"), gene.selection="common", prior.count = 5)

gender <- substring(all.sam$gender,1,1) 
plotMDS(dge.flt, labels=gender, top=500, col=ifelse(data.src=="I","blue","red"), gene.selection="common", prior.count = 5)

# glMDSplot looks different from plotMDS
# library(Glimma)
# glMDSPlot(dge.flt, groups=all.sam$gender)
ProjectTemplate::cache("dge.flt")
```

# voom 
set new noexpr filter with mean value v$E > 0 => v2
```{r}
all.sam$Study <- ifelse(all.sam$batch=="ND", "Inova", "Utah") 
TS <- factor(paste(all.sam$Study, all.sam$Sample, sep="."))
design <-  model.matrix(~0+TS)
colnames(design) <- sub("^TS", "", colnames(design))

contr.matrix <- makeContrasts(
  InovaHF = Inova.HF - Inova.DONOR,
  UtahHF = Utah.HF - Utah.DONOR,
  levels=design)

v <- voom(dge.flt, design, plot = TRUE)

# check the normalized v 
.d <- v$E %>% reshape2::melt()
ggplot(.d, aes(Var2, value)) + geom_boxplot()

# check the density of the normalized values
ggplot(.d, aes(x=value, group=Var2, col=substr(Var2,1,3)=="ISA") )+ geom_density()

isExpr <- rowMeans(v$E) > 0
sum(isExpr)

v2 <- v[isExpr,]
# take the another filter

# plotSA(v)
# vwts <- voomWithQualityWeights(dge.flt, design, plot = TRUE) # it is very slow

vfit2 <- lmFit(v2) 
vfit2 <- contrasts.fit(vfit2, contr.matrix)
vfit2 <- eBayes(vfit2)
results.all <- topTableF(vfit2, sort.by="F", lfc=0, p.value = 1, number=Inf) %>% mutate(FC=(InovaHF+ UtahHF)/2)

ggplot(results.all, aes(InovaHF, UtahHF)) + geom_point(alpha=0.3) + geom_abline(lty=2, color="skyblue") + coord_equal(xlim=c(-6.5, 6.5), ylim=c(-6.5, 6.5)) 
#+ stat_smooth(method="lm")

ggsave(file="graphs/utahfc_inovafc.pdf", width=6, height=6)
ggplot(results.all, aes(AveExpr)) + geom_density()
# sum(results.all$AveExpr > 1) # 12747


```
# calculate the p-value between InovaHF and UtahHF
```{r}
summary(lm(InovaHF ~ UtahHF, data = results.all))
```

# volcano plot for the combo
```{r, fig.width=4, fig.height=5}
results.all <- dat <- results.all  %>% mutate(DEG=abs(FC) > 1 & adj.P.Val < 0.05) 





ggplot(dat, aes(x=FC, y=-log10(adj.P.Val))) + geom_point(aes(alpha=ifelse(DEG, 0.7, 0.3), col=DEG)) + geom_vline(xintercept = c(-1,1), lty=2, col="gray20") +  geom_hline(yintercept = -log10(0.05), lty=2, col="gray20") + scale_color_brewer(palette = "Set2") + theme(legend.position = "none")

ggsave(file="graphs/volcano.pdf", width=4, height=5)

deg.dat <- dat %>% filter(DEG) %>% arrange(FC)
```

# Gene sets
```{r}

load(url("http://bioinf.wehi.edu.au/software/MSigDB/human_H_v5p2.rdata"))
load(url("http://bioinf.wehi.edu.au/software/MSigDB/human_c1_v5p2.rdata")) 
load(url("http://bioinf.wehi.edu.au/software/MSigDB/human_c2_v5p2.rdata")) 
load(url("http://bioinf.wehi.edu.au/software/MSigDB/human_c3_v5p2.rdata")) 
load(url("http://bioinf.wehi.edu.au/software/MSigDB/human_c4_v5p2.rdata")) 
load(url("http://bioinf.wehi.edu.au/software/MSigDB/human_c5_v5p2.rdata")) 
load(url("http://bioinf.wehi.edu.au/software/MSigDB/human_c6_v5p2.rdata")) 
load(url("http://bioinf.wehi.edu.au/software/MSigDB/human_c7_v5p2.rdata")) 

msigdb5.2 <- list(Hs.H=Hs.H, Hs.c1=Hs.c1, Hs.c2=Hs.c2, Hs.c3=Hs.c3, Hs.c4=Hs.c4, Hs.c5=Hs.c5, Hs.c6=Hs.c6, Hs.c7=Hs.c7)
ProjectTemplate::cache("msigdb5.2")

gene.ids <- gene2entrez(v2$genes$gene.name)
inova.cam <- lapply(msigdb5.2,  function(gs) {
  idx <- ids2indices(gs,id=gene.ids)
  rv <- camera(v2,idx,design,contrast=contr.matrix[,1])
  return(rv)
})

#  utah.cam <- camera(v2,idx,design,contrast=contr.matrix[,2])
ProjectTemplate::cache("inova.cam")

```

# plot PCA
```{r}
all.pca <- get.pca.dat(t(v2$E), all.sam)
ggplot(all.pca$dat, aes(PC1, PC2, col=Sample)) + geom_point(aes(pch=Study), size=2, alpha=0.7) + scale_shape_manual(values = c(21,22))

gg <- deg.dat$id
deg.pca <- get.pca.dat(t(v2$E[gg,]), all.sam)
ggplot(deg.pca$dat, aes(PC1, PC2, col=gender)) + geom_point(aes(pch=Study), size=2, alpha=0.7) + scale_shape_manual(values = c(21,22)) + labs(title="Gender")

ggplot(deg.pca$dat, aes(PC1, PC2, col=Sample)) + geom_point(aes(pch=Study), size=2, alpha=0.7) + scale_shape_manual(values = c(21,22)) + labs(title="Sample")

```

# check gender specific gene set
```{r}
# it loads two gene sets: msYgenes and XiEgenes
load(url("http://bioinf.wehi.edu.au/software/GenderGenes/GenderGenes.RData")) 

cor <- duplicateCorrelation(v2, design, block = all.sam$PID) 

  
Ymale <- gene2entrez(v2$genes$gene.name) %in% msYgenes 
Xescape <- gene2entrez(v2$genes$gene.name) %in% XiEgenes

index <- list(Y = Ymale, X = Xescape) 
# mroast(v2,index,design,contrast=contr.matrix[,1])
# Error in Effects[g, , drop = FALSE] : 
#   (subscript) logical subscript too long

# 9 + 3
compare(gene2entrez(deg.dat$gene.name), msYgenes)
compare(gene2entrez(deg.dat$gene.name), XiEgenes)
```
# check new model
If limma tutorial is correct, I should get similar result 
```{r}

Study <- factor(all.sam$Study)
Sample <- factor(all.sam$Sample)
design2 <-  model.matrix(~ Sample + Study)

colnames(design2) <- sub("^Sample", "", colnames(design2))

v.2 <- voom(dge.flt, design2, plot = TRUE)

# check the normalized v 
.d2 <- v.2$E %>% reshape2::melt()

# check the density of the normalized values
ggplot(.d2, aes(x=value, group=Var2, col=substr(Var2,1,3)=="ISA") )+ geom_density()

isExpr <- rowMeans(v.2$E) > 0
sum(isExpr)

v.22 <- v.2[isExpr,]

vfit.2 <- lmFit(v.22) 
vfit.2 <- eBayes(vfit.2)
results.all2 <- topTable(vfit.2, coef="HF", sort.by="P", lfc=0, p.value = 1, number=Inf) %>% mutate(DEG = abs(logFC) > 1 & adj.P.Val < 0.05)
table(results.all2$DEG)
deg.dat2 <- results.all2%>% filter(DEG) %>% arrange(-logFC)
comm <- compare(deg.dat2$id, deg.dat$id)

# compare side by side
.d1 <- results.all %>% arrange(id)
.d2 <- results.all2 %>% arrange(id)
all (.d1$id == .d2$id)
plot(.d1$FC, .d2$logFC) # the folder change is similar
plot(-log10(.d1$adj.P.Val), -log10(.d2$adj.P.Val)) # the p-value in the second model is relatively high compare the model 1

# try the camera again
gene.ids <- gene2entrez(v.22$genes$gene.name)
model2.cam <- lapply(msigdb5.2,  function(gs) {
  idx <- ids2indices(gs,id=gene.ids)
  rv <- camera(v.22,idx,design2,contrast=2)
  return(rv)
})

ProjectTemplate::cache("model2.cam")

model2.cam %>%  map(~ .x %>% filter(FDR < 0.05) %>% nrow) %>% unlist
inova.cam  %>%  map(~ .x %>% filter(FDR < 0.05) %>% nrow) %>% unlist

openxlsx::write.xlsx(inova.cam, "reports/geneset_model2.xlsx", row.names=T)
openxlsx::write.xlsx(deg.dat2, "reports/deg_model2.xlsx", row.names=T)

# volcano plot for mode2
ggplot(results.all2, aes(x=logFC, y=-log10(adj.P.Val))) + geom_point(aes(alpha=ifelse(DEG, 0.7, 0.3), col=DEG)) + geom_vline(xintercept = c(-1,1), lty=2, col="gray20") +  geom_hline(yintercept = -log10(0.05), lty=2, col="gray20") + scale_color_brewer(palette = "Set2") + theme(legend.position = "none")

ggsave(file="graphs/volcano_model2.pdf", width=4, height=5)
```
# now add the gender to the model3
# I cannot do this as the donor has no gender information
# I need impute the gender first
```{r}
entrez2gene(XiEgenes)
entrez2gene(msYgenes)
gender.gs <- list(female=entrez2gene(XiEgenes), male=entrez2gene(msYgenes) )
ss <-  v.22$genes$gene.name %in% unlist(gender.gs)

gender.pca <- get.pca.dat(t(v.22$E[ss,]), all.sam)
ggplot(gender.pca$dat, aes(PC1, PC2, col=gender)) + geom_point(aes(pch=Study), size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22))
ggsave(file="graphs/gender_pca.pdf", width=6, height=5)

# so PC1>0 is likely to be female
with(gender.pca$dat, table(PC1>0, gender,  useNA="ifany"))

# 6 are miss-assigned?
gender.pca$dat %>% filter( (PC1 > 0 & gender == "Male") | (PC1 < 0 & gender == "Female") ) %>% dplyr::select(1:8) -> gender_check.dat
ProjectTemplate::cache("gender_check.dat")
openxlsx::write.xlsx(gender_check.dat, "reports/gender_check.xlsx", row.names = T)

```



# update all.sam orinally from "../107_3rdRun/cache/all.sam.RData"

```{r}
# update lvedd and lvesd
ggplot(all.sam, aes(lvedd, lvesd)) + geom_point()
.d <- all.sam %>% mutate(lvedd = ifelse(lvedd > 20, lvedd/10, lvedd ), lvesd = ifelse(lvesd > 20, lvesd/10, lvesd)) 
ggplot(.d, aes(lvedd, lvesd)) + geom_point()
ggplot(.d, aes(duration_of_hf_months, lvedd)) + geom_boxplot() + geom_jitter()

ggplot(.d, aes(year_of_lvad, lvedd)) + geom_point()

all.sam <- .d
all.sam$gender.impute <- ifelse(gender.pca$dat$PC1 > 0, "Female", "Male")
with(all.sam, table(gender, gender.impute, useNA="ifany"))
ProjectTemplate::cache("all.sam")
```
# now calculte the model 3
```{r}

Study <- factor(all.sam$Study)
Sample <- factor(all.sam$Sample)
Gender <- factor(all.sam$gender.impute)

design3 <-  model.matrix(~ Sample + Study + Gender)

colnames(design3) <- sub("^Sample", "", colnames(design3))

v.3 <- voom(dge.flt, design3, plot = TRUE)

# check the normalized v 
.d3 <- v.3$E %>% reshape2::melt()

# check the density of the normalized values
ggplot(.d3, aes(x=value, group=Var2, col=substr(Var2,1,3)=="ISA") )+ geom_density()

isExpr.3 <- rowMeans(v.3$E) > 0
sum(isExpr.3)

v3 <- v.3[isExpr.3,]

vfit.3 <- lmFit(v3) 
vfit.3 <- eBayes(vfit.3)

gender.deg <- topTable(vfit.3, coef="GenderMale", sort.by="P", lfc=1, p.value = 0.05, number=Inf) 
ProjectTemplate::cache("gender.deg")

results.all3 <- topTable(vfit.3, coef="HF", sort.by="P", lfc=0, p.value = 1, number=Inf) %>% mutate(DEG = abs(logFC) > 1 & adj.P.Val < 0.05)

table(results.all3$DEG)
deg.dat3 <- results.all3 %>% filter(DEG) %>% arrange(-logFC)

comm <- compare(deg.dat2$id, deg.dat3$id)

# try the camera again
gene.ids <- gene2entrez(v3$genes$gene.name)
model3.cam <- lapply(msigdb5.2,  function(gs) {
  idx <- ids2indices(gs,id=gene.ids)
  rv <- camera(v3,idx,design3,contrast=2)
  return(rv)
})

ProjectTemplate::cache("model3.cam")

model2.cam %>%  map(~ .x %>% filter(FDR < 0.05) %>% nrow) %>% unlist
inova.cam  %>%  map(~ .x %>% filter(FDR < 0.05) %>% nrow) %>% unlist
model3.cam %>%  map(~ .x %>% filter(FDR < 0.05) %>% nrow) %>% unlist

#my.lst <- list("model1"=inova.cam, "model2"=model2.cam, "model3"=model3.cam)
openxlsx::write.xlsx( model3.cam, file="reports/model3.geneset.xlsx", row.names=T)
openxlsx::write.xlsx(list("model1"=deg.dat, "model2"=deg.dat2, "model3"=deg.dat3), file="reports/model3.geneset.xlsx", row.names=T)
openxlsx::write.xlsx(list("model1"=deg.dat, "model2"=deg.dat2, "model3"=deg.dat3), file="reports/3models.deg.xlsx", row.names=T)

# write.rnk file
write.table(results.all3[, c("gene.name", "logFC")], file="reports/model3.rnk", col.names=F, row.names=F, sep="\t", quote=F)

```

# review what I have completed
Gender might be an issue
camera test should be saved and so is the code
I have checked three models.
I need to do the following in the next steps (consider to wrap them into a function):
  
  1. cibersort
  2. check ribosome
  3. check hemoglobin
```{r}
ProjectTemplate::cache("results.all")

# 
openxlsx::write.xlsx(list(all=results.all, deg.dat=deg.dat), "reports/degs.xlsx", row.names = T)


```

---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# Introduction
Many have been done in the previous notebook, including the three models.  But those codes become very complicated and the Rstudio server is constantly disconnnected.  I need to reproduce the model3 here and save the important the normaliized data set for many things: pca plot, qa/qc, heatmapt etc.

# load data required for the model3
```{r}
load("cache/all.sam.RData") # locally updated all.sam
load("cache/dge.flt.RData")
```

# Use the models to normalize the data save the results
```{r}
Study <- factor(all.sam$Study)
Sample <- factor(all.sam$Sample)
Gender <- factor(all.sam$gender.impute)

design3 <-  model.matrix(~ Sample + Study + Gender)

colnames(design3) <- sub("^Sample", "", colnames(design3))

v.3 <- voom(dge.flt, design3, plot = TRUE)

# check the normalized v 
.d3 <- v.3$E %>% reshape2::melt()

# check the density of the normalized values
ggplot(.d3, aes(x=value, group=Var2, col=substr(Var2,1,3)=="ISA") )+ geom_density()

isExpr.3 <- rowMeans(v.3$E) > 0
sum(isExpr.3)

model3.dge <- v.3[isExpr.3,]
ProjectTemplate::cache("model3.dge")
```

# call DEGs again and save the results this time
```{r}
vfit.3 <- lmFit(model3.dge) 
vfit.3 <- eBayes(vfit.3)

model3.res <- topTable(vfit.3, coef="HF", sort.by="P", lfc=0, p.value = 1, number=Inf) %>% mutate(DEG = abs(logFC) > 1 & adj.P.Val < 0.05)

table(model3.res$DEG)
model3.deg <- model3.res %>% filter(DEG) %>% arrange(-logFC)

ProjectTemplate::cache("model3.res")
ProjectTemplate::cache("model3.deg")
```


# Check the PCA plot of the model3.degs

```{r}
model3.pca <- get.pca.dat(t(model3.dge$E[model3.deg$id, ]), all.sam)
ggplot(model3.pca$dat, aes(PC1, PC2, col=Sample)) + geom_point(aes(pch=Study), size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Model3") + scale_color_brewer(palette = "Set1")

ggsave("graphs/model3.pca.pdf", width=6, height=5)
```
# May I adjust the batch effect
```{r}
contrast <- "StudyUtah"
batch.res <- topTable(vfit.3, coef=contrast, sort.by="none", lfc=0, p.value = 1, number=Inf) %>% mutate(DEG = abs(logFC) > 1 & adj.P.Val < 0.05)

# make sure it is well-align
all(batch.res$id == row.names(model3.dge$E))
batch.adj <-    batch.res$logFC %*% t(design3[, "StudyUtah"])

E.adj <- model3.dge$E - batch.adj

# make a new pca plot
model3.pca2 <- get.pca.dat(t(E.adj[model3.deg$id, ]), all.sam)
ggplot(model3.pca2$dat, aes(PC1, PC2, col=Sample)) + geom_point(aes(pch=Study), size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Model3 (adjusted)") + scale_color_brewer(palette = "Set1")

ggsave("graphs/model3.pca_adj.pdf", width=6, height=5)
ProjectTemplate::cache("E.adj")
```

# Heatmap
```{r}
library(ComplexHeatmap)
.d <- E.adj[model3.deg$id, ]
dat <- t(apply(.d, 1, scale))

ann.dat <- all.sam[, c("Sample", "Study", "gender.impute")]

#ck <- apply(ann.dat, 2, function(cc) my.color.keys(cc))
#bh <- HeatmapAnnotation(ann.dat, col = lapply(ck, function(lst) lst$key))

# assign color manually
ann.colors <- list(Sample=c(DONOR="Green", HF="Red",TX="blue"), 
                   Study=c(Inova="#1B9E77", Utah="#D95F02"),
                   gender.impute=c("Female"="pink", Male="brown"))
bh <- HeatmapAnnotation(ann.dat, col = ann.colors)
                          
pdf(file="graphs/model3.heatmap.pdf", width=7, height=10)
Heatmap(dat, show_row_names = FALSE, show_column_names = F, bottom_annotation=bh)
dev.off()
```

---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# Have the snp47.bed file
```{r}
load("../../102_rnaseq/mito_rnaseq/cache/snp47.RData")

orig.bed <- read.delim(file="/itmi/home/zhuwe/dn/NGSCheckMate/SNP/SNP_GRCh37_hg19_wChr.bed", header=F)

snp47.bed <- orig.bed %>% mutate(ID = paste(V1, V3, sep=":")) %>% filter(ID %in% snp47) %>% select(-ID)

write.table(file="~/bighome/102/rnaseq/id_check/snp47.bed", snp47.bed, quote=F, row.names=F, col.names=F, sep="\t")
```

# Calling vcf @ SGI 

    cd ~/107
    mkdir -p identity_check/vcf
    
    # list all the bam files
    find rsem2 utah/rsem -name "*.genome.sorted.bam" > all.bam.lst
    
    parallel --bar  -j 100 --joblog 107_identity.log --rpl '{/*}  s:.*/::;  s:\..+$::;' 'samtools mpileup -I -uf $HG19 -l ~/bighome/102/rnaseq/id_check/snp47.bed {} | bcftools call -c > identity_check/vcf/{/*}.vcf' :::: all.bam.lst

# Load vcf now
```{r}
fns <- dir("~/107/identity_check/vcf", pattern="*.vcf$", f=T)

vcf.dat <- get_vcf_dat(fns)
ProjectTemplate::cache("vcf.dat")
```
---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# load the data to study the clustering in samples and subjects
```{r}
load("cache/E.adj.RData")
load("cache/all.sam.RData")
load("cache/model4.deg.RData")
load("cache/model4.adj.RData")
dat <- model4.adj[model4.deg$id, ] 
dim(dat)
```

# Check the replicate between Inova and Utah
```{r}
all.sam %>% group_by(PID, Sample) %>% filter(n() > 1) %>% arrange(PID)

ggplot(as.data.frame(model4.adj), aes(ISA506183, `13875X8`)) + geom_point() + geom_abline(lty=2)

ggplot(as.data.frame(model4.adj), aes(ISA506183, `ISA506185`)) + geom_point() + geom_abline(lty=2)

```

# the function pvlcust is very slow
```{r}
# Ward Hierarchical Clustering with Bootstrapped p values
library(pvclust)
fit <- pvclust(dat, method.hclust="ward", method.dist="euclidean")

```

```{r, fig.height=10, fig.width=8}
plot(fit) # dendogram with p values
# add rectangles around groups highly supported by the data
pvrect(fit, alpha=.95) 
```

# using multiClust
the gap_statistic option has a very long computational time and can take up to several hours
```{r}
library(multiClust)

# 7 
cluster_num <- number_clusters(data.exp=dat, Fixed=NULL, gap_statistic=TRUE)

# Clustering k = 1,2,..., K.max (= 8): .. done
# Bootstrapping, b = 1,2,..., B (= 100)  [one "." per sample]:
# .................................................. 50 
# .................................................. 100 
# [1] "The gap statistic cluster number is: 5"

# check the other dimension, 8 
cluster_num <- number_clusters(data.exp=t(dat), Fixed=NULL, gap_statistic=TRUE, k)

```
```{r}
library(factoextra)

# 9 
fviz_nbclust(dat, kmeans, method = "gap_stat") 

#
fviz_nbclust(t(dat), kmeans, method = "gap_stat") 

library(cluster)
gs <- clusGap(dat, FUN=kmeans, K.max=20, B=100)
fviz_gap_stat(gs)
```

```{r}
hc <- hclust(dist(dat))
plot(hc)

library("NbClust")
nb <- NbClust(dat, distance = "euclidean", min.nc = 2, max.nc = 10, method = "kmeans")
fviz_nbclust(nb)
```
# WGCNA
```{r}
# install.packages("WGCNA")
library(WGCNA)
library(cluster)
# for the samples
A <- adjacency(dat, type="distance")

# this calculates the whole network connectivity 
k=as.numeric(apply(A,2,sum))-1 

# standardized connectivity 
Z.k=scale(k)

hist(Z.k, n=100)

# Designate samples as outlying # if their Z.k value is below the threshold 
thresholdZ.k=-5 # often -2.5

outlierColor=ifelse(Z.k<thresholdZ.k,"red","black")

sampleTree = flashClust::flashClust(as.dist(1-A), method = "average")


# Convert traits to a color representation: 
# where red indicates high values 
datTraits <- all.sam[, 3:51] %>% str2factor(max.levels=Inf) %>% mutate_if (is.factor, as.numeric)

traitColors=data.frame(numbers2colors(datTraits,signed=FALSE)) 
dimnames(traitColors)[[2]]=paste(names(datTraits),"C",sep="") 

datColors=data.frame(outlierC=outlierColor,traitColors) 
# Plot the sample dendrogram and the colors underneath. 


plotDendroAndColors(sampleTree,groupLabels=names(datColors), colors=datColors,main="Sample dendrogram and trait heatmap")
dev.copy2pdf(file="graphs/treeplot.pdf", width=20, height=15)
```
```{r}
# cor of genes
cor <- cor(t(dat))

library(ComplexHeatmap)
Heatmap(cor)
```

```{r}
# choose power based on SFT criterion 
sft=pickSoftThreshold(t(dat),powerVector=1:30)
plot(sft$fitIndices$Power, sft$fitIndices$SFT.R.sq)

#7
sft$powerEstimate

mergingThresh = 0.25 
net = blockwiseModules(t(dat),corType="pearson", maxBlockSize=5000,networkType="unsigned",power=7,minModuleSize=10, mergeCutHeight=mergingThresh,numericLabels=TRUE,saveTOMs=TRUE, pamRespectsDendro=FALSE,saveTOMFileBase="wgcna_test1")

moduleLabelsAutomatic=net$colors

# Convert labels to colors for plotting 
moduleColorsAutomatic = labels2colors(moduleLabelsAutomatic)

# A data frame with module eigengenes can be obtained as follows
MEsAutomatic = net$MEs

# this is the body weight
weight = as.data.frame(all.sam$lvedd)
names(weight) = "weight"

# Next use this trait to define a gene significance variable
GS.weight = as.numeric(cor(t(dat), weight, use = "p"))

# This translates the numeric values into colors
GS.weightColor = numbers2colors(GS.weight, signed = F)
blocknumber = 1

datColors = data.frame(moduleColorsAutomatic, GS.weightColor)[net$blockGenes[[blocknumber]], ]

# Plot the dendrogram and the module colors underneath
plotDendroAndColors(net$dendrograms[[blocknumber]], colors = datColors, groupLabels = c("Module colors", 
    "GS.weight"), dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05)

```

---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# load gene ann
```{r}
load("/home/zhuwe/prj/heart_failure/107_RNAseq_2ndRun/cache/genes.ann.RData")
load("cache/E.adj.RData")
load("cache/all.sam.RData")
load("cache/model3.deg.RData")
deg.dat <- E.adj[model3.deg$id, ] 
dim(deg.dat)
```
# check ribosome genes
```{r}
source('/itmi/home/zhuwe/prj/heart_failure/107_RNAseq_4thRun/lib/gene_signatures.R')
ribo.gene <- get_ribosome_genes()
hb.gene <- get_hb_genes()

ribo.sig <- get_signature(E.adj, ribo.gene)

hb.sig <- get_signature(E.adj, hb.gene)
hist(hb.sig, n=100)

#  grep("nppa", row.names(E.adj), ignore.case = T, v=T)
# [1] "ENSG00000175206.10_2_NPPA"    "ENSG00000242349.5_3_NPPA-AS1"
 
plot(hb.sig, E.adj["ENSG00000175206.10_2_NPPA", ])

all.sam$hb.sig <- hb.sig
ggplot(all.sam, aes(x=Sample, y=hb.sig)) + geom_boxplot() + geom_point()
```

# run cibersort
```{r}
cib.sig <- run_cibersort(E.adj)

.d <- cib.sig %>% as.data.frame %>% rownames_to_column("ID") %>% gather(Cell, Abundance, B.cells.naive:Neutrophils)

ggplot(.d, aes(x=Cell, y=Abundance)) + geom_boxplot() + theme(axis.text.x = element_text(angle=90, hjust=1)) 

all.sam$cd4 <- cib.sig[, "T.cells.CD4.memory.resting"]
ggplot(all.sam, aes(hb.sig, cd4, col=Sample)) + geom_point()

pca.dat <- get.pca.dat(t(deg.dat), all.sam)
ggplot(pca.dat$dat, aes(x=PC1, y=hb.sig)) + geom_point()

(summary(lm(hb.sig~PC1, data=pca.dat$dat)))
ggplot(pca.dat$dat, aes(x=PC1, y=cd4)) + geom_point()

model3.deg %>% filter(grepl("HB", gene.name))
ProjectTemplate::cache("all.sam") # add hb.sig and cd4
```

# model4
```{r}

```

---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# Load data
```{r}
load("cache/all.sam.RData")
load("cache/dge.flt.RData")
```

# Use the models to normalize the data save the results
```{r}
Study <- factor(all.sam$Study)
Sample <- factor(all.sam$Sample)
Gender <- factor(all.sam$gender.impute)
HB <- all.sam$hb.sig

design4 <-  model.matrix(~ Sample + Study + Gender+HB)

colnames(design4) <- sub("^Sample", "", colnames(design4))

v.4 <- voom(dge.flt, design4, plot = TRUE)

# # check the normalized v 
# .d3 <- v.4$E %>% reshape2::melt()
# 
# # check the density of the normalized values
# ggplot(.d3, aes(x=value, group=Var2, col=substr(Var2,1,3)=="ISA") )+ geom_density()
# 
isExpr.4 <- rowMeans(v.4$E) > 0
sum(isExpr.4)

model4.dge <- v.4[isExpr.4,]
ProjectTemplate::cache("model4.dge")
```


```{r}
vfit.4 <- lmFit(model4.dge) 
vfit.4 <- eBayes(vfit.4)

model4.res <- topTable(vfit.4, coef="HF", sort.by="P", lfc=0, p.value = 1, number=Inf) %>% mutate(DEG = abs(logFC) > 1 & adj.P.Val < 0.05)

hb.res <- topTable(vfit.4, coef="HB", sort.by="P", lfc=0, p.value = 1, number=Inf) 

table(model4.res$DEG)
model4.deg <- model4.res %>% filter(DEG) %>% arrange(-logFC)

openxlsx::write.xlsx(model4.deg, "reports/model4.deg.xlsx", row.names=T)
ProjectTemplate::cache("model4.res")
ProjectTemplate::cache("model4.deg")
```
# pca of deg4
# Check the PCA plot of the model3.degs

```{r}
model4.pca <- get.pca.dat(t(model4.dge$E[model4.deg$id, ]), all.sam)
ggplot(model4.pca$dat, aes(PC1, PC2, col=Sample)) + geom_point(aes(pch=Study), size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Model4") + scale_color_brewer(palette = "Set1")

ggsave("graphs/model4.pca.pdf", width=6, height=5)


```


# May I adjust the batch effect
```{r}
contrast <- "StudyUtah"
batch.res <- topTable(vfit.4, coef=contrast, sort.by="none", lfc=0, p.value = 1, number=Inf) %>% mutate(DEG = abs(logFC) > 1 & adj.P.Val < 0.05)

# make sure it is well-align
all(batch.res$id == row.names(model4.dge$E))
batch.adj <-    batch.res$logFC %*% t(design4[, "StudyUtah"])
hb.adj <- hb.res$logFC %*% t(design4[, "HB"])

model4.adj <- model4.dge$E - batch.adj -hb.adj

# make a new pca plot
model4.pca2 <- get.pca.dat(t(model4.adj[model4.deg$id, ]), all.sam)
p <- ggplot(model4.pca2$dat, aes(PC1, PC2, col=Sample)) + geom_point(aes(pch=Study), size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Model4 (adjusted)") + scale_color_brewer(palette = "Set1")

plot(p)
ggsave("graphs/model4.pca_adj.pdf", width=6, height=5)
ProjectTemplate::cache("model4.adj")


# label all replicates 
rep.ids <- all.sam %>% group_by(PID, Sample) %>% filter(n() > 1) %>% arrange(PID) %>% .$PID %>% unique

subset(model4.pca2$dat, PID %in% rep.ids) %>% arrange(PID)
p + geom_text(data=subset(model4.pca2$dat, PID %in% rep.ids), aes(label=PID), col="black")
ggsave("graphs/model4.pca_adj.rep_label.pdf", width=6, height=5)

# how TX looks
tx.res <- topTable(vfit.4, coef="TX", sort.by="P", lfc=0, p.value = 1, number=Inf) %>% mutate(DEG = abs(logFC) > 1 & adj.P.Val < 0.05)
table(tx.res$DEG)
tx.deg <- tx.res %>% filter(DEG) %>% arrange(-logFC)
View(tx.deg)
```


# Heatmap
```{r}
library(ComplexHeatmap)
.d <- model4.adj[model4.deg$id, ]
dat <- t(apply(.d, 1, scale))

ann.dat <- all.sam[, c("Sample", "Study", "gender.impute")]

#ck <- apply(ann.dat, 2, function(cc) my.color.keys(cc))
#bh <- HeatmapAnnotation(ann.dat, col = lapply(ck, function(lst) lst$key))

# assign color manually
ann.colors <- list(Sample=c(DONOR="Green", HF="Red",TX="blue"), 
                   Study=c(Inova="#1B9E77", Utah="#D95F02"),
                   gender.impute=c("Female"="pink", Male="brown"))
bh <- HeatmapAnnotation(ann.dat, col = ann.colors)
                          
pdf(file="graphs/model4.heatmap.pdf", width=7, height=10)
Heatmap(dat, show_row_names = FALSE, show_column_names = F, bottom_annotation=bh)
dev.off()
```

# camera
# try the camera again

```{r}
load("cache/msigdb5.2.RData")
gene.ids <- gene2entrez(model4.dge$genes$gene.name)
model4.cam <- lapply(msigdb5.2,  function(gs) {
  idx <- ids2indices(gs,id=gene.ids)
  rv <- camera(model4.dge,idx,design4,contrast="HF")
  return(rv)
})
openxlsx::write.xlsx(model4.cam, "reports/model4.cam.xlsx", row.names=T)
ProjectTemplate::cache("model4.cam")
```

```{r}
source('/itmi/home/zhuwe/prj/heart_failure/107_RNAseq_4thRun/lib/gene_signatures.R')
load("cache/msigdb_52.RData")

universe <- genes.ann[row.names(model4.adj), "gene.name"]

# skip module 0
gg <- model4.deg$gene.name
model4.enrich <-  my_enrich(gg, universe, msigdb_52, mc.cores=6)

write.xlsx(model4.enrich, "reports/model4.enrich..xlsx", row.names=T)
```



```{r}
model4.cam %>%  map(~ .x %>% filter(FDR < 0.05) %>% nrow) %>% unlist

model4.cam$Hs.H %>% head()

model4.cam$Hs.c2 %>% head()

```
# WGCNA using the whole genes
```{r}
.d <- t(model4.adj[order(apply(model4.adj,1,mad), decreasing = T)[1:5000],])
dim(.d)

library(WGCNA)
library(cluster)
# for the samples

#A <- adjacency(t(.d), type="distance")
s <- abs(bicor(.d))

powers = c(c(1:10), seq(from = 12, to=20, by=2))
sft = pickSoftThreshold(.d, powerVector = powers, verbose = 5)


plot(sft$fitIndices$Power, sft$fitIndices$SFT.R.sq)

#7
beta = sft$powerEstimate
A <- s^beta
W <- 1-A

geneTree = hclust(as.dist(W), method = 'average')

#module identification using dynamic tree cut algorithm
modules = cutreeDynamic(dendro = geneTree, distM = W, deepSplit = 4, pamRespectsDendro = FALSE, minClusterSize = 30)

#assign module colours
module.colours = labels2colors(modules)
```


```{r}
#plot the dendrogram and corresponding colour bars underneath
plotDendroAndColors(geneTree, module.colours, 'Module colours', dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05, main='') 
dev.copy2pdf(file="graphs/gene_module_tree.pdf", height=8, width=10)

library(ape)
#calculate eigengenes
MEs = moduleEigengenes(.d, colors = module.colours, excludeGrey = FALSE)$eigengenes

#calculate dissimilarity of module eigengenes
MEDiss = 1-cor(MEs);

#cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = 'average');

#plot the result with phytools package
par(mar=c(2,2,2,2))
plot.phylo(as.phylo(METree),type = 'fan',show.tip.label = FALSE, main='')
tiplabels(frame = 'circle',col='black', text=rep('',length(unique(modules))), bg = levels(as.factor(module.colours))) 

dev.copy2pdf(file="graphs/module_tree.pdf", height=8, width=10)
```
```{r}
#calculate gene significance measure for Sample
scr <- all.sam %>% mutate(scr = Sample !="DONOR") %>% .$scr %>% as.numeric()

library(broom)
GS.scr <- map_df(as.data.frame(.d), ~tidy(t.test(.x ~ scr), var.equal=F)) 
row.names(GS.scr) = colnames(.d) 

```

```{r}
load("/home/zhuwe/prj/heart_failure/107_RNAseq_2ndRun/cache/genes.ann.RData")

ref_genes = genes.ann[colnames(.d), "gene.name"]

#create data frame for GO analysis
library(org.Hs.eg.db)
GO = toTable(org.Hs.egGO); SYMBOL = toTable(org.Hs.egSYMBOL)
GO_data_frame = data.frame(GO$go_id, GO$Evidence,SYMBOL$symbol[match(GO$gene_id,SYMBOL$gene_id)])

#create GOAllFrame object
library(AnnotationDbi)
GO_ALLFrame = GOAllFrame(GOFrame(GO_data_frame, organism = 'Homo sapiens'))

head(GO_data_frame)
head(GO_ALLFrame)

#create gene set
library(GSEABase)
gsc <- GeneSetCollection(GO_ALLFrame, setType = GOCollection())

#perform GO enrichment analysis and save results to list - this make take several minutes
# library(GOstats)
# GSEAGO = vector('list',length(unique(modules)))
# for(i in 0:(length(unique(modules))-1)){
#   GSEAGO[[i+1]] = summary(hyperGTest(GSEAGOHyperGParams(name = 'Homo sapiens GO',  geneSetCollection = gsc, geneIds = colnames(RNAseq)[modules==i],  universeGeneIds = ref.genes, ontology = 'BP', pvalueCutoff = 0.05,  conditional = FALSE, testDirection = 'over')))
#   print(i)
# }
# 
# cutoff_size = 100
# 
# GO_module_name = rep(NA,length(unique(modules)))
# for (i in 1:length(unique(modules))){
#   GO.module.name[i] = 
#     GSEAGO[[i]][GSEAGO[[i]]$Size<cutoff_size,
#     ][which(GSEAGO[[i]][GSEAGO[[i]]$Size<cutoff_size,]$Count==max(GSEAGO[[i]][GSEAGO[[i]]$
#     Size<cutoff.size,]$Count)),7]
# }


GO.module.name = paste0('module ', seq_along(unique(modules))-1) #calculate module significance
MS.lscore = as.data.frame(cbind(GS.scr,modules))
MS.lscore$log_p_value = -log10(as.numeric(MS.lscore$p.value))
MS.lscore = ddply(MS.lscore, .(modules), summarize, mean(log_p_value), sd(log_p_value))
colnames(MS.lscore) = c('modules','pval','sd')
MS.lscore.bar = as.numeric(MS.lscore[,2])
MS.lscore.bar[MS.lscore.bar<(-log10(0.05))] = 0
names(MS.lscore.bar) = GO.module.name

METree.GO = METree
label.order = match(METree$labels,paste0('ME',labels2colors(0:(length(unique(modules))-1))))
METree.GO$labels = GO.module.name[label.order]
library(phytools)
plotTree.wBars(as.phylo(METree.GO), MS.lscore.bar, tip.labels = TRUE, scale = 0.2) 

```

```{r}
#Calculate module membership
MM = abs(bicor(.d, MEs))

#plot individual module of interest (MOI)
MOI = 21 #T cell differentiation co-expression module
plot(-log10(GS.scr[modules==MOI,"p.value"]), MM[modules==MOI,MOI], pch=20,cex=-(GS.scr[modules==MOI,"estimate"]/max(GS.scr[,"estimate"],na.rm=TRUE))*10,xlab='p-value (-log10)score', ylab='membership to module 21')
abline(v=-log10(0.05), lty=2, lwd=2) 

```
# name the module using my_enrichment
```{r}
source('/itmi/home/zhuwe/prj/heart_failure/107_RNAseq_4thRun/lib/gene_signatures.R')
load("cache/msigdb_52.RData")

universe <- genes.ann[row.names(model4.adj), "gene.name"]

# skip module 0
enrich.res <- purrr::map(1:max(modules), function(x){
  gg <- genes.ann[colnames(.d)[modules==x], "gene.name"]
  my_enrich(gg, universe, msigdb_52, mc.cores=6)
})

module.genes <- purrr::map(1:max(modules), function(x){
  gg <- genes.ann[colnames(.d)[modules==x], "gene.name"]
  return(gg)
})
names(module.genes) <- names(enrich.res) <- paste0("Module_", 1:max(modules))
ProjectTemplate::cache("enrich.res")
ProjectTemplate::cache(".d") 
ProjectTemplate::cache("modules")
ProjectTemplate::cache("module.genes")

enrich.res[[9]] %>% arrange(P.value) %>% head

# module22 is IFN g
write.xlsx(enrich.res, "reports/enrich.res.xlsx", row.names=T)
```

# module-trait heatmap
```{r, fig.width=15, fig.height=10}
MEs.2 <- orderMEs(MEs)


moduleTraitCor = cor(MEs.2, datTraits, use="p")
nSamples = nrow(.d)
nGenes = ncol(.d)
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor, nSamples)

sizeGrWindow(10,6) 
# Will display correlations and their p-values 
textMatrix = paste(signif(moduleTraitCor, 2), "\n(", signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor) 

par(mar = c(6, 8.5, 3, 3)); 

# Display the correlation values within a heatmap plot 
labeledHeatmap(Matrix = moduleTraitCor, xLabels = names(datTraits), yLabels = names(MEs), ySymbols = names(MEs), colorLabels = FALSE, colors = greenWhiteRed(50), textMatrix = textMatrix, setStdMargins = FALSE, cex.text = 0.5, zlim = c(-1,1), main = paste("Module-trait relationships"))

dev.copy2pdf(file="graphs/trait_module.heatmap.pdf", width=19, height=12)
```

# TOM
see https://www.stat.wisc.edu/~yandell/statgen/ucla/WGCNA/wgcna.html
```{r}
A <- adjacency(.d, power=beta)
dissTOM <- TOMdist(A)

# hierarchical clustering
geneTree = flashClust::flashClust(as.dist(dissTOM), method = "average")
# here we define the modules by cutting branches
moduleLabelsManual1 = cutreeDynamic(dendro = geneTree, distM = dissTOM, method = "hybrid", 
    deepSplit = 2, pamRespectsDendro = F, minClusterSize = 30)
# Relabel the manual modules so that their labels match those from our
# previous analysis

#moduleColorManual1 <- labels2colors(moduleLabelsManual1)
moduleLabelsManual2 = WGCNA::matchLabels(moduleLabelsManual1, modules)
# Convert labels to colors for plotting
moduleColorsManual2 = labels2colors(moduleLabelsManual2)

# check ME moduleEigengenes
# Calculate eigengenes
MEList = moduleEigengenes(.d, colors = moduleColorsManual2)
MEs = MEList$eigengenes

# Add the weight to existing module eigengenes
MET = orderMEs(cbind(MEs, scr))
```

```{r, fig.height=9, fig.width=6}
# Plot the relationships among the eigengenes and the trait
plotEigengeneNetworks(MET, "", marDendro = c(0, 4, 1, 2), marHeatmap = c(3, 
    4, 1, 2), cex.lab = 0.8, xLabelsAngle = 90)
```

```{r, fig.height=8, fig.width=6}
# automatically merge highly correlated modules
merge = mergeCloseModules(.d, moduleColorsManual2, cutHeight = mergingThresh)

##  mergeCloseModules: Merging modules whose distance is less than 0.25
##    Calculating new MEs...

# resulting merged module colors
moduleColorsManual3 = merge$colors

# eigengenes of the newly merged modules:
MEsManual = merge$newMEs

# Next use this trait to define a gene significance variable
GS.weight = as.numeric(cor(.d, scr, use = "p"))

scrColor = numbers2colors(GS.weight, signed = T)

datColors = data.frame(moduleColorsManual3, module.colours, scrColor)

plotDendroAndColors(geneTree, colors = datColors, groupLabels = c("manual hybrid", 
    "test1", "GS.weight"), dendroLabels = FALSE, hang = 0.03, 
    addGuide = TRUE, guideHang = 0.05)

```

# module-trait heatmap
```{r, fig.width=9, fig.height=4}
MEs.3 <- orderMEs(MEsManual)


moduleTraitCor = cor(MEs.3, datTraits, use="p")
nSamples = nrow(.d)
nGenes = ncol(.d)
moduleTraitPvalue <- corPvalueStudent(moduleTraitCor, nSamples)

sizeGrWindow(10,6) 
# Will display correlations and their p-values 
textMatrix = paste(signif(moduleTraitCor, 2), "\n(", signif(moduleTraitPvalue, 1), ")", sep = "");
dim(textMatrix) = dim(moduleTraitCor) 

par(mar = c(6, 8.5, 3, 3)); 

# Display the correlation values within a heatmap plot 
labeledHeatmap(Matrix = moduleTraitCor, xLabels = names(datTraits), yLabels = names(MEs.3), ySymbols = names(MEs.3), colorLabels = FALSE, colors = greenWhiteRed(50), textMatrix = textMatrix, setStdMargins = FALSE, cex.text = 0.5, zlim = c(-1,1), main = paste("Module-trait relationships"))

dev.copy2pdf(file="graphs/trait_module_manual.heatmap.pdf", width=9, height=4)
```

# KME
```{r, fig.height=7, fig.width=8}
datKME=signedKME(.d, MEs.3)

colorOfColumn = substring(names(datKME), 4)
par(mfrow = c(2, 2))
selectModules = c("tan", "darkred", "cyan", "grey")
par(mfrow = c(2, length(selectModules)/2))
for (module in selectModules) {
    column = match(module, colorOfColumn)
    restModule = moduleColorsManual3 == module
    verboseScatterplot(datKME[restModule, column], GS.weight[restModule], xlab = paste("Module Membership ", 
        module, "module"), ylab = "GS.weight", main = paste("kME.", module, 
        "vs. GS"), col = module)
}
```

```{r}
cmd1 = cmdscale(as.dist(dissTOM), 2)
par(mfrow = c(1, 1))
plot(cmd1, col = moduleColorsManual3, cex=0.2,main = "MDS plot", xlab = "Scaling Dimension 1", ylab = "Scaling Dimension 2")

```
# TOMPlot (also known as connectivity plot) of the network connections.
```{r}
# Set the diagonal of the TOM disscimilarity to NA
diag(dissTOM) = NA
# Transform dissTOM with a power to enhance visibility
TOMplot(dissim=dissTOM^7,dendro=geneTree,colors=moduleColorsManual3, main = "Network heatmap plot, all genes")

# Error: C stack usage  7969236 is too close to the limit
```
# Wrap what have done so far
check moduleColorsManual3 = merge$colors in particular the darkred for Samples and grey for gender

```{r}
source('/itmi/home/zhuwe/prj/heart_failure/107_RNAseq_4thRun/lib/gene_signatures.R')
load("cache/msigdb_52.RData")

universe <- genes.ann[row.names(model4.adj), "gene.name"]

# skip module 0
mm <- setdiff(unique(moduleColorsManual3), "black")

enrich.res2 <- purrr::map(mm, function(x){
  gg <- genes.ann[colnames(.d)[moduleColorsManual3==x], "gene.name"]
  my_enrich(gg, universe, msigdb_52, mc.cores=6)
})


module.genes2 <- purrr::map(mm, function(x){
  gg <- genes.ann[colnames(.d)[moduleColorsManual3==x], "gene.name"]
  return(gg)
})

names(module.genes2) <- names(enrich.res2) <- mm

ProjectTemplate::cache("enrich.res2")
ProjectTemplate::cache("module.genes2")

out <- llply(enrich.res2, function(x){
  # %>% filter(P.value < 1e-10)
  cat(dim(x), "\n")
  rv <- x  %>% dplyr::arrange(P.value) %>% head(n=10)
  print(rv)
  return(rv)
})
# module22 is IFN g
write.xlsx(enrich.res2, "reports/enrich.res2.xlsx", row.names=T)
```

# need to check traits using factoextra
```{r}
all.sam <- all.sam %>% bind_cols(MEs.3)
ProjectTemplate::cache("all.sam")
```
# Heatmap
```{r}
library(ComplexHeatmap)
.d <- model4.adj[model4.deg$id, ]
dat <- t(apply(.d, 1, scale))

ann.dat <- all.sam[, c("Sample", "Study", "gender.impute")]

#ck <- apply(ann.dat, 2, function(cc) my.color.keys(cc))
#bh <- HeatmapAnnotation(ann.dat, col = lapply(ck, function(lst) lst$key))

# assign color manually
ann.colors <- list(Sample=c(DONOR="Green", HF="Red",TX="blue"), 
                   Study=c(Inova="#1B9E77", Utah="#D95F02"),
                   gender.impute=c("Female"="pink", Male="brown"))
bh <- HeatmapAnnotation(ann.dat, col = ann.colors)
                          
pdf(file="graphs/model4.heatmap.pdf", width=7, height=10)
Heatmap(dat, show_row_names = FALSE, show_column_names = F, bottom_annotation=bh)
dev.off()
```
---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# Evaluate the clinical informaiton
```{r}
load("cache/all.sam.RData")

library(factoextra)
library(FactoMineR)

clin.dat <- all.sam %>% dplyr::select(Sample, age:duration_of_hf_months, weight, lvedd, lvesd, Study:MEgrey, -(gender)) %>% str2factor(max.levels = Inf)

library(ComplexHeatmap)

.d <- clin.dat %>% is.na() %>%  `+`(0) %>% as.matrix
Heatmap(.d)

na.row <- apply(clin.dat, 1 , function(x) sum(is.na(x)))
na.col <- apply(clin.dat, 2 , function(x) sum(is.na(x)))

dat <- clin.dat[na.row==0, ]
dim(dat)

res.famd <- FAMD(dat, graph = FALSE)
fviz_screeplot(res.famd)

fviz_famd_var(res.famd)

# Quantitative variables
fviz_famd_var(res.famd, "quanti.var", repel = TRUE, col.var = "black")

# Qualitative variables
fviz_famd_var(res.famd, "quali.var", col.var = "black")

fviz_famd_ind(res.famd, col.ind = "cos2",
  gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
  repel = TRUE)
```
# MFA
```{r}
res.mfa <- MFA(dat, group=c(1, 7, 2, 4, 8), type=c("") raph=FALSE)

```
```{r}
ggplot(dat, aes(x=lvesd, y=lvedd, col=gender.impute)) + geom_point()

ggplot(dat, aes(x=MEgrey, y=weight, col=gender.impute)) + geom_point()
ggplot(dat, aes(x=Study, y=hb.sig, col=gender.impute)) + geom_boxplot()

ggplot(all.sam, aes(x=Sample, y=MEdarkred, col=gender.impute)) + geom_boxplot()
```
```{r, fig.width=10, fig.height=10}
pairs(dat[,c(9,13:22)], cex=.3)
```

```{r, fig.height=20, fig.width=20}

isnum <- apply(all.sam, 2, numCheck)
dd <- all.sam[,isnum]
M <- cor(dd, use= "pairwise.complete.obs")

library(corrplot)
corrplot(M, type="upper", method="circle")
dev.copy2pdf(file="graphs/corrplot.pdf", height=20, width=20)
```

---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# Refine the subject/sample data
### Clean-up samples that were sequenced twice in the dataset. Would keep the Inova sequence data and exclude the Utah sequence data.
### Combine HF & TX samples as HF samples only. 

```{r}
load("cache/all.sam.RData")

length(unique(all.sam$PID)) #195
# Sort by PID, source and then Sample
# recode TX to HF then
sam.fil <- all.sam %>%  group_by(PID) %>% arrange(source, Sample) %>% filter(row_number() == 1)  %>% mutate(Sample = plyr::revalue(Sample, c("TX"="HF"), warn_missing=F))

with(sam.fil, table(source, Sample))

ProjectTemplate::cache("sam.fil")
```
# make a comparison
```{r}
library(tableone)

vars <- names(sam.fil)[6:49]

# remove the controls
dat <- sam.fil %>% filter(Sample == "HF")

table1 <- CreateTableOne(vars = c(vars), strata = "source", data = dat, test = T)
## Show table with SMD
print(table1, smd = F)

```

# compare ICM vs NICM
```{r}
load("cache/sam.fil.RData")

library(tableone)

vars <- names(sam.fil)[6:49]

# remove the controls
dat <- sam.fil %>% filter(Sample == "HF")

table2 <- CreateTableOne(vars = c(vars), strata = "chf_etiology", data = dat, test = T)
## Show table with SMD
print(table2, smd = F)


```

# Any patient who is not classified as an ICM or NICM, should be considered an NICM.
```{r}
head(dat)
table(sam.fil$chf_etiology, useNA="ifany")

.d <- sam.fil %>% mutate(chf_etiology = mapvalues(chf_etiology, c("Idiopathic", NA), c("NICM", "HC"),  warn_missing =F))

table(.d$chf_etiology)
sam.fil <- .d 
ProjectTemplate::cache("sam.fil")
```
# Generate the matched expression data
```{r}
load("cache/dge.flt.RData")
load("cache/sam.fil.RData")
dge.flt2 <- dge.flt[, sam.fil$ID]
ProjectTemplate::cache("dge.flt2")
```

---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# Load data
```{r}
rm(list=ls())
load("cache/sam.fil.RData")
load("cache/dge.flt2.RData")
```

# now have the model5 for ICM vs NICM
```{r}
Study <- factor(sam.fil$Study)
Type <- factor(sam.fil$chf_etiology)
Gender <- factor(sam.fil$gender.impute)
HB <- sam.fil$hb.sig

design5 <-  model.matrix(~ Type + Study + Gender+HB)

colnames(design5) <- sub("^Type", "", colnames(design5))

v5 <- voom(dge.flt2, design5, plot = TRUE)
dev.copy2pdf(file="graphs/voom_plot.design5.pdf")

isExpr.5 <- rowMeans(v5$E) > 0
sum(isExpr.5)

model5.dge <- v5[isExpr.5,]
ProjectTemplate::cache("model5.dge")
```

# fit for model 5
```{r}
vfit5 <- lmFit(model5.dge) 
# vfit5 <- eBayes(vfit5)

contrast.matrix <- makeContrasts(
  ICM, 
  NICM,
  Dif= NICM - ICM,
  StudyUtah,
  HB,
  GenderMale,
  levels=design5)

vfit5.2 <- contrasts.fit(vfit5, contrast.matrix)
vfit5.2 <- eBayes(vfit5.2)

ProjectTemplate::cache("vfit5.2")

model5.dif <- topTable(vfit5.2, coef="Dif", sort.by="P", lfc=0, p.value = 1, number=Inf) %>% mutate(DEG = abs(logFC) > 1 & adj.P.Val < 0.05)

model5.icm <- topTable(vfit5.2, coef="ICM", sort.by="P", lfc=0, p.value = 1, number=Inf) %>% mutate(DEG = abs(logFC) > 1 & adj.P.Val < 0.05)

model5.nicm <- topTable(vfit5.2, coef="NICM", sort.by="P", lfc=0, p.value = 1, number=Inf) %>% mutate(DEG = abs(logFC) > 1 & adj.P.Val < 0.05)

icm.deg <- model5.icm %>% filter(DEG) %>% arrange(-logFC)
nicm.deg <- model5.nicm %>% filter(DEG) %>% arrange(-logFC)
dif.deg <- model5.dif %>% filter(DEG) %>% arrange(-logFC)

# allow more genes in the list
dif.deg2 <- model5.dif %>% filter(abs(logFC) > log2(1.2) & P.Value < 0.05) %>% arrange(-logFC)
dim(dif.deg2) #830

comm <- compare(nicm.deg$gene.name, icm.deg$gene.name)

model5.res <- list(ICM=icm.deg, NICM=nicm.deg, "NICM-ICM"=dif.deg, dif2=dif.deg2)
ProjectTemplate::cache("model5.res")

# save to file
openxlsx::write.xlsx(model5.res, "reports/model5.res", row.names=T)
```

# adjust the data matrix by the batch effect
# May I adjust the batch effect
```{r}
model5.study <-  topTable(vfit5.2, coef="StudyUtah", sort.by="none", lfc=0, p.value = 1, number=Inf) %>% mutate(DEG = abs(logFC) > 1 & adj.P.Val < 0.05)

model5.hb <-  topTable(vfit5.2, coef="HB", sort.by="none", lfc=0, p.value = 1, number=Inf) %>% mutate(DEG = abs(logFC) > 1 & adj.P.Val < 0.05)

# make sure it is all matched
all(model5.study$id == row.names(model5.dge$E))

batch.adj <-  model5.study$logFC %*% t(design5[, "StudyUtah"])
hb.adj <- model5.hb$logFC %*% t(design5[, "HB"])

model5.adj <- model5.dge$E - batch.adj -hb.adj
ProjectTemplate::cache("model5.adj")
```

# make a pca plot before and after the adjustment
```{r}

model5.pca <- get.pca.dat(t(model5.dge$E), as.data.frame(sam.fil))
p <- ggplot(model5.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(aes(pch=Study), size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Model5 (wo adjustment)") + scale_color_brewer(palette = "Set1")

plot(p)
ggsave("graphs/model5.all_genes.pca.pdf", width=6, height=5)


model5_adj.pca <- get.pca.dat(t(model5.adj), as.data.frame(sam.fil))
p <- ggplot(model5_adj.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(aes(pch=Study), size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Model5 (adjusted)") + scale_color_brewer(palette = "Set1")

plot(p)
ggsave("graphs/model5_adj.all_genes.pca.pdf", width=6, height=5)

```

# PCA plot of the selected genes 
```{r}
model5_adj.dif.pca <- get.pca.dat(t(model5.adj[dif.deg2$id, ]), as.data.frame(sam.fil))
p <- ggplot(model5_adj.dif.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(aes(pch=Study), size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Model5 (adjusted)") + scale_color_brewer(palette = "Set1")

plot(p)
ggsave("graphs/model5_adj.dif_deg2.pca.pdf", width=6, height=5)


model5_adj.icm.pca <- get.pca.dat(t(model5.adj[icm.deg$id, ]), as.data.frame(sam.fil))
p <- ggplot(model5_adj.icm.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(aes(pch=Study), size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Model5 (adjusted)") + scale_color_brewer(palette = "Set1")

plot(p)
ggsave("graphs/model5_adj.icm_deg.pca.pdf", width=6, height=5)


```

# check FOS/FOSB
```{r}

.deg <- model5.adj[dif.deg$id,] %>% t %>% as.data.frame %>% setNames( c("FOS", "FOSB"))

.dat <- cbind( as.data.frame(sam.fil), .deg)
ggplot(.dat, aes(chf_etiology, FOS, col=chf_etiology)) + geom_boxplot() + geom_jitter()

ggplot(.dat, aes(chf_etiology, FOSB, col=chf_etiology)) + geom_boxplot() + geom_jitter()
```
# plot the cluster
```{r, fig.width=4, fig.height=16}
library(dendextend)
load("cache/model5.adj.RData")
load("cache/model5.res.RData")
dend <- model5.adj[model5.res$dif2$id, ] %>% t %>% scale %>% dist %>% hclust(method = "ward.D2") %>% as.dendrogram 
plot(dend)

row.names(sam.fil) <- sam.fil$ID
leave.col <- data.frame(ID=labels(dend)) %>% left_join(sam.fil) %>% .$chf_etiology %>% my.color.keys

source.col <- data.frame(ID=labels(dend)) %>% left_join(sam.fil) %>% .$source %>% my.color.keys

# add bars
bars <- data.frame(ID=labels(dend)) %>% left_join(sam.fil) %>% select(chf_etiology, source) %>% mutate(chf_etiology=mapvalues(chf_etiology, c("HC", "ICM", "NICM"), c("green", "red", "purple")) ) %>% mutate(source=mapvalues(source, c("Inova", "Utah"), c("lightblue", "brown")))

# set leave as points
dend %>% set("leaves_pch", 19) %>% set("leaves_col", leave.col$col) %>% set("labels", "") %>% set("leaves_cex", 1) %>%plot (horiz=T)

dend %>% set("leaves_pch", 19) %>% set("leaves_col", source.col$col) %>% set("labels", "") %>% set("leaves_cex", 1) %>%plot (horiz=T)

# ggplot(ggd) + coord_polar(theta="x") 
# plot with bars
# dend %>% set("labels", "") %>% plot
# colored_bars(colors = bars, dend = dend)

```

---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# load data
```{r}
load("cache/model5.adj.RData")
load("cache/model5.dge.RData")
```

# check the highly expressed genes
```{r}
expr.median <- apply(model5.adj, 1, median)
expr.dat <- cbind(model5.dge$genes, expr=expr.median)
ggplot(expr.dat, aes(x=expr, col=ref=='chrM')) + geom_density()

# remove those MT codtRNAs
mito.genes <- expr.dat %>% filter(ref == 'chrM') %>% filter(expr > 0)

sum(expr.dat$expr > 10)

mito.expr <- model5.adj[mito.genes$id,]

.dat <- t(mito.expr)
colnames(.dat) <- mito.genes$gene.name
mito.avg <- apply(.dat, 1, mean, na.rm=T)
pairs(cbind(.dat, mito.avg))
dev.copy2pdf(file="graphs/mito_expr.pairs.pdf", width=15, height=15)
```

# nt-code mt genes
```{r}
nt_mito.genes <- c("POLRMT", "TFAM", "TFB1M", "TFB2M", "B2M")
nt_mito.dat <- expr.dat %>% filter(gene.name %in% nt_mito.genes)

nt_mito.expr <- t(model5.adj[nt_mito.dat$id,])
colnames(nt_mito.expr) <- nt_mito.dat$gene.name
.dat2 <- cbind(.dat, mito.avg, nt_mito.expr)
pairs(.dat2)
dev.copy2pdf(file="graphs/mito_expr_nt.pairs.pdf", width=20, height=20)

```

# Load invitae gene list
```{r}
# remove star  "SDHA*"
invitae.dat <- read.delim("data/invitae_106.txt", header = T) %>% mutate(Gene = sub("\\*", "", Gene))

setdiff(invitae.dat$Gene, expr.dat$gene.name)
# [1] "A2ML1" "CALR3" "MYLK2" "TTR" 
ProjectTemplate::cache("invitae.dat")
```
# plot the heatmap of the selected genes
```{r}
library(ComplexHeatmap)

genes.lst <- list(Mito=mito.genes$gene.name, 'Mito@NT'=c("POLRMT", "TFAM", "TFB1M", "TFB2M") ,HK= c("GAPDH", "B2M"), Invitae=invitae.dat$Gene)

select.genes <- unlist(genes.lst)

# map gene back to the gene groups
select.ids <- expr.dat %>% filter(gene.name %in% select.genes) %>% .$id
gene2grp <- function(genes.lst, genes){
  g2g <- Biobase::reverseSplit( genes.lst) %>% unlist
  return(g2g[genes])
}
genes.grp <- gene2grp(genes.lst, expr.dat[select.ids, "gene.name"])

.d <- model5.adj[select.ids, ]
dat <- t(apply(.d, 1, scale))
load("cache/sam.fil.RData")

# this muct be data.frame 
ann.dat <- sam.fil[, c("source", "chf_etiology", "gender.impute")] %>% as.data.frame()
colnames(dat) <- row.names(ann.dat) <- sam.fil$PID
#ck <- apply(ann.dat, 2, function(cc) my.color.keys(cc))
#bh <- HeatmapAnnotation(ann.dat, col = lapply(ck, function(lst) lst$key))

# assign color manually
ann.colors <- list(chf_etiology=c(HC="Green", ICM="Red", NICM="blue"),
                   source=c(Inova="#1B9E77", Utah="#D95F02"),
                   gender.impute=c("Female"="pink", Male="brown"))
bh <- HeatmapAnnotation(ann.dat, col = ann.colors)

pdf(file="graphs/model5.heatmap_selected_genelist1.pdf", width=7, height=10)
Heatmap(dat, show_row_names = FALSE, show_column_names = F, top_annotation=bh) + Heatmap(genes.grp, name = "Group",width = unit(5, "mm"), show_row_names = FALSE, col=get.rand.colors(4)) 
dev.off()
```


---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# load mouse gene list
```{r}
.d <- read.delim("data/20160118_Clades_Figure2.txt", header = T)
head(.d)
.lst <- as.list(.d) %>% map(~.x[.x!=""])
sapply(.lst, length)
```

# load human-mouse orthology data
```{r}
.d <- read.delim("data/human_mouse_hcop_fifteen_column.txt", header=T)
human_mouse.dat <- .d
ProjectTemplate::cache("human_mouse.dat")
```

```{r}
load("../107_RNAseq_2ndRun/cache/genes.ann.RData")
load("cache/model5.dge.RData")
head(genes.ann)

head(human_mouse.dat)
# convert the mouse ensembl id "mouse_ensembl_gene" to human gene symbol "human_symbol"
m2h.vec <- human_mouse.dat %>% filter(!duplicated(mouse_ensembl_gene)) %>% select(mouse_ensembl_gene, human_symbol) %>%  as.data.frame %>% name.df(1,drop=T)

# and further to get the RNAseq feature id
# h2f.vec <- genes.ann %>% filter(!duplicated(gene.name)) %>% select(gene.name, id) %>%  as.data.frame %>% name.df(1,drop=T)
h2f.vec <- model5.dge$genes %>% filter(!duplicated(gene.name)) %>% select(gene.name, id) %>%  as.data.frame %>% name.df(1,drop=T)
```


# Convert mouse ENSMUSG ID to human gene symbol
```{r}
# and further to get the RNAseq feature id
hu.lst <- llply(.lst, function(x){
  .rv <- m2h.vec[x]
  rv <- h2f.vec[.rv]
  return(rv[!is.na(rv)])
})
sapply(hu.lst, length)

# myo
hu.lst$Clade2_MyoSubclade  %>% grep("_MT",., v=T)

hu.lst$Clade2_MyoSubclade  %>% grep("_MY",., v=T)

# cluster 8 for fibro

# cluster 9 fro endo
# cluster 11 for leuko
hu.lst$Clade11 %>% head
ProjectTemplate::cache("hu.lst")
```
# select the first 10
```{r}
cell4.f10 <- hu.lst[c(8,9,11,12)] %>% map(~head(.x, n=10)) 
names(cell4.f10) <- c("Fibro", "Endo", "Leuko", "Myo")



```

# make the heatmap
```{r}
load("cache/model5.adj.RData")

# check myo cluster
myo.dat <-  model5.adj[cell4.f10$Myo, ] 
pdf(file="graphs/myo10_pair.pdf", width=8, height=8)
pairs(t(myo.dat))
dev.off()

.dat <- model5.adj[unlist(cell4.f10), ] 

library(ComplexHeatmap)


genes.grp <- Biobase::reverseSplit( cell4.f10) %>% unlist

dat <- t(apply(.dat, 1, scale))
load("cache/sam.fil.RData")

# this muct be data.frame 
ann.dat <- sam.fil[, c("source", "chf_etiology", "gender.impute")] %>% as.data.frame()
colnames(dat) <- row.names(ann.dat) <- sam.fil$PID
#ck <- apply(ann.dat, 2, function(cc) my.color.keys(cc))
#bh <- HeatmapAnnotation(ann.dat, col = lapply(ck, function(lst) lst$key))

# assign color manually
ann.colors <- list(chf_etiology=c(HC="Green", ICM="Red", NICM="blue"),
                   source=c(Inova="#1B9E77", Utah="#D95F02"),
                   gender.impute=c("Female"="pink", Male="brown"))
bh <- HeatmapAnnotation(ann.dat, col = ann.colors)

pdf(file="graphs/model5.heatmap_cell4.pdf", width=7, height=7)
Heatmap(dat, show_row_names = FALSE, show_column_names = F, top_annotation=bh) + Heatmap(genes.grp, name = "Group",width = unit(5, "mm"), show_row_names = FALSE, col=get.rand.colors(4)) 
dev.off()
```
# try count data matrix and make the heatmap for inova only 
```{r}
load("cache/all.cnt.RData")
.dat <- log2(all.cnt[unlist(cell4.f10), sam.fil$ID] + 1)
ind <- sam.fil$source == "Inova"
dat <- t(apply(.dat[,ind], 1, scale))
bh <- HeatmapAnnotation(ann.dat[ind,], col = ann.colors)

pdf(file="graphs/model5.heatmap_cell4.cnt.pdf", width=7, height=7)
Heatmap(dat, show_row_names = FALSE, show_column_names = F, top_annotation=bh) + Heatmap(genes.grp, name = "Group",width = unit(5, "mm"), show_row_names = FALSE, col=get.rand.colors(4)) 
dev.off()
```

# manually pick genes
```{r}
load("cache/model5.dge.RData")
myo3.genes <- c("MYH6", "MYL2", "MYL7")
myo3.ids <- h2f.vec[myo3.genes]
pairs(t(model5.adj[myo3.ids,]))
cor(t(model5.adj[myo3.ids,]))
# before the adjustment
pairs(t(model5.dge$E[myo3.ids,]))
cc <- cor(t(model5.dge$E[myo3.ids,]))
```
```{r}
library(corrr)
library(igraph)
#library(ggraph)

top1000 <- apply(model5.dge$E, 1, sd) %>% sort(decreasing = T) %>% head(n=1000) %>% names
.dat <- model5.dge$E[top1000,]
row.names(.dat) <- genes.ann[top1000, "gene.name"]

corr <- cor(t(.dat))
rr <- row.names(.dat)
corr.good <- which(corr>0.7, arr.ind=T) %>% as.data.frame %>% mutate(scr=corr[corr>0.7]) %>% filter(row<col) %>% mutate(gene1=rr[row], gene2=rr[col])  

myl.genes <-c("MYL2", "MYL7")
hb.genes <- c("HBA1", "HBA2")
corr.myo <- corr.good %>% filter(gene1 %in%  myl.genes | gene2 %in% myl.genes)

corr.hb <- corr.good %>% filter(gene1 %in%  hb.genes | gene2 %in% hb.genes)
graph_cors <- t(model5.dge$E[top1000,]) %>% corrr::correlate() %>%
  corrr::stretch() %>% filter(abs(r) > .7) %>%
  graph_from_data_frame(directed = FALSE)

plot(graph_cors, vertex.size=1, vertex.label=NA)
```

# select the top 10 by sd
```{r, fig.width=10, fig.height=10}

sd.scr <- apply(model5.dge$E[,ind], 1, sd)

cell4.top10 <- hu.lst[c(8,9,11,12)] %>% map(~ sort(sd.scr[.x], decreasing = T) %>% names() %>% unique %>% head(n=10)) 
names(cell4.top10) <- c("Fibro", "Endo", "Leuko", "Myo")

cell4.top10

pairs(t(model5.dge$E[cell4.top10$Fibro, ind]))

pairs(t(model5.dge$E[cell4.top10$Endo,ind]))

pairs(t(model5.dge$E[cell4.top10$Leuko,ind]))

pairs(t(model5.dge$E[cell4.top10$Myo,ind]))


```


# export the data to deconvolution in mac
```{r}
expr <- model5.dge$E[, ind]
expr.mean <- apply(expr, 1, mean)

# select the unique gene
.d <- model5.dge$genes %>% arrange(-expr.mean) %>% filter(!duplicated(gene.name))
expr2 <- expr[.d$id, ]
row.names(expr2) <- row.names(.d) <- .d$gene.name
inova.expr <- make.expr.set(expr2, sam.fil[ind, ])
inova.expr$ann <- .d
ProjectTemplate::cache("inova.expr")
```

---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# To test the hemoglobin differences in the raw rpkm data matrix
```{r}
load("cache/dge.flt2.RData")
load("cache/sam.fil.RData")
```

# check the rpkm data
```{r}
library(GenomicFeatures)
hg19.txdb <- AnnotationDbi::loadDb("../107_RNAseq_1stRun/cache/hg19.txdb.sqlite")

# keep the unique one (longest one)
hg19.txlen <- GenomicFeatures::transcriptLengths(hg19.txdb)
hg19.txlen.uniq <- hg19.txlen%>% arrange(-tx_len) %>% filter(!duplicated(gene_id))
table(is.na(hg19.txlen.uniq$tx_len))

gg <- dge.flt2$genes %>% left_join(hg19.txlen.uniq, by=c("gene.id"="gene_id"))
table(is.na(gg$tx_len))
# 
# FALSE  TRUE 
# 31368    97 

expr <- calcNormFactors(dge.flt2)

rpkm.flt2 <- rpkm(expr, gg$tx_len, log=T)[!is.na(gg$tx_len), ]

```

```{r}

dat <- rpkm.flt2
sam <- sam.fil
facet_by="source"
boxplot.expr <- function(dat, sam, id_var="ID", color_by="batch", facet_by=NULL, by=c("variable" = id_var)) {
  vars <- c(id_var, color_by, facet_by)
  .d <- dat %>% as.data.frame %>% melt %>% left_join(sam %>% dplyr::select(one_of(vars)), by=by)
  library(ggthemes)
  p <- ggplot(.d, aes_string(x="variable", y="value", col=color_by)) + geom_tufteboxplot()  + theme(legend.position = "bottom") +
 theme(axis.text.x=element_blank())
  if(!is.null(facet_by)){
    p <- p +  facet_grid(as.formula(sprintf("~ %s", facet_by)), scale="free_x", space="free")
  }
  plot(p)
}
```

```{r}
boxplot.expr(rpkm.flt2, sam.fil, facet_by="source")
```
```{r}
p <- last_plot()
dat <- p$data
head(dat)
#    variable       value  PID batch source
# 1 ISA506202  1.21644687 GW01    ND  Inova
# 2 ISA506202 -4.90914564 GW01    ND  Inova
# 3 ISA506202  4.72687154 GW01    ND  Inova
# 4 ISA506202  0.21720357 GW01    ND  Inova
# 5 ISA506202 -1.56935253 GW01    ND  Inova
# 6 ISA506202  0.03384569 GW01    ND  Inova

ggplot(dat, aes(value, group=variable, col=batch)) + geom_density()
```

# 
```{r}

ann <- gg %>% filter (!is.na(tx_len))
hbb.ind <- ann$gene.name == "HBB" 

.d <- sam.fil 
.d$HBB <- as.numeric(rpkm.flt2[hbb.ind, ])
.d$HBA1 <- as.numeric(rpkm.flt2[ann$gene.name == "HBA1", ])
.d$GAPDH <- as.numeric(rpkm.flt2[ann$gene.name == "GAPDH", ])
.d$B2M <- as.numeric(rpkm.flt2[ann$gene.name == "B2M", ])

library(ggpubr)
ggboxplot(.d, x="batch", y="HBB", add="jitter", col="Sample")
ggboxplot(.d, x="batch", y="HBA1", add="jitter", col="Sample")

ggboxplot(.d, x="batch", y="GAPDH", add="jitter", col="Sample")
ggboxplot(.d, x="batch", y="B2M", add="jitter", col="Sample")

```
---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# Load the data 
```{r}
load("cache/dge.flt2.RData")
load("cache/sam.fil.RData")
```



# recode the 5 inova samples sequenced by Utah
```{r}
sam.fil2 <- sam.fil %>% mutate(source = ifelse(batch == "ND", "Inova", "Utah"))

with(sam.fil2, table(source, Sample))
ProjectTemplate::cache("sam.fil2")
```

```{r}
library(tableone)

vars <- names(sam.fil2)[6:49]

# remove the controls
dat <- sam.fil2 %>% filter(Sample == "HF")

table1 <- CreateTableOne(vars = c(vars), strata = "source", data = dat, test = T)
## Show table with SMD
print(table1, smd = F)

```

# split the data into two dat set
# Generate the matched expression data
```{r}
# update sam in dge.flt2 first
## check whether it is matched with sam.fil2 or not
all(row.names(dge.flt2$samples) == sam.fil2$ID)

.s <- dge.flt2$samples %>% bind_cols(sam.fil2) %>% name.df("ID", remove=F) %>% mutate(duration=case_when(
  is.na(duration_of_hf_months) ~ "ND", 
  duration_of_hf_months == '> 2 yrs' ~ "Long",
  TRUE ~ "Short"
))
dge <- dge.flt2
dge$samples <- .s

inova.dge <- dge[, sam.fil2$source == "Inova"]
utah.dge <- dge[, sam.fil2$source != "Inova"]
ProjectTemplate::cache("inova.dge")
ProjectTemplate::cache("utah.dge")
```
---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# Load inova data
```{r}
load("cache/inova.dge.RData")
```

# The model
```{r}
sam <- inova.dge$samples

Type <- factor(sam$chf_etiology)
Gender <- factor(sam$gender.impute)
Duration <- factor(sam$duration, levels=c("Short", "ND",  "Long"))
# Age <- sam$age (missing values in normal samples)

inova.model <- model.matrix(~ Type + Gender + Duration)
inova_icm.model <- model.matrix(~ Type + Gender )
colnames(inova_icm.model) <- sub("^Type", "", colnames(inova_icm.model))

colnames(inova.model) <- sub("^Type", "", colnames(inova.model))
colnames(inova_icm.model)[1] <- "Intercept"

table(Type, Duration)
```

# Normalization
```{r}
inova_icm.voom <- voom(inova.dge, inova_icm.model, plot = TRUE)
dev.copy2pdf(file="graphs/voom_plot.inova_icm.pdf")

isExpr.inova_icm <- rowMeans(inova_icm.voom$E) > 0
table(isExpr.inova_icm) # 14204

inova_icm.expr <- inova_icm.voom[isExpr.inova_icm,]
ProjectTemplate::cache("inova_icm.expr")
```

```{r}
boxplot.expr(inova_icm.expr$E, inova_icm.expr$targets, id_var = "ID", color_by = "Sample")
```

# call DEGs
```{r}
vfit <- lmFit(inova_icm.expr)
inova_icm.contrast <- makeContrasts(
  ICM, 
  NICM,
  Dif= NICM - ICM,
  GenderMale,
  levels=inova_icm.model)


vfit <- contrasts.fit(vfit, contrasts=inova_icm.contrast)
efit <- eBayes(vfit)
plotSA(efit, main="Final model: Mean−variance trend")
```

# save the results
```{r}
inova_icm.efit <- efit
ProjectTemplate::cache("inova_icm.efit")
```
# Check degs
```{r}
call.degs <- function(efit, coef){
  rv <- topTable(efit, coef=coef, sort.by="P", lfc=0, p.value = 1, number=Inf) %>% mutate(DEG = abs(logFC) > 1 & adj.P.Val < 0.05)
  print(table(rv$DEG))
  return(rv)
}
icm.dif  <- call.degs(inova_icm.efit, "ICM") #787
gender.dif <- call.degs(inova_icm.efit, "GenderMale") # 11
nicm.dif  <- call.degs(inova_icm.efit, "NICM") # 666
type.dif  <- call.degs(inova_icm.efit, "Dif") # 0

inova_icm.degs <- list(icm=icm.dif, nicm=nicm.dif, type=type.dif, gender=gender.dif)
ProjectTemplate::cache("inova_icm.degs")
```
```{r}
# QC with gender
gender.deg <- gender.dif %>% filter(DEG)

gender.pca <- get.pca.dat(t(inova_icm.expr$E[gender.deg$id, ]), as.data.frame(sam))
p <- ggplot(gender.pca$dat, aes(PC1, PC2, col=gender.impute)) + geom_point(aes(pch=Sample), size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Gender") + scale_color_brewer(palette = "Set1")

plot(p)
ggsave("graphs/inova_icm.gender.pca.pdf", width=6, height=5)

```

```{r}
head(type.dif)

type_top200 <- type.dif[1:200, "id"]
no_donor <- sam$Sample != "DONOR"

type.pca <- get.pca.dat(t(inova_icm.expr$E[type_top200, no_donor]), as.data.frame(sam[no_donor,]))

p <- ggplot(type.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Top 200") + scale_color_brewer(palette = "Set1") + stat_ellipse(lty=2)

plot(p)
ggsave("graphs/inova_icm.type_top200.pca.pdf", width=6, height=5)

type_top50 <- type.dif[1:50, "id"]
no_donor <- sam$Sample != "DONOR"

type.pca <- get.pca.dat(t(inova_icm.expr$E[type_top50, no_donor]), as.data.frame(sam[no_donor,]))

p <- ggplot(type.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Top 50") + scale_color_brewer(palette = "Set1") + stat_ellipse(lty=2)

plot(p)
ggsave("graphs/inova_icm.type_top50.pca.pdf", width=6, height=5)

type_top10 <- type.dif[1:10, "id"]
no_donor <- sam$Sample != "DONOR"

type.pca <- get.pca.dat(t(inova_icm.expr$E[type_top10, no_donor]), as.data.frame(sam[no_donor,]))

p <- ggplot(type.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Top 10") + scale_color_brewer(palette = "Set1") + stat_ellipse(lty=2)

plot(p)
ggsave("graphs/inova_icm.type_top10.pca.pdf", width=6, height=5)
```

---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# Load utah data
```{r}
load("cache/utah.dge.RData")
```

# The model
```{r}
sam <- utah.dge$samples

Type <- factor(sam$chf_etiology)
Gender <- factor(sam$gender.impute)
Duration <- factor(sam$duration, levels=c("Short", "ND",  "Long"))
HB <- sam$hb.sig
# Age <- sam$age (missing values in normal samples)

utah.model <- model.matrix(~ Type + Gender + Duration)
utah_icm.model <- model.matrix(~ Type + Gender + HB)
colnames(utah_icm.model) <- sub("^Type", "", colnames(utah_icm.model))

colnames(utah.model) <- sub("^Type", "", colnames(utah.model))
colnames(utah_icm.model)[1] <- "Intercept"

table(Type, Duration)
```

# Normalization
```{r}
utah_icm.voom <- voom(utah.dge, utah_icm.model, plot = TRUE)
dev.copy2pdf(file="graphs/voom_plot.utah_icm.pdf")

isExpr.utah_icm <- rowMeans(utah_icm.voom$E) > 0
table(isExpr.utah_icm) # 14204

utah_icm.expr <- utah_icm.voom[isExpr.utah_icm,]
ProjectTemplate::cache("utah_icm.expr")
```

```{r}
boxplot.expr(utah_icm.expr$E, utah_icm.expr$targets, id_var = "ID", color_by = "Sample")
```

# call DEGs
```{r}
vfit <- lmFit(utah_icm.expr)
utah_icm.contrast <- makeContrasts(
  ICM, 
  NICM,
  Dif= NICM - ICM,
  GenderMale,
  HB,
  levels=utah_icm.model)


vfit <- contrasts.fit(vfit, contrasts=utah_icm.contrast)
efit <- eBayes(vfit)
plotSA(efit, main="Final model: Mean−variance trend")
```

# save the results
```{r}
utah_icm.efit <- efit
ProjectTemplate::cache("utah_icm.efit")
```
# Check degs
```{r}
call.degs <- function(efit, coef){
  rv <- topTable(efit, coef=coef, sort.by="P", lfc=0, p.value = 1, number=Inf) %>% mutate(DEG = abs(logFC) > 1 & adj.P.Val < 0.05)
  print(table(rv$DEG))
  return(rv)
}
icm.dif  <- call.degs(utah_icm.efit, "ICM") #787
gender.dif <- call.degs(utah_icm.efit, "GenderMale") # 11
nicm.dif  <- call.degs(utah_icm.efit, "NICM") # 666
type.dif  <- call.degs(utah_icm.efit, "Dif") # 0
hb.dif  <- call.degs(utah_icm.efit, "HB") # 0

utah_icm.degs <- list(icm=icm.dif, nicm=nicm.dif, type=type.dif, gender=gender.dif, hb=hb.dif)
sapply(utah_icm.degs, function(x) sum(x$DEG))
ProjectTemplate::cache("utah_icm.degs")
```
```{r}
# QC with gender
gender.deg <- gender.dif %>% filter(DEG)

gender.pca <- get.pca.dat(t(utah_icm.expr$E[gender.deg$id, ]), as.data.frame(sam))
p <- ggplot(gender.pca$dat, aes(PC1, PC2, col=gender.impute)) + geom_point(aes(pch=Sample), size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Gender") + scale_color_brewer(palette = "Set1")

plot(p)
ggsave("graphs/utah_icm.gender.pca.pdf", width=6, height=5)

```

```{r}
head(type.dif)

type_top200 <- type.dif[1:200, "id"]
no_donor <- sam$Sample != "DONOR"

type.pca <- get.pca.dat(t(utah_icm.expr$E[type_top200, no_donor]), as.data.frame(sam[no_donor,]))

p <- ggplot(type.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Top 200") + scale_color_brewer(palette = "Set1") + stat_ellipse(lty=2)

plot(p)
ggsave("graphs/utah_icm.type_top200.pca.pdf", width=6, height=5)

type_top50 <- type.dif[1:50, "id"]
no_donor <- sam$Sample != "DONOR"

type.pca <- get.pca.dat(t(utah_icm.expr$E[type_top50, no_donor]), as.data.frame(sam[no_donor,]))

p <- ggplot(type.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Top 50") + scale_color_brewer(palette = "Set1") + stat_ellipse(lty=2)

plot(p)
ggsave("graphs/utah_icm.type_top50.pca.pdf", width=6, height=5)

type_top10 <- type.dif[1:10, "id"]
no_donor <- sam$Sample != "DONOR"

type.pca <- get.pca.dat(t(utah_icm.expr$E[type_top10, no_donor]), as.data.frame(sam[no_donor,]))

p <- ggplot(type.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Top 10") + scale_color_brewer(palette = "Set1") + stat_ellipse(lty=2)

plot(p)
ggsave("graphs/utah_icm.type_top10.pca.pdf", width=6, height=5)
```
# check HB
```{r}
head(hb.dif)
View(hb.dif[1:200,])

# HB is a continuous variable and so I should drop logFC > 1 to define DEGs
table(hb.dif$adj.P.Val < 0.05)
# FALSE  TRUE 
#   810 14236 

table(hb.dif$logFC>0)
# FALSE  TRUE 
#   216 14830 

hb.dif %>% filter(logFC<0) %>% arrange(logFC) %>% .$gene.name
```

---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# Load inova data
```{r}
load("cache/inova.dge.RData")

ss <- inova.dge$samples$Sample != "DONOR"
inova_dur.dge <- inova.dge[, ss] 
```

# The model
```{r}
sam <- inova_dur.dge$samples

Type <- factor(sam$chf_etiology)
Gender <- factor(sam$gender.impute)
Duration <- factor(sam$duration, levels=c("Short",  "Long"))
# Age <- sam$age (missing values in normal samples)

inova_dur.model <- model.matrix(~ Type + Gender + Duration)

colnames(inova_dur.model) <- sub("^Type", "", colnames(inova_dur.model))
colnames(inova_dur.model)[1] <- "Intercept"

table(Type, Duration)
```

# Normalization
```{r}
inova_dur.voom <- voom(inova_dur.dge, inova_dur.model, plot = TRUE)
dev.copy2pdf(file="graphs/voom_plot.inova_dur.pdf")

isExpr.inova_dur <- rowMeans(inova_dur.voom$E) > 0
table(isExpr.inova_dur) # 14204

inova_dur.expr <- inova_dur.voom[isExpr.inova_dur,]
ProjectTemplate::cache("inova_dur.expr")
```

```{r}
boxplot.expr(inova_dur.expr$E, inova_dur.expr$targets, id_var = "ID", color_by = "chf_etiology")
```

# call DEGs
```{r}
vfit <- lmFit(inova_dur.expr)
inova_dur.contrast <- makeContrasts(
  NICM,
  GenderMale,
  DurationLong,
  levels=inova_dur.model)


vfit <- contrasts.fit(vfit, contrasts=inova_dur.contrast)
efit <- eBayes(vfit)
plotSA(efit, main="Final model: Mean−variance trend")
```

# save the results
```{r}
inova_dur.efit <- efit
ProjectTemplate::cache("inova_dur.efit")
```
# Check degs
```{r}
call.degs <- function(efit, coef){
  rv <- topTable(efit, coef=coef, sort.by="P", lfc=0, p.value = 1, number=Inf) %>% mutate(DEG = abs(logFC) > 1 & adj.P.Val < 0.05)
  print(table(rv$DEG))
  return(rv)
}
type.dif  <- call.degs(inova_dur.efit, "NICM") #787
gender.dif <- call.degs(inova_dur.efit, "GenderMale") # 11
dur.dif  <- call.degs(inova_dur.efit, "DurationLong") # 666


inova_dur.degs <- list(type=type.dif, gender=gender.dif, dur=dur.dif)
sapply(inova_dur.degs, function(x) sum(x$DEG))
ProjectTemplate::cache("inova_dur.degs")
```
```{r}
# QC with gender
gender.deg <- gender.dif %>% filter(DEG)

gender.pca <- get.pca.dat(t(inova_dur.expr$E[gender.deg$id, ]), as.data.frame(sam))
p <- ggplot(gender.pca$dat, aes(PC1, PC2, col=gender.impute)) + geom_point(aes(pch=Sample), size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Gender") + scale_color_brewer(palette = "Set1")

plot(p)
ggsave("graphs/inova_dur.gender.pca.pdf", width=6, height=5)

```

```{r}
head(type.dif)

type_top200 <- type.dif[1:200, "id"]
no_donor <- sam$Sample != "DONOR"

type.pca <- get.pca.dat(t(inova_dur.expr$E[type_top200, no_donor]), as.data.frame(sam[no_donor,]))

p <- ggplot(type.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Top 200") + scale_color_brewer(palette = "Set1") + stat_ellipse(lty=2)

plot(p)
ggsave("graphs/inova_dur.type_top200.pca.pdf", width=6, height=5)

type_top50 <- type.dif[1:50, "id"]
no_donor <- sam$Sample != "DONOR"

type.pca <- get.pca.dat(t(inova_dur.expr$E[type_top50, no_donor]), as.data.frame(sam[no_donor,]))

p <- ggplot(type.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Top 50") + scale_color_brewer(palette = "Set1") + stat_ellipse(lty=2)

plot(p)
ggsave("graphs/inova_dur.type_top50.pca.pdf", width=6, height=5)

type_top10 <- type.dif[1:10, "id"]
no_donor <- sam$Sample != "DONOR"

type.pca <- get.pca.dat(t(inova_dur.expr$E[type_top10, no_donor]), as.data.frame(sam[no_donor,]))

p <- ggplot(type.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Top 10") + scale_color_brewer(palette = "Set1") + stat_ellipse(lty=2)

plot(p)
ggsave("graphs/inova_dur.type_top10.pca.pdf", width=6, height=5)
```

# check dur
```{r}
View(dur.dif[1:200,])
```

---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# Load utah data
```{r}
load("cache/utah.dge.RData")

ss <- utah.dge$samples$Sample != "DONOR" & utah.dge$samples$duration != 'ND'
utah_dur.dge <- utah.dge[, ss] 
```

# The model
```{r}
sam <- utah_dur.dge$samples

Type <- factor(sam$chf_etiology)
Gender <- factor(sam$gender.impute)
Duration <- factor(sam$duration, levels=c("Short",  "Long"))
HB <- sam$hb.sig
# Age <- sam$age (missing values in normal samples)

utah_dur.model <- model.matrix(~ Type + Gender + Duration + HB)

colnames(utah_dur.model) <- sub("^Type", "", colnames(utah_dur.model))
colnames(utah_dur.model)[1] <- "Intercept"

table(Type, Duration)
```

# Normalization
```{r}
utah_dur.voom <- voom(utah_dur.dge, utah_dur.model, plot = TRUE)
dev.copy2pdf(file="graphs/voom_plot.utah_dur.pdf")

isExpr.utah_dur <- rowMeans(utah_dur.voom$E) > 0
table(isExpr.utah_dur) # 14204

utah_dur.expr <- utah_dur.voom[isExpr.utah_dur,]
ProjectTemplate::cache("utah_dur.expr")
```

```{r}
boxplot.expr(utah_dur.expr$E, utah_dur.expr$targets, id_var = "ID", color_by = "chf_etiology")
```

# call DEGs
```{r}
vfit <- lmFit(utah_dur.expr)
utah_dur.contrast <- makeContrasts(
  NICM,
  GenderMale,
  DurationLong,
  levels=utah_dur.model)


vfit <- contrasts.fit(vfit, contrasts=utah_dur.contrast)
efit <- eBayes(vfit)
plotSA(efit, main="Final model: Mean−variance trend")
```

# save the results
```{r}
utah_dur.efit <- efit
ProjectTemplate::cache("utah_dur.efit")
```
# Check degs
```{r}
call.degs <- function(efit, coef){
  rv <- topTable(efit, coef=coef, sort.by="P", lfc=0, p.value = 1, number=Inf) %>% mutate(DEG = abs(logFC) > 1 & adj.P.Val < 0.05)
  print(table(rv$DEG))
  return(rv)
}
type.dif  <- call.degs(utah_dur.efit, "NICM") #787
gender.dif <- call.degs(utah_dur.efit, "GenderMale") # 11
dur.dif  <- call.degs(utah_dur.efit, "DurationLong") # 666


utah_dur.degs <- list(type=type.dif, gender=gender.dif, dur=dur.dif)
sapply(utah_dur.degs, function(x) sum(x$DEG))
ProjectTemplate::cache("utah_dur.degs")
```
```{r}
# QC with gender
gender.deg <- gender.dif %>% filter(DEG)

gender.pca <- get.pca.dat(t(utah_dur.expr$E[gender.deg$id, ]), as.data.frame(sam))
p <- ggplot(gender.pca$dat, aes(PC1, PC2, col=gender.impute)) + geom_point(aes(pch=Sample), size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Gender") + scale_color_brewer(palette = "Set1")

plot(p)
ggsave("graphs/utah_dur.gender.pca.pdf", width=6, height=5)

```

```{r}
head(type.dif)

type_top200 <- type.dif[1:200, "id"]
no_donor <- sam$Sample != "DONOR"

type.pca <- get.pca.dat(t(utah_dur.expr$E[type_top200, no_donor]), as.data.frame(sam[no_donor,]))

p <- ggplot(type.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Top 200") + scale_color_brewer(palette = "Set1") + stat_ellipse(lty=2)

plot(p)
ggsave("graphs/utah_dur.type_top200.pca.pdf", width=6, height=5)

type_top50 <- type.dif[1:50, "id"]
no_donor <- sam$Sample != "DONOR"

type.pca <- get.pca.dat(t(utah_dur.expr$E[type_top50, no_donor]), as.data.frame(sam[no_donor,]))

p <- ggplot(type.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Top 50") + scale_color_brewer(palette = "Set1") + stat_ellipse(lty=2)

plot(p)
ggsave("graphs/utah_dur.type_top50.pca.pdf", width=6, height=5)

type_top10 <- type.dif[1:10, "id"]
no_donor <- sam$Sample != "DONOR"

type.pca <- get.pca.dat(t(utah_dur.expr$E[type_top10, no_donor]), as.data.frame(sam[no_donor,]))

p <- ggplot(type.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Top 10") + scale_color_brewer(palette = "Set1") + stat_ellipse(lty=2)

plot(p)
ggsave("graphs/utah_dur.type_top10.pca.pdf", width=6, height=5)
```

# check dur
```{r}
View(dur.dif[1:200,])

```

---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# Laod DEGs
```{r}
load("cache/inova_icm.degs.RData")
load("cache/inova_dur.degs.RData")

load("cache/utah_icm.degs.RData")
load("cache/utah_dur.degs.RData")
```

# ICM
```{r}
compare.degs <- function(lst1, lst2, id="icm"){
  dat1 <- lst1[[id]] %>% name.df("id", remove=F)
  dat2 <- lst2[[id]] %>% name.df("id", remove=F)
  
  comm <- intersect(dat1$id, dat2$id)
  x=dat1[comm, "logFC"]
  y=dat2[comm, "logFC"]
  out <- cor.test(x,y)
  cat(id,"\n")
  print(out)
  plot(dat1[comm, "logFC"], dat2[comm, "logFC"])
  abline(a=0, b=1,lty=2)
}

compare.degs(inova_icm.degs, utah_icm.degs)
compare.degs(inova_icm.degs, utah_icm.degs, id="nicm")

compare.degs(inova_icm.degs, utah_icm.degs, id="gender")

compare.degs(inova_icm.degs, utah_icm.degs, id="type")
```
# check dur models
```{r}
# compare.degs(inova_dur.degs, utah_dur.degs)
compare.degs(inova_dur.degs, utah_dur.degs, id="dur")

compare.degs(inova_dur.degs, utah_dur.degs, id="gender")

compare.degs(inova_dur.degs, utah_dur.degs, id="type")
```
# check the pca control icm
## load the essential data
```{r}
load("cache/inova_icm.expr.RData")
load("cache/utah_icm.expr.RData")
sam <- inova_icm.expr$targets
```

```{r}
icm.deg <- inova_icm.degs$icm %>% filter(DEG)

icm.pca <- get.pca.dat(t(inova_icm.expr$E[icm.deg$id, ]), as.data.frame(sam))
p <- ggplot(icm.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(aes(pch=Sample), size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Type") + scale_color_brewer(palette = "Set1")

plot(p)
ggsave("graphs/inova_icm.control_vs_icm.pca.pdf", width=6, height=5)

# use the same genes on the utah data
# 673 out of 787
comm <- intersect(row.names(utah_icm.expr$E), icm.deg$id)

utah_icm.pca <- get.pca.dat(t(utah_icm.expr$E[comm, ]), as.data.frame(utah_icm.expr$targets))
p <- ggplot(utah_icm.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(aes(pch=Sample), size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Type") + scale_color_brewer(palette = "Set1")

plot(p)
ggsave("graphs/inova_icm.control_vs_icm_checkUtah1.pca.pdf", width=6, height=5)

# use the overlap between utah and inova
utah.deg <- utah_icm.degs$icm %>% filter(DEG)
comm2 <- intersect(utah.deg$id, icm.deg$id) #62

utah_icm.pca <- get.pca.dat(t(utah_icm.expr$E[comm2, ]), as.data.frame(utah_icm.expr$targets))
p <- ggplot(utah_icm.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point(aes(pch=Sample), size=2, alpha=0.7, stroke=1) + scale_shape_manual(values = c(21,22)) + labs(title="Type") + scale_color_brewer(palette = "Set1")

plot(p)
ggsave("graphs/inova_icm.control_vs_icm_checkUtah2.pca.pdf", width=6, height=5)

```

---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# Load the tables from the publications
  1. S11: DEGs mRNA for ICM
  2. S12: DEGs mRNA for NICM
  3. S14: lncRNAs for ICM
  4. S15: lncRNAs for NICM
```{r}
library(openxlsx)

s11 <- read.xlsx(xlsxFile = "data/Table S6 S11 S12_Yang et al Circulation.xlsx", sheet=2, startRow = 2)
s12 <- read.xlsx(xlsxFile = "data/Table S6 S11 S12_Yang et al Circulation.xlsx", sheet=3, startRow = 2)

s14 <- read.xlsx(xlsxFile = "data/Table S5 S14 S15_Yang et al Circulation.xlsx", sheet=2, startRow = 2)
s15 <- read.xlsx(xlsxFile = "data/Table S5 S14 S15_Yang et al Circulation.xlsx", sheet=3, startRow = 2)
```
# load NONCODE db dat

    NONHSAT017669.2 noncodeV3       Human
    NONHSAT017669.2 refseq  NR_121648
    NONHSAT017669.2 gencode ENST00000564523.1
    NONHSAT017669.2 lncipedia       lnc-HBG1-1-1_dup1
    NONHSAT017669.2 NONCODEv4       NONHSAT017669
    NONHSAT017669.2 ensembl ENST00000564523
    NONHSAT017669.2 noncodeV3       n340951
    NONHSAT017669.2 NAME    CTD-2643I7.1
    NONHSAT017669.2 PMID26117828    TCONS_00006993

```{r}
noncode <- read.delim("~/dn/NONCODEv5_source", header=F)
names(noncode) <- c("ID", "source", "value")

# ignore those rows with multiple hits and keep the latest one
#                   ID  source   value
# 3948 NONCELT004426.2 ensembl C05G6.4
# 3949 NONCELT004426.2 ensembl C05G6.5

# select human v3 only 
ids <- noncode %>% filter(source == "noncodeV3" & value=="Human") %>% .$ID

# remove human as it has the same key with the "n340951"
.d <- noncode %>% filter(ID %in% ids & value != "Human") %>% group_by(ID) %>% filter(!duplicated(source, fromLast = T)) %>% ungroup() %>% spread(source, value) %>% select(ID, ensembl, gencode, lncipedia, lncrnadb, NAME, noncodeV3) %>% as.data.frame %>% name.df("noncodeV3", remove=F)

noncode_human.v3 <- .d
ProjectTemplate::cache("noncode_human.v3")
```


# Map the lncRNA to gencode
```{r}
# 679
lnc.ids <- s14 %>% janitor::clean_names() %>% arrange(p_value_nf_vs_icm) %>% .$transcript
comm <- intersect(noncode_human.v3$noncodeV3, lnc.ids)

setdiff(lnc.ids, noncode_human.v3$noncodeV3)

length(comm) #168

length(lnc.ids) #679

noncode_human.v3[comm,]

gene.ids <- noncode_human.v3[comm, "NAME"] %>% .[!is.na(.)]
gene.ids #25

tx.ids <- noncode_human.v3[comm, "ensembl"] %>% .[!is.na(.)]
tx.ids #29
```
# map via transcript id
```{r}
# hg19.tx <- read.GTF("/bigdata0/local/data/hg19/gencode.v26lift37.annotation.gtf", feat.selected=c("transcript"), attributes=c("gene_id", "transcript_id", "gene_type", "gene_name", "transcript_type", "transcript_name", "havana_gene", "havana_transcript"), attrs.sep=" |; ")
load("~/prj/heart_failure/107_RNAseq_1stRun/cache/hg19.tx.RData")

head(hg19.tx)

# to match with the ensembl id in noncode_human.v3 like ENST00000484859
tx2gene <- hg19.tx %>% tidyr::extract(transcript_id, into="ensembl", regex="^(ENST\\d+)", remove=F) %>% filter(!duplicated(ensembl))
```

# check with inova icm data
```{r}
load("cache/inova_icm.degs.RData")

inova_lnc.matches <- inova_icm.degs$icm %>% filter(gene.name %in% gene.ids)
```

# check s11
```{r}
yang.genes <- s11$Gene.Symbol
inova.genes <- inova_icm.degs$icm %>% filter(DEG) %>% .$gene.name
comm <- compare(yang.genes, inova.genes)

utah.genes <- utah_icm.degs$icm %>% filter(DEG) %>% .$gene.name
comm2 <- compare(yang.genes, utah.genes)

```
# DEGs with mito
```{r}
comm <- compare(inova.genes, utah.genes) 

.d <- inova_icm.degs$icm %>% filter(DEG) 
inova_icm.degs$icm %>% filter(ref == "chrM")
inova_icm.degs$nicm %>% filter(ref == "chrM")

utah_icm.degs$icm %>% filter(ref == "chrM")
utah_icm.degs$nicm %>% filter(ref == "chrM")
hbb <- as.numeric(utah_icm.expr$E[utah_icm.expr$genes$gene.name == "HBB",])
mito <- as.numeric(utah_icm.expr$E["ENSG00000198763.3_MT-ND2",])
plot(hbb, utah_icm.expr$targets$hb.sig)

plot(hbb, mito)
```

---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# Load data
```{r}
load("cache/dge.flt2.RData")
load("cache/sam.fil.RData")
load("cache/all.sam.RData")
```

# check previous filtering
```{r}
load("cache/all.sam.RData")

length(unique(all.sam$PID)) #195
# Sort by PID, source and then Sample
# recode TX to HF then
.sam.fil <- all.sam %>%  group_by(PID) %>% arrange(source, Sample) %>% filter(row_number() == 1)  %>% filter(batch != "13875")


.type <- .sam.fil %>% ungroup %>% rename(SampleType=Sample) %>% select(ID, SampleType)
```


# drop 5 inova samples sequenced by Utah
```{r}
table(sam.fil$batch, sam.fil$source)

# drop those columns
sam.final <- sam.fil %>% filter(batch != "13875") %>% select(ID:gender.impute) %>% left_join(.type)
dim(sam.final)

with(sam.final, table(source, SampleType))

row.names(sam.final) <- sam.final$ID 
ProjectTemplate::cache("sam.final")

write.xlsx(file="reports/sam.master.xlsx", sam.final)

table(sam.final$vad_type, sam.final$source, useNA="ifany")
```


# review the sample counts
```{r}
table(all.sam$source)
table(sam.final$source)

with(sam.final, table(source, Sample))
```

# show the table
```{r}
library(tableone)

vars <- names(sam.final)[6:49]

# remove the controls
dat <- sam.final %>% filter(Sample == "HF")

table1 <- CreateTableOne(vars = c(vars), strata = "source", data = dat, test = T)
## Show table with SMD
print(table1, smd = F)

tab1Mat <- print(table1, smd=F, quote = FALSE, noSpaces = TRUE, printToggle = FALSE)
## Save to a CSV file
write.csv(tab1Mat, file = "reports/tab1.csv")
ProjectTemplate::cache("table1")
```

# try to show html table here
```{r, echo=F, eval=require('DT'), tidy=FALSE}
# knitr::kable(tab1Mat, format = 'html')
# div(DT::dataTableOutput("table"), style = "font-size: 75%; width: 75%")
DT::datatable(
  tab1Mat,
  fillContainer = FALSE, options = list(pageLength = 10), style="default")
```
# Prepare dge.final matching with sam.final
```{r}
load("~/prj/general/hg19.ann.RData")
dge.final <- dge.flt2[, row.names(sam.final)]

# update the gene annotation
gg <- hg19.ann[dge.final$genes$id,] %>% select(-gene_name) %>% rename(Length=tx_len)
dge.final$genes <- gg

ProjectTemplate::cache("dge.final")


y <- calcNormFactors(dge.final)
RPKM <- log2(rpkm(y) + 0.1)
ProjectTemplate::cache("RPKM")
# calculate HB

```


# HB genes
```{r, fig.width=8, fig.height=8}

source('/itmi/home/zhuwe/prj/heart_failure/107_RNAseq_4thRun/lib/gene_signatures.R')
hb.gene <- get_hb_genes()


hb.sig <- get_signature(RPKM, hb.gene)
.d <- cbind(t(RPKM[hb.gene,]), hb.sig, source=sam.final$source) %>% as.data.frame %>% str2num()
names(.d) <- c("HBA2", "HBG2", "HBA1", "HBG1", "HBB", "HB.Sig", "Source")
library(GGally)

# pairs(.d, col=ifelse(sam.final$source == "Inova", "blue", "red"))
ggpairs(.d, columns=1:6, aes(color=Source), alpha=0.7)

ggscatmat(.d, columns=1:6, aes(color=Source), alpha=0.7)
```
# select features
```{r}

hist(rowMeans(RPKM), n=100)
isExpr <- rowMeans(RPKM) > 0 
sum(isExpr, na.rm=T)

ind <- !is.na(isExpr) & isExpr  
.ids <- dge.final$genes[ind, ] %>% filter(!is.na(gene.name)) %>% filter(!duplicated(gene.name)) %>% .$id

length(.ids) #[1] 12428

# update both counts matrix and genes 
.c <- dge.final$counts[.ids,]
.g <- dge.final$genes[.ids,]

row.names(.c) <- row.names(.g) <- .g$gene.name
sam.final$HG <- hb.sig

all(row.names(sam.final) == names(.c))

# update
dge.expr <- dge.final[.ids,]
.s <- dge.expr$samples
dge.expr$counts <- .c
dge.expr$genes <- .g
dge.expr$samples <- .s %>% bind_cols(sam.final)
# .e <- calcNormFactors(dge.expr)

ProjectTemplate::cache("dge.expr")
```

# create inova_n20.dge and utah_n20.dge
```{r}
inova.ids <- sam.final %>% filter(source == "Inova") %>% .$ID
utah.ids <- sam.final %>% filter(source == "Utah") %>% .$ID

inova_n20.dge <- dge.expr[, inova.ids]
utah_n20.dge <- dge.expr[, utah.ids]
ProjectTemplate::cache("inova_n20.dge")
ProjectTemplate::cache("utah_n20.dge")
```
# Call DEGs 
## Inova subset
```{r}

callDEG_n20 <- function(.dge) {
  .sam <- .dge$samples
  
  ## Perform TMM normalisation
  .dge <- calcNormFactors(.dge)
  
  # Start of common procedure
  Type <- factor(.sam$chf_etiology)
  Gender <- factor(.sam$gender.impute)
  HG <- .sam$HG
  
  .design <- model.matrix(~ Type + Gender + HG)
  
  colnames(.design) <- sub("^Type", "", colnames(.design))
  colnames(.design)[1] <- "Intercept"
  
  .v <- voom(.dge, .design, plot = TRUE)
  
  # skip to remove .isExpr 
  .isExpr <- rowMeans(.v$E) > 0
  sum(!.isExpr)
  
  .vfit <- lmFit(.v)
  
  contrast.matrix <- makeContrasts(
    ICM,
    NICM,
    ICM_NICM = NICM - ICM,
    HF = (NICM + ICM)/2,
    HG,
    GenderMale,
    levels=.design)
  
  .vfit2 <- contrasts.fit(.vfit, contrast.matrix)
  .vfit2 <- eBayes(.vfit2)
  return(list(v=.v, fit=.vfit2))
}

callDEG_n20_noHG <- function(.dge) {
  .sam <- .dge$samples
  
  # Start of common procedure
  Type <- factor(.sam$chf_etiology)
  Gender <- factor(.sam$gender.impute)
 
  
  .design <- model.matrix(~ Type + Gender )
  
  colnames(.design) <- sub("^Type", "", colnames(.design))
  colnames(.design)[1] <- "Intercept"
  
  .v <- voom(.dge, .design, plot = TRUE)
  
  # skip to remove .isExpr 
  .isExpr <- rowMeans(.v$E) > 0
  sum(!.isExpr)
  
  .vfit <- lmFit(.v)
  
  contrast.matrix <- makeContrasts(
    ICM,
    NICM,
    ICM_NICM = NICM - ICM,
    GenderMale,
    levels=.design)
  
  .vfit2 <- contrasts.fit(.vfit, contrast.matrix)
  .vfit2 <- eBayes(.vfit2)
  return(.vfit2)
}
inova_n20.fit <- callDEG_n20(inova_n20.dge)
utah_n20.fit <- callDEG_n20(utah_n20.dge)

# inova_n20_noHG.fit <- callDEG_n20_noHG(inova_n20.dge)

ProjectTemplate::cache("inova_n20.fit")
ProjectTemplate::cache("utah_n20.fit")
```

## list DEGs
```{r}

.def_degs <- function(.fit, coefs=c("HF", "ICM", "NICM", "ICM_NICM"), p.value = 0.05, lfc=1){
  degs <- llply(coefs, function(x){
    topTable(.fit, coef=x, sort.by="P", lfc=0, p.value = 1, number=Inf, adjust.method = "fdr") %>% mutate(DEG = adj.P.Val < p.value & abs(logFC)>lfc ) %>% filter(DEG) %>% arrange(-logFC) 
  })
  names(degs) <- coefs
  return(degs)
}

inova.degs <- .def_degs(inova_n20.fit$fit)
sapply(inova.degs, nrow)

utah.degs <- .def_degs(utah_n20.fit$fit)
sapply(utah.degs, nrow)

# inova.IvsNI <- .def_degs(coefs="ICM_NICM", p.value=1, lfc=0, inova_n20.fit)
comm <- compare(inova.degs$HF$gene.name, utah.degs$HF$gene.name)
HF.comm <- comm$comm

# End of common procedure
ProjectTemplate::cache("inova.degs")
ProjectTemplate::cache("utah.degs")
ProjectTemplate::cache("HF.comm")
```
# coding vs noncoding
```{r}
table(inova.degs$HF$gene_type)
table(inova.degs$HF$gene_type == "protein_coding")
table(utah.degs$HF$gene_type == "protein_coding")
table(inova_n20.dge$genes[comm$comm, "gene_type"] == "protein_coding")

.d1 <- inova.degs$HF %>% filter(gene.name %in% comm$comm) %>% select(gene.name, logFC, gene_type) %>% rename(Inova=logFC) %>% mutate(GeneType = ifelse(gene_type == "protein_coding", "protein_coding", "non-coding"))
.d2 <- utah.degs$HF %>% filter(gene.name %in% comm$comm) %>% select(gene.name, logFC) %>% rename(Utah=logFC)
.d <- .d1 %>% inner_join(.d2)
library(ggpubr)
ggscatter(.d, x="Inova", y="Utah", col="GeneType", palette = "jco", alpha=0.7) + stat_cor() + geom_abline(lty=2)
```

# Compare with the publication

```{r}
print(HF.comm)
```
# Load the data from the paper
```{r}
library(openxlsx)

# genes ICM
s11 <- read.xlsx(xlsxFile = "data/Table S6 S11 S12_Yang et al Circulation.xlsx", sheet=2, startRow = 2) %>% janitor::clean_names()
# genes NICM
s12 <- read.xlsx(xlsxFile = "data/Table S6 S11 S12_Yang et al Circulation.xlsx", sheet=3, startRow = 2) %>% janitor::clean_names()

# lnc
s14 <- read.xlsx(xlsxFile = "data/Table S5 S14 S15_Yang et al Circulation.xlsx", sheet=2, startRow = 2) %>% janitor::clean_names()
s15 <- read.xlsx(xlsxFile = "data/Table S5 S14 S15_Yang et al Circulation.xlsx", sheet=3, startRow = 2) %>% janitor::clean_names()

# s11.flt
s11.flt <- s11 %>% filter( p_value_nf_vs_icm < 0.05 & abs(log2(fold_change_vs_nf_2)) > 1)
s12.flt <- s12 %>% filter( p_value_nf_vs_nicm < 0.05 & abs(log2(fold_change_vs_nf_2)) > 1)

cp1 <- compare(s11.flt$gene_symbol, HF.comm)

cp2 <- compare(s12.flt$transcript, HF.comm)

cp1_2 <- compare(cp1$comm, cp2$comm)


```
# venn
```{r, fig.width=6, fig.height=6}
library(VennDiagram)

venn.plot <- venn.diagram(
   x = list(
       Inova_ICM = inova.degs$ICM$gene.name,
       Inova_NICM = inova.degs$NICM$gene.name,
       Utah_ICM = utah.degs$ICM$gene.name,
       Utah_NICM = utah.degs$NICM$gene.name
       ),
filename = NULL,
col = "black",
lty = "dotted",
#imagetype = "png",
lwd = 2,
fill = c("cornflowerblue", "green", "yellow", "darkorchid1"),
alpha = 0.50,
label.col = c("orange", "white", "darkorchid4", "white", "white", "white",
 "white", "white", "darkblue", "white",
  "white", "white", "white", "darkgreen", "white"),
cex = 2,
fontfamily = "serif",
fontface = "bold",
cat.col = c("darkblue", "darkgreen", "orange", "darkorchid4"),
cat.cex = 1,
cat.fontfamily = "serif"
);

# have a look at the default plot
op <- par(mar=c(6,6,6,6))
grid.newpage()
grid.draw(venn.plot )
par(op)
```
## ICM
```{r, fig.width=6, fig.height=6}

venn.plot <- venn.diagram(
   x = list(
       Inova_ICM = inova.degs$ICM$gene.name,
       Utah_ICM = utah.degs$ICM$gene.name,
       Yang = s11.flt$gene_symbol
       ),
filename = NULL,
col = "transparent",
#lty = "dotted",
#imagetype = "png",
#lwd = 2,
fill = c("cornflowerblue", "green",  "darkorchid1"),
alpha = 0.50,
cex = 2,
fontfamily = "serif",
fontface = "bold",
cat.col = c("darkblue", "darkgreen", "darkorchid4"),
# cat.fontfamily = "serif",
cat.cex = 1.5,
# cat.pos =c(10), cat.dist = c(0), cat.prompts=T,
margin = 0.1
);

# have a look at the default plot

grid.newpage()
grid.draw(venn.plot )
```
## NICM
```{r, fig.width=6, fig.height=6}

venn.plot <- venn.diagram(
   x = list(
       Inova_NICM = inova.degs$ICM$gene.name,
       Utah_NICM = utah.degs$ICM$gene.name,
       Yang = s12.flt$transcript
       ),
filename = NULL,
col = "transparent",
#lty = "dotted",
#imagetype = "png",
#lwd = 2,
fill = c("cornflowerblue", "green",  "darkorchid1"),
alpha = 0.50,
cex = 2,
fontfamily = "serif",
fontface = "bold",
cat.col = c("darkblue", "darkgreen", "darkorchid4"),
# cat.fontfamily = "serif",
cat.cex = 1.5,
# cat.pos =c(10), cat.dist = c(0), cat.prompts=T,
margin = 0.1
);

# have a look at the default plot

grid.newpage()
grid.draw(venn.plot )
```
```{r}
venn.plot <- venn.diagram(
   x = list(
       HF = HF.comm,
       Inova_ICM = inova.degs$ICM$gene.name,
       Utah_ICM = utah.degs$ICM$gene.name,
       Inova_NICM = inova.degs$ICM$gene.name,
       Utah_NICM = utah.degs$ICM$gene.name
       ),
filename = NULL,
fill = c("red", "cornflowerblue", "green", "yellow", "darkorchid1"),
alpha = 0.50,
margin=0.1
)
grid.newpage()
grid.draw(venn.plot )
```

## show the differences in genes
```{r}

HF.comm2 <- Reduce(intersect, list(
        Inova_ICM = inova.degs$ICM$gene.name,
       Utah_ICM = utah.degs$ICM$gene.name,
       Inova_NICM = inova.degs$ICM$gene.name,
       Utah_NICM = utah.degs$ICM$gene.name
       ))
compare(HF.comm, HF.comm2)
ProjectTemplate::cache("HF.comm2")
```
# plot for HF.comm2
# coding vs noncoding
```{r}

.d1 <- inova.degs$HF %>% filter(gene.name %in% HF.comm2) %>% select(gene.name, logFC, gene_type) %>% rename(Inova=logFC) %>% mutate(GeneType = ifelse(gene_type == "protein_coding", "protein_coding", "non-coding"))
.d2 <- utah.degs$HF %>% filter(gene.name %in% HF.comm2) %>% select(gene.name, logFC) %>% rename(Utah=logFC)
.d <- .d1 %>% inner_join(.d2)
library(ggpubr)
ggscatter(.d, x="Inova", y="Utah", col="GeneType", palette = "jco", alpha=0.7) + stat_cor() + geom_abline(lty=2)
```

# Heatmap of Inova 
```{r, fig.height=10, fig.width=9}
.d <- inova_n20.fit$v$E[HF.comm2, ]

.fc <- inova_n20.fit$v$E[HF.comm2, ] - rowMeans(.d[, inova_n20.fit$v$targets$Sample == "DONOR"])

colnames(.fc) <- inova_n20.fit$v$targets$PID

library(ComplexHeatmap)
require(circlize)

# assign color manually
ann.dat <- inova_n20.fit$v$targets[, c("gender.impute","chf_etiology",  "SampleType")] %>% as.data.frame()
ann.colors <- list(chf_etiology=c(HC="Green", ICM="Red", NICM="blue"),
                  gender.impute=c("Female"="pink", Male="brown"),
                  SampleType=c(DONOR="green", HF="blue", TX="yellow"))
bh <- HeatmapAnnotation(ann.dat, col = ann.colors)

# pdf(file="graphs/model5.heatmap_cell4.pdf", width=7, height=7)
# Heatmap(dat, show_row_names = FALSE, show_column_names = F, top_annotation=bh) + Heatmap(genes.grp, name = "Group",width = unit(5, "mm"), show_row_names = FALSE, col=get.rand.colors(4))
# dev.off()
set.seed(123)
inova.heat <- Heatmap(.fc, name="inova", column_title = "Inova", row_names_gp = gpar(fontsize = 6), column_names_gp = gpar(fontsize = 6), col = colorRamp2(c(-3, 0, 3), c("green", "white", "red")) , clustering_distance_rows = "euclidean", clustering_distance_columns="euclidean", clustering_method_columns="ward.D", clustering_method_rows="ward.D", top_annotation=bh, row_dend_width = unit(30, "mm"), column_dend_height = unit(30, "mm"), km=7, rect_gp = gpar(col = "white", lty = 1, lwd = 1), show_row_names=F)

# decorate_heatmap_body("inova", {
#     x = 25/65
#     grid.lines(c(x, x), c(-3, 1), gp = gpar(lwd = 2, lty=2))
#     
# })

```
```{r, fig.height=12, fig.width=20}
utah.d <- utah_n20.fit$v$E[HF.comm2,]
utah.fc <- utah.d - rowMeans(utah.d[, utah_n20.fit$v$targets$Sample == "DONOR"])

colnames(utah.fc) <- utah_n20.fit$v$targets$PID

# assign color manually
utah.ann.dat <- utah_n20.fit$v$targets[, c("gender.impute", "chf_etiology",  "SampleType")] %>% as.data.frame()
#ann.colors <- list(chf_etiology=c(HC="Green", ICM="Red", NICM="blue"),
#                  gender.impute=c("Female"="pink", Male="brown"))
utah.bh <- HeatmapAnnotation(utah.ann.dat, col = ann.colors)

set.seed(123)
utah.heat <- Heatmap(utah.fc, name="utah", column_title = "Utah", row_names_gp = gpar(fontsize = 6), column_names_gp = gpar(fontsize = 6), col = colorRamp2(c(-3, 0, 3), c("green", "white", "red")) ,  clustering_distance_columns="euclidean", clustering_method_columns="ward.D", top_annotation=utah.bh, rect_gp = gpar(col = "white", lty = 1, lwd = 1))

inova.heat + utah.heat
dev.copy2pdf(file="graphs/comm2.heatmap.pdf", width=20,height=12)
```

# get the clusters
```{r}
set.seed(123)
r.dend <- row_dend(inova.heat) 

set.seed(123)
cluster.lst <- lapply(row_order(inova.heat), function(x) row.names(.fc)[x] )
cluster.lst
ProjectTemplate::cache("cluster.lst")
openxlsx::write.xlsx(cluster.lst, "reports/clusters.xlsx")
```

# pca plot
```{r}
hf.pca <- get.pca.dat(t(.d), as.data.frame(inova_n20.fit$v$targets))

ggplot(hf.pca$dat, aes(PC1, PC2, col=chf_etiology)) + geom_point()
```
## save HP.comm2 to IPA 
```{r}
.dd <- inova.degs$ICM %>% filter(gene.name %in% HF.comm2) 
write.table(.dd, file="reports/HF_comm2.txt", col.names=T, row.names=F, sep="\t", quote=F)

write.table(inova.degs$ICM, file="reports/inova_icm.txt", col.names=T, row.names=F, sep="\t", quote=F)
write.table(inova.degs$HF, file="reports/inova_hf.txt", col.names=T, row.names=F, sep="\t", quote=F)

# and save the rank file for GSEA
.dd2 <- .def_degs(inova_n20.fit$fit,  p.value = 1, lfc=0)
icm.rnk <- .dd2$ICM %>% select(gene.name, logFC)
nicm.rnk <- .dd2$NICM %>% select(gene.name, logFC)

write.table(icm.rnk, file="reports/icm.rnk", col.names=F, row.names=F, sep="\t", quote=F)
write.table(nicm.rnk, file="reports/nicm.rnk", col.names=F, row.names=F, sep="\t", quote=F)

# Probe Set ID	Gene Symbol	Gene Title
# 0610007P14Rik	C14orf1	RIKEN cDNA 0610007P14 gene
# 0610009D07Rik	SF3B14	RIKEN cDNA 0610009D07 gene
# 0610009O20Rik	KIAA0141	RIKEN cDNA 0610009O20 gene
# 0610010F05Rik	KIAA1841	RIKEN cDNA 0610010F05 gene
# 0610010K14Rik	C17orf49	RIKEN cDNA 0610010K14 gene

```


# boxplot rpkm
```{r}
boxplot.expr(RPKM, sam.final, facet_by="source")

boxplot.expr(inova_n20.fit$v$E, inova_n20.fit$v$targets)
boxplot.expr(utah_n20.fit$v$E, utah_n20.fit$v$targets)
```

---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
theme_set(theme_bw())
fontsize = 18L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))
```

# calculate the fold change and merge the dataset
```{r}
load("cache/inova_n20.fit.RData")
load("cache/utah_n20.fit.RData")
```

```{r}
all(row.names(utah_n20.fit$v$E) == row.names(inova_n20.fit$v$E))

inova.d <- inova_n20.fit$v$E[]
inova.fc <- inova.d - rowMeans(inova.d[, inova_n20.fit$v$targets$Sample == "DONOR"])

utah.d <- utah_n20.fit$v$E[]
utah.fc <- utah.d - rowMeans(utah.d[, utah_n20.fit$v$targets$Sample == "DONOR"])

.fc <- cbind(inova.fc, utah.fc)
.targets <- rbind(inova_n20.fit$v$targets, utah_n20.fit$v$targets)
fc.elist <- new("EList", list(E=.fc, genes=inova_n20.fit$v$genes, targets=.targets))
```

# get the clusters
```{r}
load("cache/cluster.lst.RData")

.calc <- function(sig, data, control, avg.sig = "median", avg.normal="mean"){
  if(length(sig) == 1 && is.na(sig)){
    #take the whole dataset
    sig <- rep(T, nrow(data))
  }
  if(!is.null(control)){
    ctrl.sig  <- apply(control[sig,], 1, avg.normal, na.rm=T)
  }else{
    ctrl.sig <- 0
  }
  ifn13.sig <- apply(sweep(data[sig,], 1, ctrl.sig), 2, avg.sig, na.rm=T)
  return(ifn13.sig)
}

sig.dat <- ldply(cluster.lst, function(x) .calc(x, fc.elist$E, NULL )) %>% t %>% as.data.frame
names(sig.dat) <- paste0("Cls", 1:7)

dist <- as.dist(1 - abs(cor(sig.dat)))
hc <- hclust(dist)
plot(hc)
z <- cutree(hc, h=0.3)

# reorder 
```

```{r, fig.width=10, fig.height}
.s <- sig.dat[, names(sort(z))] %>% bind_cols( fc.elist$targets)
library(GGally)
ggpairs(.s, columns=1:7, aes(col=source), alpha=0.7)
```
```{r}
ggplot(.s, aes(x=Cls1, y=Cls6, col=chf_etiology)) + geom_point()
ggplot(.s, aes(x=chf_etiology, y=Cls1, col=chf_etiology)) + geom_boxplot() + geom_jitter()

ggplot(.s, aes(x=chf_etiology, y=Cls6, col=source)) + geom_boxplot() + geom_jitter()


```

```{r}
cluster.lst
```

# update the sample information with the latest data
```{r}
.d <- openxlsx::read.xlsx("data/Master Clinical Data May 2018.xlsx", check.names=F)
row.names(.d) <- .d$ID

load("cache/sam.final.RData")

# check the latest same is matched with the drop 10 
.t <- sam.final %>% filter(SampleType!="TX")
.cc <- compare(.t$ID, .d$ID) # confirmed
.cc2 <- compare(names(.d), names(.t))

# "NICM.Subtype"       "HF.Duration.Months"
.cc2
.curr <- fc.elist$targets %>% filter(SampleType!="TX")

table(.d$NICM.Subtype)
summary(.d$HF.Duration.Months)

# update the data
fc.final <- fc.elist[, .d$ID]
fc.final$targets <- .d[fc.final$targets$ID, ]

ProjectTemplate::cache("fc.final")
```
# pca plot
```{r}
library(ggbiplot)
.p <- prcomp(t(fc.final$E[HF.comm2, ]), scale=F)
ggbiplot(.p, groups=fc.final$targets$source, obs.scale = 1.4, pc.biplot=F, var.axes=F,scale=1, varname.size = 1, ellipse=T)

```

---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
#theme_set(theme_bw())
# fontsize = 18L
# theme_update(axis.title.x = element_text(size=fontsize))
# theme_update(axis.title.y = element_text(size=fontsize))
# theme_update(plot.title = element_text(size=fontsize+2))
```

# see 04.
```{r}
load("cache/fc.final.RData")
dim(fc.final)
```
# pick the top 5000 variant genes see https://bioc.ism.ac.jp/packages/3.4/bioc/vignettes/CVE/inst/doc/WGCNA_from_TCGA_RNAseq.html


```{r}
ind <- order(apply(fc.final$E,1,mad), decreasing = T)[1:5000]
WGCNA_matrix <- t(fc.final$E[ind,])

library(WGCNA)
s = abs(bicor(WGCNA_matrix))
```

#calculate the power
```{r}
powers = c(c(1:10), seq(from = 12, to=20, by=2))
sft = pickSoftThreshold(WGCNA_matrix, powerVector = powers, verbose = 5)
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     xlab='Soft Threshold (power)',ylab='Scale Free Topology Model Fit,signed R^2',
     type='n', main = paste('Scale independence'));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     labels=powers,cex=1,col='red'); abline(h=0.90,col='red')
```
# dissimilarity measure
```{r}
beta <- 8
a <- s ^ beta
w <- 1 - a 
```

# Identification of co-expression modules
```{r}
#create gene tree by average linkage hierarchical clustering 
geneTree = hclust(as.dist(w), method = 'average')

#module identification using dynamic tree cut algorithm
modules = cutreeDynamic(dendro = geneTree, distM = w, deepSplit = 4, pamRespectsDendro = FALSE, minClusterSize = 30)
#assign module colours
module.colours = labels2colors(modules)

#plot the dendrogram and corresponding colour bars underneath
plotDendroAndColors(geneTree, module.colours, 'Module colours', dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05, main='')
```

The relation between the identified co-expression modules can be visualized by a dendrogram of their eigengenes (fig. 3). The module eigengene is defined as the first principal component of its expression matrix. It could be shown that the module= eigengene is highly correlated with the gene that has the highest intramodular connectivity8.

```{r}
library(ape)
#calculate eigengenes
MEs = moduleEigengenes(WGCNA_matrix, colors = module.colours, excludeGrey = FALSE)$eigengenes

# use numeric ID is better than color (ME0-ME31)
Cls = moduleEigengenes(WGCNA_matrix, colors = modules, excludeGrey = FALSE)$eigengenes

wgcna.res <- list(mat = WGCNA_matrix, MEs=Cls, modules=modules)
ProjectTemplate::cache("wgcna.res")
#calculate dissimilarity of module eigengenes
MEDiss = 1-cor(Cls);

#cluster module eigengenes
METree = hclust(as.dist(MEDiss), method = 'average');

#plot the result with phytools package
```

```{r, fig.width=10, fig.height=10}
plot.phylo(as.phylo(METree),type = 'fan',show.tip.label = T, main='', label.offset=0.04)
tiplabels(frame = 'circle',col='black', text=rep('', ncol(Cls)), bg = levels(as.factor(module.colours)))
```

# Annotation
```{r, eval=F}
#reference genes = all 5000 top mad genes 
ref_genes = colnames(WGCNA_matrix)

#create data frame for GO analysis
library(org.Hs.eg.db)
GO = toTable(org.Hs.egGO); SYMBOL = toTable(org.Hs.egSYMBOL)
GO_data_frame = data.frame(GO$go_id, GO$Evidence,SYMBOL$symbol[match(GO$gene_id,SYMBOL$gene_id)])

#create GOAllFrame object
library(AnnotationDbi)
GO_ALLFrame = GOAllFrame(GOFrame(GO_data_frame, organism = 'Homo sapiens'))

#create gene set
library(GSEABase)
gsc <- GeneSetCollection(GO_ALLFrame, setType = GOCollection())

#perform GO enrichment analysis and save results to list - this make take several minutes
library(GOstats)
GSEAGO = vector('list',length(unique(modules)))
for(i in 0:(length(unique(modules))-1)){
  GSEAGO[[i+1]] = summary(hyperGTest(GSEAGOHyperGParams(name = 'Homo sapiens GO', 
              geneSetCollection = gsc, geneIds = colnames(WGCNA_matrix)[modules==i], 
              universeGeneIds = ref_genes, ontology = 'BP', pvalueCutoff = 0.05, 
              conditional = FALSE, testDirection = 'over')))
  print(i)
}

ProjectTemplate::cache("GSEAGO")

cutoff.size = 100

# name the module by the hit with the top count *size < 100
GO.module.name = rep(NA,length(unique(modules)))
for (i in 1:(length(unique(modules))-1)){
  .ind <- GSEAGO[[i]]$Size<cutoff.size
  GO.module.name[i] = 
    GSEAGO[[i]][.ind,
    ][which(GSEAGO[[i]][.ind,]$Count==max(GSEAGO[[i]][.ind,]$Count)),7]
}

GO.module.name[1] = 'module 0'
ProjectTemplate::cache("GO.module.name")

# There are 32 modules i : 0-31, match to GO.module.name and GSEAGO with the index i+1

table(modules)
# modules
#    0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   17   18 
# 1738  226  195  184  162  150  139  129  124  119  119  107  106  101   95   93   91   90   89 
#   19   20   21   22   23   24   25   26   27   28   29   30   31 
#   88   87   87   86   77   76   75   70   70   67   57   52   51 
# list the genes in the module 20

colnames(WGCNA_matrix)[modules==20]
```


# module ME19
```{r, fig.width=26, fig.height=7}
# check genes NDUF*
lapply(1:(length(unique(modules))-1), function(x){
  sum(grepl("^(NDUF|COX)", colnames(WGCNA_matrix)[modules==x]))
})

#
(m19.genes <- colnames(WGCNA_matrix)[modules==19])
GO.module.name[20]
# [1] "transcription initiation from RNA polymerase II promoter"
GSEAGO[[20]]

dist(t(WGCNA_matrix[, m19.genes]), method="euclidean") %>% hclust %>% plot

```
```{r, fig.height=15, fig.width=15}
library(ComplexHeatmap)
Heatmap(t(WGCNA_matrix[, m19.genes]))
```


# check mitochondria encoded genes ME3
```{r, fig.width=26, fig.height=7}
load("cache/GSEAGO.RData")
load("cache/GO.module.name.RData")
lapply(1:(length(unique(modules))-1), function(x){
  sum(grepl("^(MT-)", colnames(WGCNA_matrix)[modules==x]))
}) %>% unlist


# i = 3
(m3.genes <- colnames(WGCNA_matrix)[modules==3])
GO.module.name[4]
GSEAGO[[4]]


# make a tree
.s = abs(bicor(WGCNA_matrix[, m3.genes]))
beta <- 8
.a <- .s ^ beta
.w <- 1 - .a 
.geneTree = hclust(as.dist(.w), method = 'average')
plot(.geneTree)

1 - cor(WGCNA_matrix[, m3.genes] ) %>% as.dist %>% hclust %>% plot

dist(t(WGCNA_matrix[, m3.genes]), method="euclidean") %>% hclust %>% plot
```
```{r, fig.height=15, fig.width=15}
library(ComplexHeatmap)
Heatmap(t(WGCNA_matrix[, m3.genes]))
```

# refine MT signatures
```{r}
load("cache/inova_n20.fit.RData")
e.median <- rowMeans(inova_n20.fit$v$E) 
mito.genes<- inova_n20.fit$v$genes %>% mutate(expr = e.median) %>% filter(ref == "chrM" & expr > 10) %>%.$gene.name
ProjectTemplate::cache("mito.genes")

Heatmap(cor(t(fc.final$E[mito.genes,])))
```

```{r, fig.width=15, fig.height=15}
.dd <- cor(WGCNA_matrix[, m3.genes] )
library(ComplexHeatmap)
Heatmap(.dd)

Heatmap(.s[m3.genes, m3.genes])
```

# network
```{r}
library(ggraph)
library(igraph)
library(GGally)
library(network)
library(intergraph)

m3.dat <- WGCNA_matrix[, m3.genes] 
ProjectTemplate::cache("m3.dat") #save the data to test in Mac

tidy_cors <- WGCNA_matrix[, m3.genes] %>% corrr::correlate() %>% corrr::stretch()

graph_cors <- tidy_cors %>%
  filter(abs(r) > .6 & x <y) %>%
  graph_from_data_frame(directed = FALSE)

co <- layout_with_fr(graph_cors)
plot(graph_cors,  edge.arrow.size=.4,vertex.label=NA, vertex.size=5, layout=co)

#convert igraph to network
.net <-asNetwork(graph_cors)
ggnet2(.net, mode = "fruchtermanreingold", layout.par = list(cell.jitter = 0.75))
+ theme_void() + theme(axis.text.x = NULL) 
```

```{r}
# install.packages("WGCNA")
library(WGCNA)
library(cluster)
# for the samples
A <- adjacency(dat, type="distance")

# this calculates the whole network connectivity 
k=as.numeric(apply(A,2,sum))-1 

# standardized connectivity 
Z.k=scale(k)

hist(Z.k, n=100)

# Designate samples as outlying # if their Z.k value is below the threshold 
thresholdZ.k=-5 # often -2.5

outlierColor=ifelse(Z.k<thresholdZ.k,"red","black")

sampleTree = flashClust::flashClust(as.dist(1-A), method = "average")


# Convert traits to a color representation: 
# where red indicates high values 
datTraits <- all.sam[, 3:51] %>% str2factor(max.levels=Inf) %>% mutate_if (is.factor, as.numeric)

traitColors=data.frame(numbers2colors(datTraits,signed=FALSE)) 
dimnames(traitColors)[[2]]=paste(names(datTraits),"C",sep="") 

datColors=data.frame(outlierC=outlierColor,traitColors) 
# Plot the sample dendrogram and the colors underneath. 


plotDendroAndColors(sampleTree,groupLabels=names(datColors), colors=datColors,main="Sample dendrogram and trait heatmap")
dev.copy2pdf(file="graphs/treeplot.pdf", width=20, height=15)
```
```{r}
# cor of genes
cor <- cor(t(dat))

library(ComplexHeatmap)
Heatmap(cor)
```

```{r}
# choose power based on SFT criterion 
sft=pickSoftThreshold(t(dat),powerVector=1:30)
plot(sft$fitIndices$Power, sft$fitIndices$SFT.R.sq)

#7
sft$powerEstimate

mergingThresh = 0.25 
net = blockwiseModules(t(dat),corType="pearson", maxBlockSize=5000,networkType="unsigned",power=7,minModuleSize=10, mergeCutHeight=mergingThresh,numericLabels=TRUE,saveTOMs=TRUE, pamRespectsDendro=FALSE,saveTOMFileBase="wgcna_test1")

moduleLabelsAutomatic=net$colors

# Convert labels to colors for plotting 
moduleColorsAutomatic = labels2colors(moduleLabelsAutomatic)

# A data frame with module eigengenes can be obtained as follows
MEsAutomatic = net$MEs

# this is the body weight
weight = as.data.frame(all.sam$lvedd)
names(weight) = "weight"

# Next use this trait to define a gene significance variable
GS.weight = as.numeric(cor(t(dat), weight, use = "p"))

# This translates the numeric values into colors
GS.weightColor = numbers2colors(GS.weight, signed = F)
blocknumber = 1

datColors = data.frame(moduleColorsAutomatic, GS.weightColor)[net$blockGenes[[blocknumber]], ]

# Plot the dendrogram and the module colors underneath
plotDendroAndColors(net$dendrograms[[blocknumber]], colors = datColors, groupLabels = c("Module colors", 
    "GS.weight"), dendroLabels = FALSE, hang = 0.03, addGuide = TRUE, guideHang = 0.05)

```

---
title: "R Notebook"
output: html_notebook
editor_options:
  chunk_output_type: inline
---


```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath(".."))

source("~/Rstat/my.util.r")
comm.libs <- c("plyr", "tidyverse", "stringr", "ggplot2", "DescTools", "reshape2", "openxlsx")
.tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)

#ggplot theme set
#theme_set(theme_bw())
# fontsize = 18L
# theme_update(axis.title.x = element_text(size=fontsize))
# theme_update(axis.title.y = element_text(size=fontsize))
# theme_update(plot.title = element_text(size=fontsize+2))
```

# Load the latest clinical inforamtion 
```{r}
load("cache/fc.final.RData")
load("cache/wgcna.res.RData")
```

# recode the clinical information if necessary
```{r}
.sam <- fc.final$targets
names(.sam)
```

```{r}
# library("DescTools")
# Desc(.sam, plotit=T)
```

# calculate ME score of the 7 clusters
```{r}
load("cache/cluster.lst.RData")
names(cluster.lst) <- paste0("Cls", 1:7)
.dd <- Biobase::reverseSplit(cluster.lst) %>% unlist
gg <- names(.dd)

.mat <- t(fc.final$E[gg,]) 
.me <- WGCNA::moduleEigengenes(.mat, colors = .dd, excludeGrey = FALSE)$eigengenes

load("cache/mito.genes.RData")
.mito <- WGCNA::moduleEigengenes( t(fc.final$E[mito.genes,]) , colors = rep("mito", length(mito.genes)), excludeGrey = FALSE)$eigengenes

MEs.all <- cbind(wgcna.res$MEs, .me, .mito)

ProjectTemplate::cache("MEs.all")
.MEDiss = 1-cor(MEs.all);
.module.colours = WGCNA::labels2colors(names(MEs.all))

#cluster module eigengenes
.METree = hclust(as.dist(.MEDiss), method = 'average');

#plot the result with phytools package
names(MEs.all)
```

```{r, fig.width=10, fig.height=10}
library(ape)
plot.phylo(as.phylo(.METree),type = 'fan',show.tip.label = T, main='', label.offset=0.04, tip.col=rep(c('black', "red", "blue"), times=c(32,7,1)))
tiplabels(frame = 'circle',col="red",text=rep('', ncol(MEs.all)), bg = levels(as.factor(.module.colours)))
```

# select the variables to be evaluated

## we will drop all the donor samples here
```{r}
load("cache/MEs.all.RData")
source("lib/super_reg.R")
# from age to st and - Study and gender.impute, HG, SampleType

# from chf_etiology to gender.impute, drop study, use race, study and age as coviates; drop year_of_lvad
# .var <- names(.sam)[setdiff(9:56, c(10, 53:55))]
.var <- names(.sam)[setdiff(9:51, c(12, 25:27))]

.f <- function(x, pred.df, out.df){
  .model <-  glue::glue("out.df${x$out} ~ pred.df${x$pred} + pred.df$age + pred.df$Study + pred.df$race + pred.df$bsa + pred.df$gender.impute")
  rv <- lm(as.formula(.model))
  out <- broom::tidy(rv)
  out$pred = x$pred
  out$out = x$out
  return(out)
}

res <- super_reg(.sam, MEs.all, .f, variables = .var)

# need to filter res and upate the pvalue
res.fil <- res %>% filter(  ! term %in% c("pred.df$StudyUtah", "pred.df$age") ) %>% filter(! grepl("\\$race", term))  %>% filter(! grepl("\\$gender", term))  %>% filter(! grepl("\\$bsa", term)) %>% filter(! grepl("NICM.SubtypeSarcoidosis", term) )%>% filter(adj.pval < 0.1)
dim(res.fil)

```
# check NICM subtype
```{r}
res.fil

ggplot(data=NULL, aes(x=.sam$NICM.Subtype, y=MEs.all$ME6)) + geom_boxplot() + geom_jitter() + coord_flip()

ggplot(data=NULL, aes(x=.sam$beta_blocker, y=MEs.all$MECls2)) + geom_boxplot() + geom_jitter()
ggplot(data=NULL, aes(x=.sam$intermacs_profile, y=MEs.all$MECls2)) + geom_jitter()

ggplot(data=NULL, aes(x=.sam$mr, y=MEs.all$MECls6)) + geom_boxplot() + geom_jitter()
ggplot(data=NULL, aes(x=.sam$mr, y=MEs.all$ME10)) + geom_boxplot() + geom_jitter()

ggplot(data=NULL, aes(x=.sam$year_of_lvad, y=MEs.all$ME3)) + geom_jitter()

```
# module annotaton
```{r}
load("cache/GO.module.name.RData")
GO.module.name
```

```{r}
# compare to the last model: drop some covariats:
# keep age and gender
# from chf_etiology to gender.impute, drop study, use race, study and age as coviates; drop year_of_lvad
# .var <- names(.sam)[setdiff(9:56, c(10, 53:55))]
.var <- names(.sam)[setdiff(9:51, c(12, 25:27))]

.f2 <- function(x, pred.df, out.df){
  .model <-  glue::glue("out.df${x$out} ~ pred.df${x$pred} + pred.df$age +  pred.df$Study + pred.df$gender.impute")
  rv <- lm(as.formula(.model))
  out <- broom::tidy(rv)
  out$pred = x$pred
  out$out = x$out
  return(out)
}


res2 <- super_reg(.sam, MEs.all, .f2, variables = .var)

# need to filter res and upate the pvalue
res2.fil <- res2 %>% filter(  ! term %in% c("pred.df$StudyUtah", "pred.df$age") )  %>% filter(! grepl("\\$gender", term))   %>% filter(! grepl("NICM.SubtypeSarcoidosis", term) )%>% filter(adj.pval < 0.1)

dim(res2.fil)
```
# test the simpliest model
```{r}
# compare to the last model: drop some covariats:
# keep age and gender
# from chf_etiology to gender.impute, drop study, use race, study and age as coviates; drop year_of_lvad
# .var <- names(.sam)[setdiff(9:56, c(10, 53:55))]
source("lib/super_reg.R")
.var <- names(.sam)[setdiff(10:51, c(12, 25:27))]

.f3 <- function(x, pred.df, out.df){
  .model <-  glue::glue("out.df${x$out} ~ pred.df${x$pred}  +  pred.df$Study ")
  rv <- lm(as.formula(.model))
  out <- broom::tidy(rv)
  out$pred = x$pred
  out$out = x$out
  return(out)
}


res3 <- super_reg(.sam, MEs.all, .f3, variables = .var)

# need to filter res and upate the pvalue
res3.fil <- res3 %>% filter(  ! term %in% c("pred.df$StudyUtah") ) %>% filter(! grepl("NICM.SubtypeSarcoidosis", term)) %>% filter(adj.pval < 0.05)

dim(res3.fil)
```

```{r}
ggplot(data=NULL, aes(.sam$year_of_lvad, MEs.all$ME3, col=.sam$source)) + geom_point()

ggplot(data=NULL, aes(.sam$beta_blocker, y=MEs.all$MECls2)) + geom_boxplot() + geom_jitter()

# check mr and ME10
load("cache/GO.module.name.RData")
GO.module.name[11]
# [1] "striated muscle contraction"

# https://www.mayoclinic.org/diseases-conditions/mitral-valve-regurgitation/symptoms-causes/syc-20350178
ggplot(data=NULL, aes(.sam$mr, MEs.all$ME10)) + geom_boxplot()


ggplot(.sam, aes(x=year_of_lvad, y= duration_of_hf_months)) + geom_point()
```

# check some signatures
```{r}
ggplot(MEs.all, aes(x=MEmito, y=MECls6, col=.sam$chf_etiology)) + geom_point()

ggplot(MEs.all, aes(x=MECls1, y=MECls6, col=.sam$chf_etiology)) + geom_point()


library(ggrepel)
ss <- .sam$NICM.Subtype != "Idiopathic"
ggplot(MEs.all, aes(x=MEmito, y=MECls6, col=.sam$NICM.Subtype)) + geom_point() + facet_wrap(~ .sam$NICM.Subtype)

ggplot(MEs.all, aes(x=MECls1, y=MECls6, col=.sam$NICM.Subtype)) + geom_point()

ggplot(MEs.all, aes(x=MECls2, y=MECls6, col=.sam$NICM.Subtype)) + geom_point()

ggplot(MEs.all, aes(x=MECls3, y=MECls6, col=.sam$NICM.Subtype)) + geom_point()

```

```{r, fig.width=10, fig.height=10}
gg <- c("MECls1", "MECls2", "MECls6", "MECls7", "MEmito", "ME19")

.s <- MEs.all[, gg] %>% bind_cols( .sam)
library(GGally)
ggpairs(.s, columns=1:6, aes(col=chf_etiology), alpha=0.7)
```

# star plot
```{r}

# library(ggradar)
# suppressPackageStartupMessages(library(dplyr))
# library(scales)
# 
# http://www.r-chart.com/2016/10/the-grammar-of-graphics-and-radar-charts.html

 df =  MEs.all[, gg]  %>% rownames_to_column( var = "ID" ) %>% melt(id.vars=c('ID'), measure.vars=gg) %>% 
 arrange(ID)

 p  = df %>% ggplot(aes(x=variable, y=value, group=ID)) + geom_polygon(color = 'purple', fill=NA)
 p+ coord_polar()
```

# annotate the 7 clusters
```{r}
source('/itmi/home/zhuwe/prj/heart_failure/107_RNAseq_4thRun/lib/go_annotate.R')
load("cache/gsc.RData")

ref.genes <- row.names(fc.final$E)
gsea.res <- gsc_gsea(gsc, cluster.lst, ref.genes)
ProjectTemplate::cache("gsea.res")
openxlsx::write.xlsx(res.fil, "reports/regression_res.xlsx")

# top rank by each term 
res.top <- res  %>% filter(  ! term %in% c("pred.df$StudyUtah") ) %>% filter(! grepl("NICM.SubtypeSarcoidosis", term)) %>% filter(! grepl("\\$race", term)) %>% group_by(pred) %>% filter(row_number() <= 5) %>% ungroup() %>% arrange(pred, adj.pval)
View(res.top)
```

# final figures for res.fil
```{r}
.dat <- .sam %>% bind_cols(MEs.all)
library(ggpubr)
my_comparisons <- list(c("Moderate", "None"), c("Mod-Severe", "None"), c("Mild", "None"))
ggboxplot(subset(.dat, !is.na(mr)), x="mr", y="MECls6", add="jitter", col="mr", palette = "jco") + stat_compare_means(comparisons = my_comparisons)+ stat_compare_means(label.y=0.3)
ggsave("graphs/mr_MECls6.pdf", width=5, height=4)


ggboxplot(subset(.dat, !is.na(beta_blocker)), x="beta_blocker", y="MECls2", add="jitter", col="beta_blocker", palette = "jco") + stat_compare_means(label.y=0.18)
ggsave("graphs/betaBlocer_MECls2.pdf", width=3.5, height=4)


ggscatter(subset(.dat, !is.na(intermacs_profile)), x="intermacs_profile", y="MECls2",  alpha=0.5, palette = "jco", add = "reg.line", add.params = list(color = "blue", fill = "lightgray"), conf.int = TRUE ) + stat_cor(method = "pearson", label.x = 6, label.y = 0.1)

# recode normal as 0
library(ggsci)
.dat2 <- .dat %>% mutate(intermacs_profile = ifelse(Sample=="DONOR", 0, intermacs_profile))
ggplot(.dat2, aes(factor(intermacs_profile), MECls2)) +   geom_smooth(method = "lm", se=FALSE, color="black", lty=2, aes(group=1), lwd=0.6, alpha=0.5) + geom_boxplot(col="gray", alpha=0.1) + geom_jitter(alpha=0.9, aes(col=chf_etiology)) + theme_pubr() + scale_color_jco() + labs(x="Intermacs Profile", y="Score of Cluster 2")
ggsave("graphs/intermacs_MECls2.pdf", width=6, height=4)
```

# what is the cls2
```{r}
library(ggbiplot)

.p <- prcomp(t(fc.final$E[cluster.lst[[2]], ]), scale=F)
ggbiplot(.p, groups=fc.final$targets$source, obs.scale = 1.4, pc.biplot=T, var.axes=T,scale=2, varname.size = 2,
ellipse=T)

```
#  HF.Duration.Months vs year_of_lvad
```{r}
ggscatter(.sam, x="HF.Duration.Months", y="year_of_lvad")
```

---
title: "R Notebook"
output: html_notebook
---

```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath("..")) 

source("~/Rstat/my.util.r")
comm.libs <- c("plyr","tidyverse", "stringr", "ggplot2", "reshape2", "cowplot", "openxlsx")
lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)


#ggplot theme set
theme_set(theme_bw())
fontsize = 12L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))

```

# Load RSEM stat data
```{r}
source("lib/RSEM_misc.R")
inova.stat <- get_RSEM_stat("~/107/rsem2", main="Inova 150 samples") %>% rownames_to_column("ID") %>% mutate(Source="Inova", Read_Length=51, Paired="Yes")

utah.stat  <- get_RSEM_stat("~/107/utah/rsem/", main="Utah samples") %>% rownames_to_column("ID") %>% mutate(Source="Utah", Read_Length=50, Paired="No")

# output the total reads and the N1, number of aligner reads
# and align with the selected samples
load("cache/fc.final.RData")

sam <- fc.final$targets

.d <- inova.stat %>% bind_rows(utah.stat)
rnaseq.stat <- .d %>% filter(ID %in% sam$ID)
ProjectTemplate::cache("rnaseq.stat")

# data to be outputed
load("cache/sam_update.RData")
rnaseq.stat.tab <- sam_update %>% select(id, sid) %>% rename(ID=id, SID=sid) %>% left_join(rnaseq.stat) %>% mutate(Total=Ntot, Alignable=N1, Perc=Alignable/Total) %>% select(ID, SID, Source, Read_Length, Paired, Alignable, Total, Perc)

ggplot(rnaseq.stat.tab, aes(Source, y=Perc)) + geom_boxplot()

ggplot(rnaseq.stat.tab, aes(Source, y=Alignable)) + geom_boxplot()



rnaseq.summary <- rnaseq.stat.tab %>% group_by(Source) %>% summarise(N= n(), TotalReads=sum(Total), MeanReads=mean(Total), MeanPerc=mean(Perc))

rnaseq.summary

write.xlsx(list(stat=rnaseq.stat.tab, summary=rnaseq.summary), file="reports/rnaseq.stat_tab.xlsx")
```

# expressed genes (dge.expr)
## Mean of log2 RPKM score is above 0 N=12,428


    isexpr <- rowSums(all.dge$counts>1) > ncol(all.dge) * 0.25
    sum(isexpr)
    hist(rowMeans(RPKM), n=100)
    isExpr <- rowMeans(RPKM) > 0
    sum(isExpr, na.rm=T)
    
    ind <- !is.na(isExpr) & isExpr
    .ids <- dge.final$genes[ind, ] %>% filter(!is.na(gene.name)) %>% filter(!duplicated(gene.name)) %>% .$id


```{r}
exp.genes <- fc.final$genes
dim(exp.genes)


gene_type.summary <- exp.genes %>% group_by(gene_type) %>% summarise(N=n()) %>% mutate(Perc=N/sum(N))
options(scipen=1, digits=3)
gene_type.summary

write.xlsx(gene_type.summary, "reports/gene_type.sumamry.xlsx")
ggplot(gene_type.summary, aes(gene_type, y=N)) + geom_col() 

```

## check antisense lncRNA
```{r}
anti.ss <- exp.genes$gene_type == "antisense"

load("cache/dge.expr.RData")
.d <- dge.expr[anti.ss, sam$ID]

inova.anti <- .d$counts[, sam$source == "Inova"] %>% rowMeans()
utah.anti <- .d$counts[, sam$source == "Utah"] %>% rowMeans()
plot(inova.anti, utah.anti)

names(utah.anti)[utah.anti>30000]

exp.genes %>% filter(gene.name == "RPPH1")

no.outlier <- utah.anti < 30000
plot(inova.anti[no.outlier], utah.anti[no.outlier])
abline(a=0, b=1, lty=2)
```
## Check top highly expressed genes in utah and inova
```{r}
inova.top <- dge.expr$counts[, sam$source == "Inova"] %>% rowMeans() %>% sort(decreasing = T) %>% head(n=100)
utah.top <-  dge.expr$counts[, sam$source == "Utah"] %>% rowMeans() %>% sort(decreasing = T) %>% head(n=100)
compare(names(inova.top), names(utah.top))

all.top <- dge.expr$counts %>% rowMeans() %>% sort(decreasing = T)
all.top.perc <- cumsum(all.top)/sum(all.top)
plot(all.top.perc, type="p", xlim=c(1,200))
abline(h=0.5, lty=2)
head(all.top.perc, n=50)
plot(all.top.perc, type="p")

top100.expr.dat <- data.frame(gene.name=names(all.top), Avg_Count=all.top, CumPerc=all.top.perc) %>% `[`(1:100,) %>% left_join(exp.genes)

write.xlsx(top100.expr.dat, "reports/top100_expressed.xlsx")

## top 36 genes account for 50% gene expression (to AHNAK)
top100.expr.dat$Gene
top100.expr.dat %>% `[`(1:36,) %>% .$gene_type %>% table
```

# update the master table
```{r}
.d <- read.xlsx("data/Master Clinical Data June 2018_update.xlsx") %>% janitor::clean_names()
sam_update <- .d
ProjectTemplate::cache("sam_update")
```

```{r}
library(tableone)

vars <- names(sam_update)[7:52]

# remove the controls
dat <- sam_update %>% filter(sample == "HF")

table1 <- CreateTableOne(vars = c(vars), strata = "source", data = dat, test = T)
## Show table with SMD
print(table1, smd = F)

tab1Mat <- print(table1, smd=F, quote = FALSE, noSpaces = TRUE, printToggle = FALSE)
## Save to a CSV file
write.csv(tab1Mat, file = "reports/Table1_update.csv")
ProjectTemplate::cache("table1")

```



# DEGs
## redefine dge
## create inova_n20.dge and utah_n20.dge
```{r}
load("cache/dge.expr.RData")
inova.ids <- sam_update %>% filter(source == "Inova") %>% .$id
utah.ids <- sam_update %>% filter(source == "Utah") %>% .$id

# update samples
.t <- dge.expr$samples %>% select(group:ID,HG) %>% left_join(sam_update, by=c("ID"="id"))
dge.expr$samples <- .t

dge.expr <- calcNormFactors(dge.expr)
ProjectTemplate::cache("dge.expr")

inova_n31.dge <- dge.expr[, inova.ids]
utah_n31.dge <- dge.expr[, utah.ids]
ProjectTemplate::cache("inova_n31.dge")
ProjectTemplate::cache("utah_n31.dge")

dim(inova_n31.dge)
dim(utah_n31.dge)
```

## review the DEGs with removing the outlier
```{r}
callDEG_n20 <- function(.dge) {
  .sam <- .dge$samples

  ## Perform TMM normalisation
  .dge <- calcNormFactors(.dge)

  # Start of common procedure
  Type <- factor(.sam$chf_etiology)
  Gender <- factor(.sam$gender_impute)
  HG <- .sam$HG

  .design <- model.matrix(~ Type + Gender + HG)

  colnames(.design) <- sub("^Type", "", colnames(.design))
  colnames(.design)[1] <- "Intercept"

  .v <- voom(.dge, .design, plot = TRUE)

  # skip to remove .isExpr
  .isExpr <- rowMeans(.v$E) > 0
  sum(!.isExpr)

  .vfit <- lmFit(.v)

  contrast.matrix <- makeContrasts(
    ICM,
    NICM,
    ICM_NICM = NICM - ICM,
    HF = (NICM + ICM)/2,
    HG,
    GenderMale,
    levels=.design)

  .vfit2 <- contrasts.fit(.vfit, contrast.matrix)
  .vfit2 <- eBayes(.vfit2)
  return(list(v=.v, fit=.vfit2))
}

# load("cache/inova_n20.dge.RData")
.sss <- inova_n31.dge$samples$sid != "10537"
inova_n31.fit <- callDEG_n20(inova_n31.dge[,.sss])
utah_n31.fit <- callDEG_n20(utah_n31.dge)
# inova_n20_noHG.fit <- callDEG_n20_noHG(inova_n20.dge)

# with outlier
inova_n31_wi.fit <- callDEG_n20(inova_n31.dge)

ProjectTemplate::cache("inova_n31.fit")
ProjectTemplate::cache("utah_n31.fit")
ProjectTemplate::cache("inova_n31_wi.fit")
```



```{r}

.def_degs <- function(.fit, coefs=c("HF", "ICM", "NICM", "ICM_NICM"), p.value = 0.05, lfc=1){
  degs <- llply(coefs, function(x){
    topTable(.fit, coef=x, sort.by="P", lfc=0, p.value = 1, number=Inf, adjust.method = "fdr") %>% mutate(DEG = adj.P.Val < p.value & abs(logFC)>lfc ) %>% filter(DEG) %>% arrange(-logFC)
  })
  names(degs) <- coefs
  return(degs)
}

# from fit64
inova.degs <- .def_degs(inova_n31.fit$fit)
utah.degs <- .def_degs(utah_n31.fit$fit)
inova_wi.degs <- .def_degs(inova_n31_wi.fit$fit)
sapply(inova.degs, nrow)
sapply(inova_wi.degs, nrow)
sapply(utah.degs, nrow)
write.xlsx(inova.degs, "reports/inova_degs.xlsx")
write.xlsx(inova_wi.degs, "reports/inova_degs_wi.xlsx")
write.xlsx(utah.degs, "reports/utah_degs.xlsx")


```


# Check the normalized data (for deconvolution)
```{r}
.e <- cbind(inova_n31_wi.fit$v$E, utah_n31.fit$v$E)
.s <- rbind(inova_n31_wi.fit$v$targets, utah_n31.fit$v$targets)
boxplot.expr(.e, .s)

library(limma)

v.elist <- new("EList", list(E=.e, genes=exp.genes, targets=.s))

# upated the targets
# .t <- v.elist$targets %>% select(group:ID,HG) %>% left_join(sam_update, by=c("ID"="id"))
# v.elist$targets <- .t
dim(v.elist)

ProjectTemplate::cache("v.elist") # transfer to mac to calc

# inova_update.dge <- v.elist[, v.elist$targets$source=="Inova"]
# utah_update.dge <- v.elist[, v.elist$targets$source=="Utah"]
# ProjectTemplate::cache("inova_update.dage")
# ProjectTemplate::cache("utah_update.dage")
```

## Venn plot

```{r, fig.width=6, fig.height=6}
library(VennDiagram)

venn.plot <- venn.diagram(
   x = list(
       Inova_ICM = inova.degs$ICM$gene.name,
       Inova_NICM = inova.degs$NICM$gene.name,
       Utah_ICM = utah.degs$ICM$gene.name,
       Utah_NICM = utah.degs$NICM$gene.name
       ),
filename = NULL,
col = "black",
lty = "dotted",
#imagetype = "png",
lwd = 2,
fill = c("cornflowerblue", "green", "yellow", "darkorchid1"),
alpha = 0.50,
label.col = c("orange", "white", "darkorchid4", "white", "white", "white",
 "white", "white", "darkblue", "white",
  "white", "white", "white", "darkgreen", "white"),
cex = 2,
fontfamily = "serif",
fontface = "bold",
cat.col = c("darkblue", "darkgreen", "orange", "darkorchid4"),
cat.cex = 1,
cat.fontfamily = "serif"
)

# have a look at the default plot
op <- par(mar=c(6,6,6,6))
grid.newpage()
grid.draw(venn.plot )
par(op)

dev.copy2pdf(file="graphs/venn4.pdf", width=6, height=5)
```
## venn2
```{r}

venn2.plot <- venn.diagram(
   x = list(
       Inova= inova.degs$HF$gene.name,
       Utah = utah.degs$HF$gene.name
       ),
filename = NULL,
col = "white",
lty = 2,
#imagetype = "png",
lwd = 2,
fill = c("cornflowerblue", "green"),
alpha = 0.50,
label.col = c("blue", "white", "darkorchid4"),
cex = 1,
fontfamily = "serif",
fontface = "bold",
cat.col = c("darkblue", "darkgreen"),
cat.cex = 1,
cat.fontfamily = "serif"
)

# have a look at the default plot
op <- par(mar=c(15,15,15,15))
grid.newpage()
grid.draw(venn2.plot )
par(op)

dev.copy2pdf(file="graphs/venn2_HF.pdf", width=4, height=3)
```

# Comm
```{r}
x = list(
       Inova_ICM = inova.degs$ICM$gene.name,
       Inova_NICM = inova.degs$NICM$gene.name,
       Utah_ICM = utah.degs$ICM$gene.name,
       Utah_NICM = utah.degs$NICM$gene.name
       )


ItemsList <- gplots::venn(x, show.plot=FALSE)
isect <- attr(ItemsList, "intersections")
ss <- grepl(":.+:", names(isect))


.nn <- intersect(inova.degs$HF$gene.name, utah.degs$HF$gene.name)

# HF.comm2 <- Reduce(intersect, list(
#         Inova_ICM = inova.degs$ICM$gene.name,
#        Utah_ICM = utah.degs$ICM$gene.name,
#        Inova_NICM = inova.degs$NICM$gene.name,
#        Utah_NICM = utah.degs$NICM$gene.name
#        ))
# HF.comm3 <- isect[ss] %>% unlist
HF.comm3 <- .nn
ProjectTemplate::cache("HF.comm3") #105
```

# compare with the paper
```{r}

# genes ICM
s11 <- read.xlsx(xlsxFile = "data/Table S6 S11 S12_Yang et al Circulation.xlsx",
sheet=2, startRow = 2) %>% janitor::clean_names()
# genes NICM
s12 <- read.xlsx(xlsxFile = "data/Table S6 S11 S12_Yang et al Circulation.xlsx",
sheet=3, startRow = 2) %>% janitor::clean_names()

# lnc
s14 <- read.xlsx(xlsxFile = "data/Table S5 S14 S15_Yang et al Circulation.xlsx",
sheet=2, startRow = 2) %>% janitor::clean_names()
s15 <- read.xlsx(xlsxFile = "data/Table S5 S14 S15_Yang et al Circulation.xlsx",
sheet=3, startRow = 2) %>% janitor::clean_names()

# s11.flt
s11.flt <- s11 %>% filter( p_value_nf_vs_icm < 0.05 & abs(log2(fold_change_vs_nf_2)) > 1) %>% filter(gene_symbol %in% exp.genes$gene.name)

s12.flt <- s12 %>% filter( p_value_nf_vs_nicm < 0.05 & abs(log2(fold_change_vs_nf_2)) > 1) %>% dplyr::rename(gene_symbol=transcript) %>% filter( gene_symbol %in% exp.genes$gene.name)

paper2014.flt <- list(s11=s11.flt, s12=s12.flt)
sapply(paper2014.flt, nrow)
ProjectTemplate::cache("paper2014.flt")

s11_s12 <- compare(s11.flt$gene_symbol, s12.flt$gene_symbol)
all.genes <- exp.genes$gene.name

s11_comm3 <- compare(s11.flt$gene_symbol, HF.comm3)
s12_comm3 <- compare(s12.flt$gene_symbol, HF.comm3)

cc <- compare(s11_comm3$comm, s12_comm3$comm)

fisher.test( all.genes %in% HF.comm3,  all.genes %in% s11.flt$gene_symbol)
fisher.test( all.genes %in% HF.comm3,  all.genes %in% s12.flt$gene_symbol)
```

## coding vs noncoding
```{r}
table(exp.genes[HF.comm3, "gene_type"] == "protein_coding")
table(exp.genes[HF.comm3, "gene_type"])
.d1 <- inova.degs$HF %>% filter(gene.name %in% HF.comm3) %>% dplyr::select(gene.name, logFC, gene_type) %>% dplyr::rename(Inova=logFC) %>% mutate("GeneType" = case_when(
  gene_type == "protein_coding" ~ "protein coding",
  gene_type %in% c("lincRNA", "antisense") ~ "lncRNA",
  TRUE ~ "others"
)) %>% mutate(GeneType = factor(GeneType, levels=c("protein coding", "lncRNA", "others")))
.d2 <- utah.degs$HF %>% filter(gene.name %in% HF.comm3) %>% dplyr::select(gene.name, logFC) %>% dplyr::rename(Utah=logFC)
.d <- .d1 %>% inner_join(.d2)
library(ggpubr)
ggscatter(.d, x="Inova", y="Utah", col="GeneType", palette = "jco", alpha=0.7) +
stat_cor() + geom_abline(lty=2) + labs(x="log2(FC) @ Inova", y="log(FC) @ Utah")
ggsave("graphs/hf_comm3.scatter.pdf", width=5, height=4)
```

## NICM vs ICM
```{r}
.def_degs <- function(.fit, coefs=c("HF", "ICM", "NICM", "ICM_NICM"), p.value = 0.05, lfc=1){
  degs <- llply(coefs, function(x){
    topTable(.fit, coef=x, sort.by="P", lfc=0, p.value = 1, number=Inf, adjust.method = "fdr") %>% mutate(DEG = adj.P.Val < p.value & abs(logFC)>lfc ) %>% filter(DEG) %>% arrange(-logFC) 
  })
  names(degs) <- coefs
  return(degs)
}

inova_deg.all <- .def_degs(inova_n31.fit$fit, p.value=1, lfc=0)
sapply(inova_deg.all, nrow)

utah_deg.all <-  .def_degs(utah_n31.fit$fit, p.value=1, lfc=0)
sapply(utah_deg.all, nrow)

write.xlsx(inova_deg.all, "reports/inova_degs.all.xlsx")
write.xlsx(utah_deg.all, "reports/utah_degs.all.xlsx")

```

# rnk by HF
```{r}
# and save the rank file for GSEA
hf_inova.rnk <- inova_deg.all$HF %>% dplyr::select(gene.name, logFC)
hf_utah.rnk <- utah_deg.all$HF %>%  dplyr::select(gene.name, logFC)

write.table(hf_inova.rnk, file="reports/hf_inova.rnk", col.names=F, row.names=F, sep="\t", quote=F)
write.table(hf_utah.rnk, file="reports/hf_utah.rnk", col.names=F, row.names=F, sep="\t", quote=F)
```

# Functions
## save the file for ipa 
```{r}
.dd <- inova.degs$HF %>% filter(gene.name %in% HF.comm3) 
write.table(.dd, file="reports/HF_comm3.IPA.txt", col.names=T, row.names=F, sep="\t", quote=F)

```

# go to Heatmap notebook 

## GO Annotation
```{r}
load("cache/cluster6.lst.RData")
source('/itmi/home/zhuwe/prj/heart_failure/107_RNAseq_4thRun/lib/go_annotate.R')
load("cache/gsc.RData")

ref.genes <- row.names(fc.final$E)
cluster6.go <- gsc_gsea(gsc, cluster6.lst, ref.genes, mc.cores = 1)
ProjectTemplate::cache("cluster6.go")

write.xlsx(cluster6.go$GSEAGO, "reports/cluster6.go.xlsx")

lapply(cluster6.go$GSEAGO, head)
```
# Signatures
## remove the outlier
```{r}
names(cluster6.lst) <- paste0("Cls", 1:6)
.dd <- Biobase::reverseSplit(cluster6.lst) %>% unlist
gg <- names(.dd)

ss <- v.elist$targets$sid != "10537"

.mat <- t(v.elist$E[gg, ss])
.me <- WGCNA::moduleEigengenes(.mat, colors = .dd, excludeGrey = FALSE)$eigengene


load("cache/mito.genes.RData")
.mito <- WGCNA::moduleEigengenes( t(v.elist$E[mito.genes, ss]) , colors = rep("mito", length(mito.genes)), excludeGrey = FALSE)$eigengenes

# add the cell fractions
## transfer data from mac to cache
## scp cell.frac.tab.xlsx ml.real.RData hf180.kl.RData uv2:~/prj/heart_failure/107_RNAseq_4thRun/cache
load("cache/hf180.kl.RData")
cc <- coef(hf180.kl)
frac.dat <- apply(cc, 2, function(x) x[1:4]/sum(x[1:4])) %>% t %>% as.data.frame
ProjectTemplate::cache("frac.dat")

all( colnames(v.elist$E) == row.names(frac.dat))

# sam180.dat <- fc.final$targets %>% left_join(frac.dat)

.d <- frac.dat[colnames(v.elist$E)[ss], ]
MEs.new <- cbind(.me, .mito, .d)


ProjectTemplate::cache("MEs.new")

```
```{r, height=12, width=12,  message=F}
# drop one outlier
load("cache/MEs.new.RData")
load("cache/v.elist.RData")
ss <- v.elist$targets$pid != "10537"

s <- MEs.new %>% bind_cols( v.elist$targets[ss,]) 

library(GGally)
ggpairs(s, columns=1:11, aes(col=chf_etiology), alpha=0.7)

ggsave("graphs/sig11.pairs.pdf", width=12, height=12)

# check the legends
ggally_points(s, ggplot2::aes(myo, fibro, color = chf_etiology))

# Make a function that will only print the legend
# points_legend <- gglegend(ggally_points)
# points_legend(iris, ggplot2::aes(Sepal.Length, Sepal.Width, color = Species))


```
# check the fraction 
```{r}
p1 <- ggboxplot(s, x="chf_etiology", y="myo", add="dotplot", color="chf_etiology", outlier.shape = NA, label = "sid", label.select = list(criteria = ' myo < 0.65'), repel=T, size=0.5, alpha=0.7 ) + geom_hline(yintercept = 0.65, lty=2, col="gray")

p2 <- ggboxplot(s, x="chf_etiology", y="fibro", add="dotplot", color="chf_etiology", outlier.shape = NA, label = "sid", label.select = list(criteria = ' fibro > 0.2'), repel=T, size=0.5, alpha=0.7) + geom_hline(yintercept = 0.2, lty=2, col="gray")

p3 <-ggboxplot(s, x="chf_etiology", y="leuko", add="dotplot", color="chf_etiology", outlier.shape = NA, label = "sid", label.select = list(criteria = ' leuko > 0.02'), repel=T, size=0.5, alpha=0.7)+ geom_hline(yintercept = 0.02, lty=2, col="gray")

p4 <-ggboxplot(s, x="chf_etiology", y="endo", add="dotplot", color="chf_etiology", outlier.shape = NA, label = "sid", label.select = list(criteria = ' endo > 0.15'), repel=T, size=0.5, alpha=0.7)+ geom_hline(yintercept = 0.15, lty=2, col="gray")

ggarrange(p1, p2, p3, p4,  labels = c("A", "B", "C", "D"),ncol = 2, nrow = 2, common.legend = TRUE, legend = "top")
ggsave("graphs/fraction.boxplot.pdf", width=7, height=7)
```

# Calculate the correlation
```{r}
.sam <- sam_update[ss, ]
all(.sam$ID == row.names(MEs.new))

# compare to the last model: drop some covariats:
# keep age and gender
# from chf_etiology to gender.impute, drop study, use race, study and age as coviates; drop year_of_lvad
# .var <- names(.sam)[setdiff(9:56, c(10, 53:55))]
.var <- names(.sam)[setdiff(10:52, c(13, 26:28))]

.f2 <- function(x, pred.df, out.df){
  .model <-  glue::glue("out.df${x$out} ~ pred.df${x$pred} + pred.df$age +  pred.df$study + pred.df$gender_impute")
  rv <- lm(as.formula(.model))
  out <- broom::tidy(rv)
  out$pred = x$pred
  out$out = x$out
  return(out)
}

source("lib/super_reg.R")

res.final <- super_reg(.sam, MEs.new[, c("MECls1", "MECls5", "MECls6", "MEmito", "myo", "leuko", "endo")], .f2, variables = .var)

# need to filter res and upate the pvalue
res_final.fil <- res.final %>% filter(  ! term %in% c("pred.df$studyUtah", "pred.df$age") )  %>% filter(! grepl("\\$gender", term))   %>% filter(! grepl("nicm_subtypeSarcoidosis", term) )%>% filter(adj.pval < 0.1)

dim(res_final.fil)
ProjectTemplate::cache("res_final.fil")
write.xlsx(file="reports/res_final.fil.xlsx", res_final.fil)
```

## check those top hits
```{r}
.dat <- .sam %>% bind_cols(MEs.new) 

ggplot(.dat, aes(x=previous_thoracotomy, y=MECls6)) + geom_boxplot() + geom_jitter()
ggplot(.dat, aes(x=mr, y=MECls6)) + geom_boxplot() + geom_jitter()
ggplot(.dat, aes(x=chf_etiology, y=MECls6)) + geom_boxplot() + geom_jitter()
ggplot(.dat, aes(x=chf_etiology, y=MECls1)) + geom_boxplot() + geom_jitter()
ggplot(.dat, aes(x=chf_etiology, y=MECls5)) + geom_boxplot() + geom_jitter()
ggplot(.dat, aes(x=chf_etiology, y=MEmito)) + geom_boxplot() + geom_jitter()

# bad
ggplot(.dat, aes(x=tr, y=endo)) + geom_boxplot() + geom_jitter()

ggplot(.dat, aes(x=mr, y=MECls5)) + geom_boxplot() + geom_jitter()
ggplot(.dat, aes(x=mr, y=endo)) + geom_boxplot() + geom_jitter()
ggplot(.dat, aes(x=vad_type, y=MEmito)) + geom_boxplot() + geom_jitter()



```

---
title: "R Notebook"
output: html_notebook
---

```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath("..")) 

source("~/Rstat/my.util.r")
comm.libs <- c("plyr","tidyverse", "stringr", "ggplot2", "reshape2", "cowplot", "openxlsx")
lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)


#ggplot theme set
theme_set(theme_bw())
fontsize = 12L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))

```

# Load data
```{r}
load("cache/inova_n31.fit.RData")
load("cache/utah_n31.fit.RData")
load("cache/HF.comm3.RData")
load("cache/MEs.new.RData")
```


# Heatmap of Inova 
```{r, fig.height=10, fig.width=9}
.d <- inova_n31.fit$v$E[HF.comm3, ]

.fc <- inova_n31.fit$v$E[HF.comm3, ] - rowMeans(.d[, inova_n31.fit$v$targets$sample == "DONOR"])

colnames(.fc) <- inova_n31.fit$v$targets$sid

.sig <- MEs.new %>% rownames_to_column 
.inova.sam <-  inova_n31.fit$v$targets[, c("ID", "sid", "chf_etiology"  )] %>% left_join(.sig, by=c("ID"="rowname"))  %>%  mutate(mito = scale(MEmito))

all(.inova.sam$sid == colnames(.fc))

library(ComplexHeatmap)
require(circlize)

# assign color manually
ann.dat <- inova_n31.fit$v$targets[, c("gender_impute","chf_etiology",  "sampletype")] %>% mutate(chf_etiology=car::recode(chf_etiology, "'HC'='NF'")) %>% as.data.frame() 

# ann.colors <- list(chf_etiology=c(HC="Green", ICM="Red", NICM="blue"),
#                   gender_impute=c("Female"="pink", Male="brown"),
#                   sampletype=c(DONOR="green", HF="blue", TX="yellow"))
# bh <- HeatmapAnnotation(ann.dat, col = ann.colors)
# ha1 = HeatmapAnnotation(dist1 = anno_barplot(colSums(mat), bar_width = 1, gp = gpar(col = NA, fill = "#FFE200"),  border = FALSE, axis = TRUE))

bh = HeatmapAnnotation(ann.dat[,"chf_etiology",drop=F], col = list(chf_etiology=c(NF="Green", ICM="Red", NICM="blue")), barplot1 = anno_barplot(.inova.sam$mito, baseline = 0, ylim=c(-3,3), bar_width = 1,  gp = gpar(col="gray20", fill = ifelse(.inova.sam$mito > 0, "green", "red")),  border = FALSE, axis = F, axis_side="right"), annotation_height = unit(c(0.4,  1), "cm"), gap = unit(c(2), "mm"), 
    annotation_legend_param = list(chf_etiology = list(title = "Tissue Type", title_gp = gpar(fontsize = 12), labels_gp = gpar(fontsize = 8))))
                       
# draw(bh, 1:63)

# pdf(file="graphs/model5.heatmap_cell4.pdf", width=7, height=7)
# Heatmap(dat, show_row_names = FALSE, show_column_names = F, top_annotation=bh) + Heatmap(genes.grp, name = "Group",width = unit(5, "mm"), show_row_names = FALSE, col=get.rand.colors(4))
# dev.off()
set.seed(123)
cluster.size <- 6
inova.heat <- Heatmap(.fc, name="Color Key", column_title = "Inova", row_names_gp = gpar(fontsize = 6), column_names_gp = gpar(fontsize = 6), col = colorRamp2(c(-3, 0, 3), c("green", "white", "red")) , clustering_distance_rows = "euclidean", clustering_distance_columns="euclidean", clustering_method_columns="ward.D", clustering_method_rows="ward.D", top_annotation=bh, row_dend_width = unit(30, "mm"), column_dend_height = unit(30, "mm"), km=cluster.size, rect_gp = gpar(col = "white", lty = 1, lwd = 1), show_row_names=F,combined_name_fun = function(x) sub("cluster", "",x),  heatmap_legend_param = list(legend_height = unit(5, "cm")))

# decorate_heatmap_body("inova", {
#     x = 25/65
#     grid.lines(c(x, x), c(-3, 1), gp = gpar(lwd = 2, lty=2))
#     
# })
ProjectTemplate::cache("inova.heat") # to keep the cluster

```
```{r, fig.height=12, fig.width=20}
utah.d <- utah_n31.fit$v$E[HF.comm3,]
utah.fc <- utah.d - rowMeans(utah.d[, utah_n31.fit$v$targets$sample == "DONOR"])

colnames(utah.fc) <- utah_n31.fit$v$targets$sid

.utah.sam <-  utah_n31.fit$v$targets[, c("ID", "sid", "chf_etiology"  )] %>% left_join(.sig, by=c("ID"="rowname"))  %>%  mutate(mito = scale(MEmito))

all(.utah.sam$sid == colnames(utah.fc))


# assign color manually
#utah.ann.dat <- utah_n31.fit$v$targets[, c("gender_impute", "chf_etiology",  "sampletype")] %>% as.data.frame()
utah.ann.dat <- utah_n31.fit$v$targets[, c("gender_impute","chf_etiology",  "sampletype")] %>% mutate(chf_etiology=car::recode(chf_etiology, "'HC'='NF'")) %>% as.data.frame() 

utah.bh = HeatmapAnnotation(utah.ann.dat[,"chf_etiology",drop=F], col = list(chf_etiology=c(NF="Green", ICM="Red", NICM="blue")), Mito = anno_barplot(.utah.sam$mito, baseline = 0, ylim=c(-3,3), bar_width = 1,  gp = gpar(col="gray20", fill = ifelse(.utah.sam$mito > 0, "green", "red")),  border = FALSE, axis = TRUE, axis_side="right"), annotation_height = unit(c(0.4,  1), "cm"), 
    show_annotation_name = c(T, TRUE),
    annotation_name_offset = unit(c(2, 10), "mm"),
    annotation_name_rot = c(0, 90),
    gap = unit(c(2), "mm"))

#ann.colors <- list(chf_etiology=c(HC="Green", ICM="Red", NICM="blue"),
#                  gender.impute=c("Female"="pink", Male="brown"))

# utah.bh <- HeatmapAnnotation(utah.ann.dat, col = ann.colors)

set.seed(123)
utah.heat <- Heatmap(utah.fc, name="utah", column_title = "Utah", row_names_gp = gpar(fontsize = 6), column_names_gp = gpar(fontsize = 6), col = colorRamp2(c(-3, 0, 3), c("green", "white", "red")) ,  clustering_distance_columns="euclidean", clustering_method_columns="ward.D", top_annotation=utah.bh, rect_gp = gpar(col = "white", lty = 1, lwd = 1), show_heatmap_legend = FALSE)

inova.heat + utah.heat
dev.copy2pdf(file=sprintf("graphs/comm3.heatmap_cluster_%d_new.pdf", cluster.size), width=20,height=12)
```

# get the clusters
```{r}
set.seed(123)
r.dend <- row_dend(inova.heat) 

set.seed(123)
cluster6.lst <- lapply(row_order(inova.heat), function(x) row.names(.fc)[x] )
cluster6.lst
ProjectTemplate::cache("cluster6.lst")
openxlsx::write.xlsx(cluster6.lst, "reports/clusters6.xlsx")
```


# make the pca plot
```{r}
fc.mat <- cbind(.fc, utah.fc)
ProjectTemplate::cache("fc.mat")

.sam <- sam_update[sam_update$pid != "10537", ] %>% mutate(chf_etiology = car::recode(chf_etiology, "'HC'='NF'") ) %>% mutate(chf_etiology = factor(chf_etiology, levels=c("NF", "ICM", "NICM"))) %>% tidyr::extract(sid, into="Tissue Type", regex="^(\\w+\\s\\w+)\\s", remove=F, perl=T)

all(.sam$sid == colnames(fc.mat))
pca.dat <- get.pca.dat(t(fc.mat), .sam ) 

library(ggpubr)

vv <- pca.var(pca.dat$pca)
p <- ggscatter(pca.dat$dat, x="PC1", y="PC2", fill="source", palette = "jco",  col="black", legend.title="Tissue Type", shape=21) + labs(x=sprintf("PC1 (%3.1f%%)", vv[1]*100) , y=sprintf("PC2 (%3.1f%%)", vv[2]*100)) + border() + geom_vline(xintercept = 0, lty=2, alpha=0.3) +  geom_hline(yintercept = 0, lty=2, alpha=0.3) + stat_ellipse(aes(col=chf_etiology), lty=3, alpha=0.9) + coord_fixed() 

# + scale_fill_discrete(name = "Tissue Type",
#     breaks=c("HC", "ICM", "NICM"),
#     labels=c("NF", "ICM", "NICM"))

#ggpar(p, legend = "top", legend.title = "Tissue Type", legend.labels=1:3, font.legend = c(10, "bold")) 

# p + scale_fill_discrete(name = "Tissue Type",
    # breaks=c("HC", "ICM", "NICM"),
    # labels=c("NF", "ICM", "NICM"))

p2 <- facet(p, facet.by="source")
ggsave("graphs/PCA_plot_105.pdf", p, width=8, height=5)
ggsave("graphs/PCA_plot_105_facet.pdf", p2, width=12, height=5)
```

# plot the pca plot colored by 4 types HF,NF and Utah AND Inova
```{r}
load("cache/fc.mat.RData")
load("cache/sam_update.RData")

.sam <- sam_update[sam_update$pid != "10537", ] %>%  tidyr::extract(sid, into="TissueType", regex="^(\\w+\\s\\w+)\\s", remove=F, perl=T)

all(.sam$sid == colnames(fc.mat))
pca.dat <- get.pca.dat(t(fc.mat), .sam ) 

library(ggpubr)

vv <- pca.var(pca.dat$pca)
p <- ggscatter(pca.dat$dat, x="PC1", y="PC2", fill="TissueType", palette = "jco",  col="black", legend.title="Tissue Type", shape=21) + labs(x=sprintf("PC1 (%3.1f%%)", vv[1]*100) , y=sprintf("PC2 (%3.1f%%)", vv[2]*100)) + border() + geom_vline(xintercept = 0, lty=2, alpha=0.3) +  geom_hline(yintercept = 0, lty=2, alpha=0.3) + stat_ellipse(aes(col=sampletype), lty=2, alpha=0.9, 
show.legend=F) + coord_fixed() + scale_color_manual(values=c( "#EFC000FF", "#0073C2FF"))

# + scale_fill_discrete(name = "Tissue Type",
#     breaks=c("HC", "ICM", "NICM"),
#     labels=c("NF", "ICM", "NICM"))

#ggpar(p, legend = "top", legend.title = "Tissue Type", legend.labels=1:3, font.legend = c(10, "bold")) 

# p + scale_fill_discrete(name = "Tissue Type",
    # breaks=c("HC", "ICM", "NICM"),
    # labels=c("NF", "ICM", "NICM"))

ggsave("graphs/PCA_plot_105_4colors.pdf", p, width=8, height=5)
```

# DEGs and the genes for deconvolution
```{r}
load("cache/ml.real.RData")
load("cache/HF.comm3.RData")
marker.genes <- unlist(ml.real)
comm <- compare(marker.genes, HF.comm3 ) # [1] "NPPA"   "NPPB"   "COL1A1"

load("~/prj/general/hg19.ann.RData")
.d <- hg19.ann %>% filter(gene.name %in% HF.comm3)
```

---
title: "R Notebook"
output: html_notebook
---

```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath("..")) 

source("~/Rstat/my.util.r")
comm.libs <- c("plyr","tidyverse", "stringr", "ggplot2", "reshape2", "cowplot", "openxlsx")
lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)


#ggplot theme set
theme_set(theme_bw())
fontsize = 12L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))

```


# Load data
```{r}
load("cache/sam_update.RData")
load("cache/MEs.new.RData")
```


# Table 1

  * We can combine Asian / Pacific Islander into a single row.
  * For Year of LVAD I would breakdown by time period:
  2009-2012
  2013-2015
  * For INTERMACS Profiles, breakdown by 1, 2-3, 4-7
  * Let’s calculate BMI and include that as opposed to height, weight or BSA; also move to below sex
  * For MR, TR, AR (should be AI); let’s streamline to include None (remove = Normal), Mild, Moderate, and then combine Moderate-Severe, Mod-Severe and Severe into one group leaving a total of 4 groups.

## recode
```{r}
.s <- sam_update %>% mutate( race = ifelse(race %in% c("Asian", "Pacific Islander"), "Asian / Pacific Islander", race))
table(.s$race)

# lvad
table(.s$year_of_lvad, useNA="ifany")
.s <- .s %>% mutate(year_of_lvad2 = case_when(
  year_of_lvad %in% 2009:2012 ~ "2009-2012",
  year_of_lvad %in% 2013:2015 ~ "2013-2015",
  TRUE ~ NA_character_
))
table(.s$year_of_lvad2, useNA="ifany")

# For INTERMACS Profiles, breakdown by 1, 2-3, 4-7
table(.s$intermacs_profile, useNA="ifany")
.s <- .s %>% mutate(intermacs_profile2 = car::recode(intermacs_profile, "1=1; 2:3='2-3'; 4:7='4-7'"))
table(.s$intermacs_profile2, useNA="ifany")

#  Let’s calculate BMI and include that as opposed to height, weight or BSA; also move to below sex
.s <- .s %>% mutate(bmi = weight/(height/100)^2)
summary(.s$bmi)

# For MR, TR, AR (should be AI); let’s streamline to include None (remove = Normal), Mild, Moderate, and then combine Moderate-Severe, Mod-Severe and Severe into one group leaving a total of 4 groups.
table(.s$mr, useNA="ifany")
table(.s$tr, useNA="ifany")
table(.s$ar, useNA="ifany")
# recode does not work for "None=NOrmal"
# patterns <- "'None=Normal'='None'; c('Moderate-Severe', 'Mod-Severe')='Severe'"
# use mapvalues instead 
pat <- c('None=Normal'='None',  'Moderate-Severe' = 'Severe', 'Mod-Severe'='Severe')
.s <- .s %>% mutate_at(vars(mr,tr,ar), function(x) {
   x = revalue(x, pat)
   x = factor(x, levels=c("None","Mild", "Moderate", "Severe"))
})

table(.s$mr, useNA="ifany")
table(.s$tr, useNA="ifany")
table(.s$ar, useNA="ifany")

sam_recode <- .s 
ProjectTemplate::cache("sam_recode")
```


## summary
```{r}
library(tableone)

vars <- names(sam_recode)[c(7:52, 56:58)]

# remove the controls
dat <- sam_recode %>% filter(sample == "HF")

table1 <- CreateTableOne(vars = c(vars), strata = "source", data = dat, test = T)
## Show table with SMD
print(table1, smd = F)

tab1Mat <- print(table1, smd=F, quote = FALSE, noSpaces = TRUE, printToggle = FALSE)
## Save to a CSV file
write.csv(tab1Mat, file = "reports/Table1_update2.csv")
ProjectTemplate::cache("table1")


```

# Calculate the correlation
```{r}
ss <- sam_recode$pid != "10537"
.sam <- sam_recode[ss, ]
all(.sam$ID == row.names(MEs.new))


# compare to the last model: drop some covariats:
# keep age and gender
# from chf_etiology to gender.impute, drop study, use race, study and age as coviates; drop year_of_lvad
# .var <- names(.sam)[setdiff(9:56, c(10, 53:55))]
.var <- names(.sam)[setdiff(c(10:52, 56:58), c(13, 26:28))]

.f2 <- function(x, pred.df, out.df){
  .model <-  glue::glue("out.df${x$out} ~ pred.df${x$pred} + pred.df$age +  pred.df$study + pred.df$gender_impute")
  rv <- lm(as.formula(.model))
  out <- broom::tidy(rv)
  out$pred = x$pred
  out$out = x$out
  return(out)
}

source("lib/super_reg.R")

res.final <- super_reg(.sam, MEs.new[, c("MECls1", "MECls5", "MECls6", "MEmito", "myo", "leuko", "endo")], .f2, variables = .var)

# need to filter res and upate the pvalue
res_final.fil <- res.final %>% filter(  ! term %in% c("pred.df$studyUtah", "pred.df$age") )  %>% filter(! grepl("\\$gender", term))   %>% filter(! grepl("nicm_subtypeSarcoidosis", term) )%>% filter(adj.pval < 0.1)

dim(res_final.fil)
ProjectTemplate::cache("res_final.fil")
write.xlsx(file="reports/res_final_recode.fil.xlsx", res_final.fil)
```
```{r}
res_final.fil
```

## check those top hits
```{r}
.dat <- .sam %>% bind_cols(MEs.new) %>% mutate(chf_etiology = factor(chf_etiology, levels=c("HC", "ICM", "NICM") ))

library(ggpubr)

my_comparisons <- list( c("HC", "ICM"), c("HC", "NICM"), c("ICM", "NICM") )
p1 <- ggboxplot(.dat, x="chf_etiology", y="MECls1", col="chf_etiology", add="jitter",  palette = "jco", outlier.shape=NA) + stat_compare_means(comparisons = my_comparisons)

p2 <- ggboxplot(.dat, x="chf_etiology", y="MECls5", col="chf_etiology", add="jitter",  palette = "jco", outlier.shape=NA) + stat_compare_means(comparisons = my_comparisons)
p3 <- ggboxplot(.dat, x="chf_etiology", y="MECls6", col="chf_etiology", add="jitter",  palette = "jco", outlier.shape=NA) + stat_compare_means(comparisons = my_comparisons)
p4 <- ggboxplot(.dat, x="chf_etiology", y="MEmito", col="chf_etiology", add="jitter",  palette = "jco", outlier.shape=NA) + stat_compare_means(comparisons = my_comparisons)
p5 <- ggboxplot(.dat, x="chf_etiology", y="MEleuko", col="chf_etiology", add="jitter",  palette = "jco", outlier.shape=NA) + stat_compare_means(comparisons = my_comparisons )

# p5 has shown in the cell fraction
# change font size
l_ply(list(p1, p2, p3, p4), function(pp) pp$layers[[3]]$aes_params$textsize <- 3)

ggarrange(p1, p2, p3, p4,  labels = c("A", "B", "C", "D"),ncol = 2, nrow = 2, common.legend = TRUE, legend = "top")
ggsave("graphs/etiology.boxplot.pdf", width=7, height=8)



ggplot(.dat, aes(x=mr, y=MECls6, col=mr)) + geom_boxplot() + geom_jitter()


# mr vs cls6
.dat2 <- .dat   %>% filter(!is.na(mr)) 

cm <- compare_means(MECls6 ~ mr,  data = .dat2, ref.group = "None",method = "t.test")
ggboxplot(.dat2, x="mr", y="MECls6", col="mr", add="jitter",  palette = "jco", outlier.shape=NA) + stat_compare_means(label="p.signif", ref.group = "None",  method="t.test", hide.ns = TRUE) + geom_text(data=cm, aes(x=group2, y=0.18, label=p.signif))
ggsave("graphs/mr_cls6.boxplot.pdf", width=5, height=4)

# ggplot(.dat, aes(x=previous_thoracotomy, y=MECls6)) + geom_boxplot() + geom_jitter()
# ..d <- .dat %>% mutate( previous_thoracotomy = ifelse(is.na( previous_thoracotomy ), "HC", previous_thoracotomy))
..d <- .dat %>% filter(! is.na(previous_thoracotomy))
ggboxplot(..d, x="previous_thoracotomy", y="MECls6", col="previous_thoracotomy", add="jitter",  palette = "jco", outlier.shape=NA) + stat_compare_means(label="p.signif", ref.group = "No",  method="t.test", hide.ns = TRUE) 
ggsave("graphs/previous_thoracotomy_cls6.boxplot.pdf", width=5, height=4)

# +  stat_compare_means(comparisons = list(c("None", "Mild"), c("None", "Moderate"), c("None", "Severe")))
  
 
..d <- .dat %>% filter(! is.na(intermacs_profile2)) %>% mutate(intermacs_profile2 = factor(intermacs_profile2, levels=c("1", "2-3", "4-7")))
ip <- compare_means(myo ~ intermacs_profile2,  data = ..d, ref.group = "1",method = "t.test")
ggboxplot(..d, x="intermacs_profile2", y="myo", col="intermacs_profile2", add="jitter",  palette = "jco", outlier.shape=NA) + stat_compare_means(label="p.signif", ref.group = "1",  method="t.test", hide.ns = TRUE)+ geom_text(data=ip, aes(x=group2, y=1.05, label=p.signif))

ggsave("graphs/intermacs_profile2_myo.boxplot.pdf", width=5, height=4)



# ggplot(.dat, aes(x=tr, y=endo)) + geom_boxplot() + geom_jitter()

..d <- .dat %>% filter(! is.na(tr)) 
et <- compare_means(endo ~ tr,  data = .dat, ref.group = "None",method = "t.test")
ggboxplot(..d, x="tr", y="endo", col="tr", add="jitter",  palette = "jco", outlier.shape=NA) + 
  # stat_compare_means(label="p.signif", ref.group = "None",  method="t.test", hide.ns = TRUE)+ 
  geom_text(data=et, aes(x=group2, y=0.15, label=p.signif))

ggsave("graphs/tr_endo.pdf", width=5, height=4)



```

# check the cell fractions
```{r}
load("cache/MEs.new.RData")
load("cache/sam_update.RData")

.sam <- sam_update[sam_update$pid != "10537", ]
sam179 <- .sam
ProjectTemplate::cache("sam179")

all(sam179$id == rownames(MEs.new))

.d <- sam179 %>% bind_cols(MEs.new) %>% group_by(sampletype) %>% summarise_at(vars(myo:endo), mean)

# # A tibble: 2 x 5
#   sampletype       myo      fibro       leuko       endo
#        <chr>     <dbl>      <dbl>       <dbl>      <dbl>
# 1      DONOR 0.8417154 0.09311332 0.006742891 0.05842840
# 2         HF 0.8062237 0.11848503 0.006623618 0.06866762
```

---
title: "R Notebook"
output: html_notebook
---

```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath("..")) 

source("~/Rstat/my.util.r")
comm.libs <- c("plyr","tidyverse", "stringr", "ggplot2", "reshape2", "cowplot", "openxlsx")
tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)


#ggplot theme set
theme_set(theme_bw())
fontsize = 12L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))

```


# Load data
```{r}
load("cache/sam_recode.RData")
load("cache/MEs.new.RData")
```

# check the heart dimension size lvedd/bsa, HF duration, MR, images profiles
```{r}
ss <- sam_update$pid != "10537"
.sam <- sam_recode[ss, ]
all(.sam$ID == row.names(MEs.new))

.dat <- .sam %>% bind_cols(MEs.new) %>% mutate(chf_etiology = factor(chf_etiology, levels=c("HC", "ICM", "NICM") ))

sig_clin.dat <- .dat
ProjectTemplate::cache("sig_clin.dat")
  
```

```{r}
library(GGally)
.dat <- sig_clin.dat %>% filter(sample != "DONOR") %>% mutate(lvedd.adj = lvedd/bsa) %>%  select(MECls1, MECls2, MECls6, MEmito, myo, hf_duration_months, lvef, lvedd, lvedd.adj, mr, intermacs_profile2)

ggpairs(.dat, alpha=0.7, columnLabels = c("Cluster 1", "Cluster 2",  "Cluster 6",  "Mito", "Cardiomyocytes", "Duration", "EF", "LVEDD", "LVEDD/BSA", "MR", "Intermacs Profile"))
ggsave("graphs/more_pairs_extra.pdf", width=25, height=25)
```

# boxplot of the fractions NF vs HF
```{r}
library(ggpubr)
load("cache/sig_clin.dat.RData")
.dd <- sig_clin.dat %>% mutate(Type = car::recode(sample, " 'DONOR' = 'NF' "))

p1 <- ggviolin(.dd, x="Type", y="myo", add="dotplot", color="Type", outlier.shape = NA, # label = "sid", label.select = list(criteria = ' myo < 0.65'), repel=T,
                alpha=0.7, add.params = list(size = 0.5), linetype=1 ) + 
  # geom_hline(yintercept = 0.65, linetype=2, col="gray") + 
  stat_compare_means( method="t.test", label.y=1.1) + labs(x="", y="Cardiomyocytes") 

p2 <- ggviolin(.dd, x="Type", y="fibro", add="dotplot", color="Type", outlier.shape = NA, # label = "sid",  label.select = list(criteria = ' fibro >0.2'), 
repel=T, alpha=0.7, add.params = list(size = 0.5), linetype=1 ) + # geom_hline(yintercept = 0.2, linetype=2, col="gray") + 
stat_compare_means( method="t.test", label.y=0.55) + labs(x="", y="Fibroblasts") 

# p2 <- ggboxplot(.dd, x="type", y="fibro", add="dotplot", color="chf_etiology", outlier.shape = N
# A, label = "sid", label.select = list(criteria = ' fibro > 0.2'), repel=T, size=0.5, alpha=0.7) + geom
# _hline(yintercept = 0.2, lty=2, col="gray")

p3 <-ggviolin(.dd, x="Type", y="leuko", add="dotplot", color="Type", outlier.shape = NA, 
              # label = "sid", label.select = list(criteria = ' leuko > 0.02'), 
              repel=T, size=0.5, add.params = list(size = 0.5), alpha=0.7) +
# geom_hline(yintercept = 0.02, lty=2, col="gray")
 stat_compare_means( method="t.test", label.y=0.07) + labs(x="", y="Leukocytes") 

# p3 <-ggboxplot(s, x="chf_etiology", y="leuko", add="dotplot", color="chf_etiology", outlier.shape = NA
# , label = "sid", label.select = list(criteria = ' leuko > 0.02'), repel=T, size=0.5, alpha=0.7)+ geom_
# hline(yintercept = 0.02, lty=2, col="gray")

p4 <-ggviolin(.dd, x="Type", y="endo", add="dotplot", color="Type", outlier.shape = NA,
# label = "sid", label.select = list(criteria = ' endo > 0.15'), 
repel=T, size=0.5, add.params = list(size = 0.5), alpha=0.7)+ 
  # geom_hline(yintercept = 0.15, lty=2, col="gray")
 stat_compare_means( method="t.test", label.y=0.25) + labs(x="", y="Endothelial Cells") 


# p4 <-ggboxplot(s, x="chf_etiology", y="endo", add="dotplot", color="chf_etiology", outlier.shape = NA,
#  label = "sid", label.select = list(criteria = ' endo > 0.15'), repel=T, size=0.5, alpha=0.7)+ geom_hl
# ine(yintercept = 0.15, lty=2, col="gray")

p1 <- ggpar(p1, legend.title = "Tissue Type", font.legend = c(10, "bold", "black"))

ggarrange(p1, p2, p3, p4,  labels = c("A", "B", "C", "D"),ncol = 2, nrow = 2, common.legend = TRUE, legend = "bottom")
ggsave("graphs/fraction.boxplot_new1.pdf", width=7, height=7)
```

# Tables of the DEGs and top N of for ICM vs NICM
```{r}
# categorize genes
.g <- readLines("data/gene_types.txt")
.g2 <- data.frame(line=.g) %>% tidyr::separate(line, c("gene_class", "gene_type"), sep = "\\s{4}") %>% mutate(gene_class = ifelse(gene_class =="", NA, gene_class)) %>% mutate(gene_class=zoo::na.locf(gene_class)) 

gene_class <- .g2$gene_class
names(gene_class) <- .g2$gene_type
ProjectTemplate::cache("gene_class")
```
# Load the DEGs
```{r}
load("cache/gene_class.RData")
.i <- read.xlsx("reports/inova_degs.all.xlsx", sheet="HF") %>% filter(abs(logFC) > 1 & adj.P.Val < 0.05)
.u <- read.xlsx("reports/utah_degs.all.xlsx", sheet="HF") %>% filter(abs(logFC) > 1 & adj.P.Val < 0.05)

comm <- intersect(.i$gene.name, .u$gene.name)

.i2 <- .i %>% filter(gene.name %in% comm) %>% dplyr::rename(FDR = adj.P.Val) %>% dplyr::select(gene.name, logFC, AveExpr, FDR)
.u2 <- .u %>% filter(gene.name %in% comm) %>% dplyr::rename(FDR = adj.P.Val) %>% dplyr::select(gene.name, logFC, AveExpr, FDR)
both.deg.dat <- .i2 %>% inner_join(.u2, by="gene.name", suffix=c("_Inova", "_Utah"))

# add gene names
library(org.Hs.eg.db)
.z <- select(org.Hs.eg.db, both.deg.dat$gene.name, c("SYMBOL", "ENTREZID","GENENAME"), "SYMBOL")

# load gencode annotaiton
load("~/prj/general/hg19.ann.RData")
load("cache/cluster6.lst.RData")
names(cluster6.lst) <- paste0("Cluster ", 1:6)

.g <- Biobase::reverseSplit( cluster6.lst) %>% unlist

both.deg.dat2 <- both.deg.dat %>% left_join(hg19.ann[, c("ref", "gene.name", "gene_type")]) %>% left_join(.z, by=c("gene.name"="SYMBOL")) %>% mutate(gene_class=gene_class[gene_type]) %>% mutate(Cluster=.g[gene.name]) %>% dplyr::rename("Gene Symbol" = gene.name, "chr"="ref" ) %>% arrange(Cluster, `Gene Symbol`)

deg105.table.dat <- both.deg.dat2
ProjectTemplate::cache("deg105.table.dat")

write.xlsx(deg105.table.dat, "reports/deg105.table.xlsx")

# cor
cor.test(deg105.table.dat$logFC_Inova, deg105.table.dat$logFC_Utah)

```

# make the top N table for ICM vs NICM
```{r}
in.i<- read.xlsx("reports/inova_degs.all.xlsx", sheet="ICM_NICM") %>% filter(P.Value < 0.1 & abs(logFC) > 0.5 & row_number() <= 100) %>% mutate(gene_class=gene_class[gene_type]) %>% arrange(P.Value)
in.u <- read.xlsx("reports/utah_degs.all.xlsx", sheet="ICM_NICM") %>% filter(P.Value < 0.1 & abs(logFC) > 0.5 & row_number() <= 100) %>% mutate(gene_class=gene_class[gene_type]) %>% arrange(P.Value)

write.xlsx(list(Inova=in.i, Utah=in.u), "reports/ICM_vs_NICM.top100.xlsx")
```

---
title: "R Notebook"
output: html_notebook
---

```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath("..")) 

source("~/Rstat/my.util.r")
comm.libs <- c("plyr","tidyverse", "stringr", "ggplot2", "reshape2", "cowplot", "openxlsx")
tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)


#ggplot theme set
theme_set(theme_bw())
fontsize = 12L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))

```


# PCA before the batch effect
```{r}
load("cache/dge.expr.RData")
dim(dge.expr)

load("cache/sam_update.RData")
.dge <- dge.expr[, sam_update$id]
dim(.dge)


.dge <- calcNormFactors(.dge)
.cpm <- cpm(.dge, log=T)
.pca.dat <- get.pca.dat(t(.cpm), sam_update)

plot.pca.dat <- function(.pca.dat, col="study", ellipse=F){
  require(ggsci)
  require(ggplot2)
  #library(ggpubr)
  vv <- pca.var(.pca.dat$pca)
  g <- ggplot(.pca.dat$dat, aes_string("PC1", "PC2", fill=col)) + geom_point(pch=21, size=2, alpha=0.8) + labs(x=sprintf("PC1 (%3.1f%%)", vv[1]*100) , y=sprintf("PC2 (%3.1f%%)", vv[2]*100)) +  geom_vline(xintercept = 0, lty=2, alpha=0.3) +  geom_hline(yintercept = 0, lty=2, alpha=0.3) + coord_fixed() +  scale_fill_jco() + ggplot2::theme(plot.margin=unit(c(1,1,1,1),"line"), panel.background = element_blank(),panel.border=element_rect(fill=NA),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),strip.background=element_blank())
  
  if(ellipse){
    p <- p + stat_ellipse( lty=3, alpha=0.9) 
  }
  return(g)
}

z <- plot.pca.dat(.pca.dat) + geom_label(data=subset(.pca.dat$dat, PC2>150), aes(label=sid, adj=-0.1), show.legend = FALSE)
ggsave("graphs/pca_with_batch_label_outlier.pdf", width=6, height=5)
```
# pca for ICM vs NICM

```{r}
load("cache/fc.mat.RData")

.sam <- sam_update[sam_update$pid != "10537", ]
all(.sam$sid == colnames(fc.mat))
hf.only <- .sam$chf_etiology != "HC"
pca.dat <- get.pca.dat(t(fc.mat[, hf.only]), .sam[hf.only,]  )
# library(ggpubr)

plot.pca.dat(pca.dat, col="chf_etiology") + facet_wrap(~source)
 

ggsave("graphs/PCA_plot_icm_nicm.pdf", width=10, height=5)
```

# HBA1, HBA2 and HBB
```{r}
all(colnames(.cpm) == sam_update$id)

.tmp <- t(.cpm[c("HBA1", "HBA2", "HBB", "GAPDH"),]) %>% as.data.frame

.d <- sam_update %>% bind_cols(.tmp) %>% melt(measure.vars =c("HBA1", "HBA2", "HBB", "GAPDH"), variable.name="Gene", value.name="CPM") %>% mutate(Type = car::recode(sample, " 'DONOR' = 'NF' "))

# .d$HBB <- as.numeric(rpkm.flt2[hbb.ind, ])
# .d$HBA1 <- as.numeric(rpkm.flt2[ann$gene.name == "HBA1", ])
# .d$GAPDH <- as.numeric(rpkm.flt2[ann$gene.name == "GAPDH", ])
# .d$B2M <- as.numeric(rpkm.flt2[ann$gene.name == "B2M", ])


library(ggpubr)
ggboxplot(.d, x="source", y="CPM", add="jitter", col="Type", palette = "jco", facet.by = "Gene", ncol=2, add.params = list(alpha=0.3), outlier.shape = NA) + geom_hline(yintercept = 0, lty=2, col="gray") + labs(x="Site", y="Log2 CPM")

ggsave("graphs/HBB_boxplots.pdf", height=7, width=7)
```

---
title: "R Notebook"
output: html_notebook
---

```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath("..")) 

source("~/Rstat/my.util.r")
comm.libs <- c("plyr","tidyverse", "stringr", "ggplot2", "reshape2", "cowplot", "openxlsx")
tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)


#ggplot theme set
theme_set(theme_bw())
fontsize = 12L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))

```

# 
```{r}
library(Rsubread)

fls <- dir("~/107/rsem2/", pattern="*genome.sorted.bam$", full=T)
fc <- Rsubread::featureCounts(files=fls[1:3], annot.inbuilt="hg19", isPairedEnd=T, requireBothEndsMapped=T, nthreads = 20, strandSpecific = 2)
```

---
title: "R Notebook"
output: html_notebook
---

```{r setup, include=F, results='hide', message=FALSE, warning=FALSE}
knitr::opts_knit$set(root.dir = normalizePath("..")) 

source("~/Rstat/my.util.r")
comm.libs <- c("plyr","tidyverse", "stringr", "ggplot2", "reshape2", "cowplot", "openxlsx")
tmp <- lapply(comm.libs, require, character.only = TRUE)

set.seed(17)
default.par <- par(no.readonly = TRUE)
options(stringsAsFactors = FALSE)


#ggplot theme set
theme_set(theme_bw())
fontsize = 12L
theme_update(axis.title.x = element_text(size=fontsize))
theme_update(axis.title.y = element_text(size=fontsize))
theme_update(plot.title = element_text(size=fontsize+2))

```

# Load GTEx data
```{r}
gtex.tissue <- read.delim("~/bighome/data/GTEx/GTEx_Analysis_2016-01-15_v7_RNASeQCv1.1.8_gene_median_tpm.gct", header=T, skip=2) %>% janitor::clean_names()

ProjectTemplate::cache("gtex.tissue")

```

```{r}
load("cache/HF.comm3.RData")
.dat <- gtex.tissue %>% dplyr::filter(description %in% HF.comm3)
dim(.dat)
.dd <- .dat %>% gather(key="Tissue", value="TPM", -gene_id, -description)

ggplot(.dd , aes(x=Tissue, y=TPM, fill=Tissue)) + geom_col() + facet_grid(description ~ ., scale="free_y") + theme(axis.text.x=element_text(angle=90, hjust=1), legend.position = "bottom") 
ggsave("graphs/gtex_tpm.pdf", height=49.9, width=10)

openxlsx::write.xlsx(list(GTEx_TPM=.dat), "reports/GTEx_TPM.xlsx")
```
```{r}
.d2 <- .dat[, -(1:2)]
row.names(.d2) <- .dat$description
.mat_scaled <- apply(.d2, 1, scale) %>% t
colnames(.mat_scaled) <- names(.d2)
library(ComplexHeatmap)
Heatmap(.mat_scaled, column_names_max_height=unit(90, "mm"))
dev.copy2pdf(file="graphs/tissue_heatmap.pdf", height=20, width=10)
```

---
title: "parentOfOriginAnalysis"
output: word_document
---
calculate the proportion phased by ethnicity
```{r propPhased}
setwd("/Users/wendy/work/denovo/denovos.parentalorigin/denovos.radboud.filtered.filteredByCallableRegions//")
admix<-read.delim("../admix.txt", header=T, sep="\t", as.is=T)
allDenovos<-read.delim("allDenovos.withPredictedDNM.withParentOfOrigin.filtered.filteredByCallableRegions.txt", header=T, sep="\t", as.is=T)
allDenovos<-subset(allDenovos, nchar(Reference)==1 & nchar(Variant)==1,  select=c(pos, Chromosome, Start.position, End.position,probandID,parentOfOrigin))
countsBySample.total<-table(allDenovos$probandID)
countsBySample.phased<-table(allDenovos$probandID[which(!is.na(allDenovos$parentOfOrigin))])
propPhased<-data.frame(propPhased=countsBySample.phased/countsBySample.total, probandID=names(countsBySample.total))
propPhased.withAdmix<-merge(propPhased, admix, by.x="probandID", by.y="SAMPLE")                      
length(which(propPhased.withAdmix$EUR<0.5 & propPhased.withAdmix$ASA<0.5 & propPhased.withAdmix$AFA<0.5 & propPhased.withAdmix$AMERICAS<0.5))
summary(propPhased.withAdmix$propPhased.Freq[which(propPhased.withAdmix$EUR>0.5)])
summary(propPhased.withAdmix$propPhased.Freq[which(propPhased.withAdmix$AFA>0.5)])

t.test(summary(propPhased.withAdmix$propPhased.Freq[which(propPhased.withAdmix$EUR>0.5)]),propPhased.withAdmix$propPhased.Freq[which(propPhased.withAdmix$AFA>0.5)])

propPhased.withAdmix$Ancestry<-"others"
propPhased.withAdmix$Ancestry[which(propPhased.withAdmix$EUR>0.5)]<-"European"
propPhased.withAdmix$Ancestry[which(propPhased.withAdmix$ASA>0.5)]<-"Asian"
propPhased.withAdmix$Ancestry[which(propPhased.withAdmix$AFA>0.5)]<-"African"
propPhased.withAdmix$Ancestry[which(propPhased.withAdmix$AMERICAS>0.5)]<-"America"
propPhased.withAdmix$Ancestry<-as.factor(propPhased.withAdmix$Ancestry)

ggplot(propPhased.withAdmix[,c(1,3,8)], aes(x=Ancestry, y=propPhased.Freq, fill=Ancestry))+geom_violin()+ guides(fill = guide_legend(override.aes = list(colour = NULL)))+ theme(legend.position="top", legend.text=element_text(size=20)) +geom_boxplot(width = 0.2)+ylab("Proportion of DNMs phased")+theme(axis.title.x=element_blank(),legend.text=element_text(size=20),axis.text = element_text(size = 15))+ guides(fill=FALSE)+theme_classic()
ggsave("../figures/propPhasedByAncestry.pdf", scale=2)


```

calculate the proportion and mean ratio between maternal and paternal
```{r ratioParental, eval=FALSE}
setwd("/Users/wendy/work/denovo/denovos.parentalorigin/denovos.radboud.filtered.filteredByCallableRegions//")
maternalOrigin<-read.delim("SNVs.MaternalOriginOnly.filtered.filteredByCallableBases.txt", header=T, sep="\t")
paternalOrigin<-read.delim("SNVs.PaternalOriginOnly.filtered.filteredByCallableBases.txt", header=T, sep="\t")
parentsAgeATConception<-read.delim("parentsAgeAtConception.filtered.tab", header=T, sep="\t")
maternalOrigin$probandID <- factor(maternalOrigin$probandID, levels = unique(parentsAgeATConception$Proband.Study.ID))
paternalOrigin$probandID <- factor(paternalOrigin$probandID, levels = unique(parentsAgeATConception$Proband.Study.ID))
countsBySample.maternal<-table(maternalOrigin$probandID)
numDenovoWithAge.maternal<-parentsAgeATConception[match(names(countsBySample.maternal),parentsAgeATConception$Proband.Study.ID),]
numDenovoWithAge.maternal$numDenovo<-countsBySample.maternal
numDenovoWithAge.maternal$numDenovo<-as.numeric(numDenovoWithAge.maternal$numDenovo)
countsBySample.paternal<-table(paternalOrigin$probandID)
numDenovoWithAge.paternal<-parentsAgeATConception[match(names(countsBySample.paternal),parentsAgeATConception$Proband.Study.ID),]
numDenovoWithAge.paternal$numDenovo<-countsBySample.paternal
numDenovoWithAge.paternal$numDenovo<-as.numeric(numDenovoWithAge.paternal$numDenovo)

numDenovoWithAge.parents<-merge(numDenovoWithAge.paternal, numDenovoWithAge.maternal, by="Proband.Study.ID")
#prop<-numDenovoWithAge.parents$numDenovo.y[which(numDenovoWithAge.parents$numDenovo.x>0)]/numDenovoWithAge.parents$numDenovo.x[which(numDenovoWithAge.parents$numDenovo.x>0)]
prop<-numDenovoWithAge.parents$numDenovo.x[which(numDenovoWithAge.parents$numDenovo.y>0 & numDenovoWithAge.parents$numDenovo.x>0)]/numDenovoWithAge.parents$numDenovo.y[which(numDenovoWithAge.parents$numDenovo.y>0 & numDenovoWithAge.parents$numDenovo.x>0)]
t.test(prop)
length(prop)
median(prop)
#png(filename = "../figures/paternal-maternalRatioHistogram.png", width = 1800, height = 1500, res=150)
qplot(prop, geom="histogram") + xlab("paternal-maternal ratio") + theme_classic()
ggsave("../figures/paternal-maternalRatioHistogram.pdf")
#dev.off()
```

a)  Scatter plots of number of normalized DNMs of paternal origin versus father’s age (in years). The red line represent the linear fit to the data whereas the grey area represents the 95% confidence interval of the fit.  We calculated the proportion of DNMs we are able to phase for each proband, and normalize the phased DNMs by this factor. 
b)	 maternal
```{r mutationRateWithAge, eval=FALSE}
library(ggplot2)
setwd("/Users/wendy/work/denovo/denovos.parentalorigin/denovos.radboud.filtered.filteredByCallableRegions/")
maternalOrigin<-read.delim("SNVs.MaternalOriginOnly.filtered.filteredByCallableBases.txt", header=T, sep="\t")
paternalOrigin<-read.delim("SNVs.PaternalOriginOnly.filtered.filteredByCallableBases.txt", header=T, sep="\t")
allSubs<-read.delim("substitutions.filtered.annotated.filteredByCallableRegions.bed", header=T, sep="\t")
parentsAgeATConception<-read.delim("parentsAgeAtConception.filtered.tab", header=T, sep="\t")

maternalOrigin$probandID <- factor(maternalOrigin$probandID, levels = unique(paternalOrigin$probandID))
countsBySample.maternal<-table(maternalOrigin$probandID)
numDenovoWithAge.maternal<-parentsAgeATConception[match(names(countsBySample.maternal),parentsAgeATConception$Proband.Study.ID),]
numDenovoWithAge.maternal$numDenovo<-countsBySample.maternal
numDenovoWithAge.maternal$numDenovo<-as.numeric(numDenovoWithAge.maternal$numDenovo)
countsBySample.paternal<-table(paternalOrigin$probandID)
numDenovoWithAge.paternal<-parentsAgeATConception[match(names(countsBySample.paternal),parentsAgeATConception$Proband.Study.ID),]
numDenovoWithAge.paternal$numDenovo<-countsBySample.paternal
numDenovoWithAge.paternal$numDenovo<-as.numeric(numDenovoWithAge.paternal$numDenovo)

countsBySample.all<-table(allSubs$HET_samples)
countsBySample.all<-data.frame(Proband.Study.ID=names(countsBySample.all),totalDNM=as.numeric(countsBySample.all))
countsBySample.all<-merge(countsBySample.all, subset(numDenovoWithAge.maternal, select=c(Proband.Study.ID,numDenovo)), by="Proband.Study.ID")
countsBySample.all<-merge(countsBySample.all, subset(numDenovoWithAge.paternal, select=c(Proband.Study.ID,numDenovo)), by="Proband.Study.ID")
colnames(countsBySample.all)<-c("Proband.Study.ID", "totalDNM", "numDenovo.maternal", "numDenovo.paternal")
countsBySample.all$propPhased<-(countsBySample.all$numDenovo.maternal+countsBySample.all$numDenovo.paternal)/countsBySample.all$totalDNM
countsBySample.all<-merge(countsBySample.all, parentsAgeATConception, by="Proband.Study.ID")
countsBySample.all$numDenovo.maternal.normalized<-countsBySample.all$numDenovo.maternal/countsBySample.all$propPhased
countsBySample.all$numDenovo.paternal.normalized<-countsBySample.all$numDenovo.paternal/countsBySample.all$propPhased




#unnormalized
summary(lm(numDenovo~fathersAgeAtConceptionInYears,numDenovoWithAge.paternal))
summary(lm(numDenovo~mothersAgeAtConceptionInYears,numDenovoWithAge.maternal))


summary(lm(numDenovo.paternal~fathersAgeAtConceptionInYears,countsBySample.all))
confint(lm(numDenovo.paternal~fathersAgeAtConceptionInYears,countsBySample.all))
summary(lm(numDenovo.maternal~mothersAgeAtConceptionInYears,countsBySample.all))
confint(lm(numDenovo.maternal~mothersAgeAtConceptionInYears,countsBySample.all))


p.mother.raw<-ggplot(countsBySample.all,aes(x=mothersAgeAtConceptionInYears,y=numDenovo.maternal))+geom_point()+geom_smooth(method='lm', color="red")+ylab("Number of de novo mutations from the mother") + xlab("Age of the mother") + theme_bw()+theme(axis.text=element_text(size=12))+
annotate('text', x = 22, y = 20, label = "italic(R)^{2}==0.03 ",parse = TRUE,size=5) +
annotate('text', x = 22, y = 19, label = "italic(P)==3.36%*%10^{-6} ",parse = TRUE,size=5) +
theme_classic()


p.father.raw<-ggplot(countsBySample.all,aes(x=fathersAgeAtConceptionInYears,y=numDenovo.paternal))+geom_point()+geom_smooth(method='lm', color="blue")+ylab("Number of de novo mutations from the father") + xlab("Age of the father")+ theme_bw() + theme(axis.text=element_text(size=12))+
annotate('text', x = 22, y = 20, label = "italic(R)^{2}==0.13",parse = TRUE,size=5, hjust=0) +
annotate('text', x = 22, y = 19, label = "italic(P) < 2%*%10^{-16} ",parse = TRUE,size=5, hjust=0) +theme_classic()

p.regression.raw<-plot_grid(p.father.raw, p.mother.raw,nrow=1,labels=c("a","b"), align="v", label_size=15 )
save_plot( "../figures/regressionObservedPhasedDNM.pdf", p.regression.raw,scale=2)

#normalized
summary(lm(numDenovo.maternal.normalized~mothersAgeAtConceptionInYears+Mode.of.Pregnancy,countsBySample.all))
summary(lm(numDenovo.maternal.normalized~mothersAgeAtConceptionInYears,countsBySample.all))
confint(lm(numDenovo.maternal.normalized~mothersAgeAtConceptionInYears,countsBySample.all))


data2.labels <- data.frame(
  numDNM = 31, 
  age = 20, 
  label = "R^{2}=0.03"
  )
ggplot(countsBySample.all,aes(x=mothersAgeAtConceptionInYears,y=numDenovo.maternal.normalized))+geom_point()+geom_smooth(method='lm', color="red")+ylab("Number of de novo mutations from the mother") + xlab("Age of the mother") + theme_bw()+theme(axis.text=element_text(size=12))
#+annotate('text', x = 22, y = 35, label = "R^{2}==0.03 ",parse = TRUE,size=7) 

ggsave("../figures/numDenovosMothersAge.png")
ggsave("../figures/numDenovosMothersAge.svg")


summary(lm(numDenovo.paternal.normalized~fathersAgeAtConceptionInYears+Mode.of.Pregnancy,countsBySample.all))
summary(lm(numDenovo.paternal.normalized~fathersAgeAtConceptionInYears,countsBySample.all))
confint(lm(numDenovo.paternal.normalized~fathersAgeAtConceptionInYears,countsBySample.all))

ggplot(countsBySample.all,aes(x=fathersAgeAtConceptionInYears,y=numDenovo.paternal.normalized))+geom_point()+geom_smooth(method='lm', color="blue")+ylab("Number of de novo mutations from the father") + xlab("Age of the father")+ theme_bw() + theme(axis.text=element_text(size=12))
#+annotate('text', x = 25, y = 72, label = "R^{2}==0.25 ",parse = TRUE,size=7) 
ggsave("../figures/numDenovosFathersAge.png")
ggsave("../figures/numDenovosFathersAge.svg")
```

Using bootstrap to estimate the regression parameters
```{r bootstrap}
set.seed(17)

bootMaternalAge <- function() {
    thisboot <- sample(1:nrow(countsBySample.all), nrow(countsBySample.all), TRUE)
    coef(lm(numDenovo.maternal.normalized~mothersAgeAtConceptionInYears, data = countsBySample.all[thisboot, ]))
}
bootcoefs.maternal <- replicate(10000, bootMaternalAge())

se.maternal=sd(bootcoefs.maternal[2,])
mean.maternal=mean(bootcoefs.maternal[2,])
mean.maternal
mean.maternal+c(-1,1)*2*se.maternal

for (i in 1:2) {
  se.maternal=sd(bootcoefs.maternal[i,])
  mean.maternal=mean(bootcoefs.maternal[i,])
  print(se.maternal)
  print(mean.maternal)
  print(mean.maternal+c(-1,1)*2*se.maternal)
}
coef(lm(numDenovo.maternal.normalized~mothersAgeAtConceptionInYears, data = countsBySample.all))
bias.intercept=1.9201204-1.896931
bias.slope=0.2439312-0.2446821

bootPaternalAge <- function() {
    thisboot <- sample(1:nrow(countsBySample.all), nrow(countsBySample.all), TRUE)
    coef(lm(numDenovo.paternal.normalized~fathersAgeAtConceptionInYears, data = countsBySample.all[thisboot, ]))
}
bootcoefs.paternal <- replicate(10000, bootPaternalAge())

for (i in 1:2) {
  se.paternal=sd(bootcoefs.paternal[i,])
  mean.paternal=mean(bootcoefs.paternal[i,])
  print(se.paternal)
  print(mean.paternal)
  print(mean.paternal+c(-1,1)*2*se.paternal)
}
coef(lm(numDenovo.paternal.normalized~fathersAgeAtConceptionInYears, data = countsBySample.all))
bias.intercept=3.4752155-3.483158
bias.slope=0.9144191-0.9141053

svg("../figures/numDenovosFathersAge.bootstrap.svg")
plot(countsBySample.all$numDenovo.paternal.normalized ~ countsBySample.all$fathersAgeAtConceptionInYears, col = "gray", pch=20, xlab="Age of the father", ylab="Number of de novo mutations from the father", bty = "l")
apply(bootcoefs.paternal, 2, abline, lwd=0.8, col = rgb(0, 0, 1, 0.01))
dev.off()


svg("../figures/numDenovosMothersAge.bootstrap.svg")
plot(countsBySample.all$numDenovo.maternal.normalized ~ countsBySample.all$mothersAgeAtConceptionInYears,  col = "gray", pch=20, xlab="Age of the mother", ylab="Number of de novo mutations from the mother", bty = "l")
apply(bootcoefs.maternal, 2, abline, lwd=0.8, col = rgb(1, 0, 0, 0.01))
dev.off()





```

```{r generalRates, eval=FALSE}
library(permute)

parentOfOrigin.orig<-read.delim("/Users/wendy/work/denovo/radboud/allDenovos.withPredictedDNM.withParentOfOrigin.txt", header=T, "\t", as.is=T)
parentOfOrigin.orig<-subset(parentOfOrigin.orig, !is.na(parentOfOrigin.orig$parentOfOrigin) & parentOfOrigin.orig$is.Denovo=="TRUE" & parentOfOrigin.orig$Chromosome!="chrX")
parentOfOrigin.SNVs<-parentOfOrigin.orig[which(nchar(parentOfOrigin.orig$Reference)==1),]

#which(nchar(parentOfOrigin$Reference)!=nchar(parentOfOrigin$Variant))
getMutationTable(parentOfOrigin.SNVs)


pvalForTsTvPermuted<-rep(-1,1000)
pvalForAllSubstitutionsPermuted<-rep(-1,1000)

for (i in 1:1000) {

  parentOfOrigin.shuffled<-parentOfOrigin.SNVs
  parentOfOrigin.shuffled$parentOfOrigin<-parentOfOrigin.SNVs$parentOfOrigin[shuffle(nrow(parentOfOrigin.SNVs))]
  test.results<-getMutationTable(parentOfOrigin.shuffled)
  
  pvalForAllSubstitutionsPermuted[i]<-test.result[[1]]$p.value
  pvalForTsTvPermuted[i]<-test.result[[2]]$p.value
  
}

hist(pvalForAllSubstitutionsPermuted)
length(which(pvalForAllSubstitutionsPermuted<=0.006165))/1000

hist(pvalForTsTvPermuted)
length(which(pvalForTsTvPermuted<=0.0213))/1000


getMutationTable<-function(parentOfOrigin.input) {
  
  mutationsByType.Father<-parentOfOrigin.input[which(parentOfOrigin.input$parentOfOrigin=="father"),c("Reference", "Variant")]
  mutationsByType.Mother<-parentOfOrigin.input[which(parentOfOrigin.input$parentOfOrigin=="mother"),c("Reference", "Variant")]
  
  mutationsByTypeTable.Father<-table(mutationsByType.Father)
  mutationsByTypeTable.Mother<-table(mutationsByType.Mother)
  
  #all mutations
  #as.vector(mutationsByTypeTable.Father)
  #as.vector(mutationsByTypeTable.Mother)
  mutationsByTableMotherAndFather<-as.table(rbind(as.vector(mutationsByTypeTable.Father),as.vector(mutationsByTypeTable.Mother)))
  dimnames(mutationsByTableMotherAndFather)<-list(parent=c("Father", "Mother"),
                                                  substitution=c("AA","CA","GA","TA", "AC","CC","GC","TC",
                                                                 "AG","CG","GG", "TG", "AT", "CT","GT","TT"))
  mutationsByTableMotherAndFather<-mutationsByTableMotherAndFather[,-c(1,6,11,16)]
  chisq.test.all<-chisq.test(mutationsByTableMotherAndFather)
  
  
  #Ts/Tv
  #print(mutationsByTypeTable.Father)
  all.transitions.Father<-mutationsByTypeTable.Father[1,3]+mutationsByTypeTable.Father[3,1]+mutationsByTypeTable.Father[2,4]+mutationsByTypeTable.Father[4,2]
  all.transversion.Father<-mutationsByTypeTable.Father[1,2]+mutationsByTypeTable.Father[1,4]+mutationsByTypeTable.Father[2,1]+mutationsByTypeTable.Father[2,3]+mutationsByTypeTable.Father[3,2]+mutationsByTypeTable.Father[3,4]+mutationsByTypeTable.Father[4,1]+mutationsByTypeTable.Father[4,3]
  #print(mutationsByTypeTable)
  all.transitions.Mother<-mutationsByTypeTable.Mother[1,3]+mutationsByTypeTable.Mother[3,1]+mutationsByTypeTable.Mother[2,4]+mutationsByTypeTable.Mother[4,2]
  all.transversion.Mother<-mutationsByTypeTable.Mother[1,2]+mutationsByTypeTable.Mother[1,4]+mutationsByTypeTable.Mother[2,1]+mutationsByTypeTable.Mother[2,3]+mutationsByTypeTable.Mother[3,2]+mutationsByTypeTable.Mother[3,4]+mutationsByTypeTable.Mother[4,1]+mutationsByTypeTable.Mother[4,3]
  
  fisher.test.tstv<-fisher.test(matrix(c(all.transitions.Father, all.transversion.Father, all.transitions.Mother, all.transversion.Mother), nrow=2), conf.level=0.95 )
  return(list(chisq.test.all, fisher.test.tstv))
}


```

```{r strandBias, eval=FALSE}
setwd("/Users/wendy/work/denovo/denovos.parentalorigin/denovos.radboud.filtered.filteredByCallableRegions/")
source("../scripts/utils.R")
geneAnnotations<-read.delim("../allSubstitutions.filtered.geneAnnotations.bed", sep="\t", header=T)
geneAnnotations<-unique(geneAnnotations)
paternalOrigins.SNVs<-read.delim("SNVs.PaternalOriginOnly.filtered.filteredByCallableBases.txt", sep="\t", header=T)
maternalOrigins.SNVs<-read.delim("SNVs.MaternalOriginOnly.filtered.filteredByCallableBases.txt", sep="\t", header=T)
substitutions.closestRepPeakNA12878<-read.delim("../allSubstitutions.filtered.relativeToClosestNA12878RepPeak.bed", sep="\t", header=F)
substitutions.closestRepPeakNA12878<-subset(substitutions.closestRepPeakNA12878, select=c(V1,V2,V3,V13))
colnames(substitutions.closestRepPeakNA12878)<-c("chrom", "start", "end", "distance")

paternalOrigins.SNVs<-merge(paternalOrigins.SNVs, substitutions.closestRepPeakNA12878, by.x=c("Chromosome","start", "End.position"), by.y=c("chrom","start","end"))
maternalOrigins.SNVs<-merge(maternalOrigins.SNVs, substitutions.closestRepPeakNA12878, by.x=c("Chromosome","start", "End.position"), by.y=c("chrom","start","end"))

#paternalOrigins.SNVs.genic<-merge(paternalOrigins.SNVs, geneAnnotations, by.x=c("Chromosome","start"), by.y=c("chrom","start"))
#maternalOrigins.SNVs.genic<-merge(maternalOrigins.SNVs, geneAnnotations, by.x=c("Chromosome","start"), by.y=c("chrom","start"))
paternalOrigins.SNVs<-merge(paternalOrigins.SNVs, geneAnnotations, by.x=c("Chromosome","start"), by.y=c("chrom","start"))
maternalOrigins.SNVs<-merge(maternalOrigins.SNVs, geneAnnotations, by.x=c("Chromosome","start"), by.y=c("chrom","start"))


#replication origin
length(which(paternalOrigins.SNVs$Reference=="C" & paternalOrigins.SNVs$Variant=="T" & paternalOrigins.SNVs$distance>0 & paternalOrigins.SNVs$distance<1000000))+length(which(paternalOrigins.SNVs$Reference=="G" & paternalOrigins.SNVs$Variant=="A" & paternalOrigins.SNVs$distance<0 & paternalOrigins.SNVs$distance>-1000000)) 
length(which(paternalOrigins.SNVs$Reference=="C" & paternalOrigins.SNVs$Variant=="T" & paternalOrigins.SNVs$distance<0 &  paternalOrigins.SNVs$distance>-1000000))+length(which(paternalOrigins.SNVs$Reference=="G" & paternalOrigins.SNVs$Variant=="A" & paternalOrigins.SNVs$distance>0 & paternalOrigins.SNVs$distance<1000000)) 

length(which(maternalOrigins.SNVs$Reference=="C" & maternalOrigins.SNVs$Variant=="T" & maternalOrigins.SNVs$distance>0 & maternalOrigins.SNVs$distance<100000))+length(which(maternalOrigins.SNVs$Reference=="G" & maternalOrigins.SNVs$Variant=="A" & maternalOrigins.SNVs$distance<0 & maternalOrigins.SNVs$distance>-100000)) 
length(which(maternalOrigins.SNVs$Reference=="C" & maternalOrigins.SNVs$Variant=="T" & maternalOrigins.SNVs$distance<0 &  maternalOrigins.SNVs$distance>-100000))+length(which(maternalOrigins.SNVs$Reference=="G" & maternalOrigins.SNVs$Variant=="A" & maternalOrigins.SNVs$distance>0 & maternalOrigins.SNVs$distance<100000)) 

#mutational spectrum
paternalOrigins.SNVs$fromBase<-paternalOrigins.SNVs$Reference
paternalOrigins.SNVs$toBase<-paternalOrigins.SNVs$Variant

paternalOrigins.SNVs$fromBase[which()]<-convertToComplement(paternalOrigins.SNVs$Reference[which()])

#flipping
if (0) {
maternalOrigins.SNVs$fromBase<-as.character(maternalOrigins.SNVs$Reference)
maternalOrigins.SNVs$toBase<-as.character(maternalOrigins.SNVs$Variant)
maternalOrigins.SNVs$fromBase[which(maternalOrigins.SNVs$strand==-1)]<-sapply(as.character(maternalOrigins.SNVs$Reference[which(maternalOrigins.SNVs$strand==-1)]), convertToComplement)
maternalOrigins.SNVs$toBase[which(maternalOrigins.SNVs$strand==-1)]<-sapply(as.character(maternalOrigins.SNVs$Variant[which(maternalOrigins.SNVs$strand==-1)]), convertToComplement)

paternalOrigins.SNVs$fromBase<-as.character(paternalOrigins.SNVs$Reference)
paternalOrigins.SNVs$toBase<-as.character(paternalOrigins.SNVs$Variant)
paternalOrigins.SNVs$fromBase[which(paternalOrigins.SNVs$strand==-1)]<-sapply(as.character(paternalOrigins.SNVs$Reference[which(paternalOrigins.SNVs$strand==-1)]), convertToComplement)
paternalOrigins.SNVs$toBase[which(paternalOrigins.SNVs$strand==-1)]<-sapply(as.character(paternalOrigins.SNVs$Variant[which(paternalOrigins.SNVs$strand==-1)]), convertToComplement)


table(maternalOrigins.SNVs[,c("fromBase", "toBase","in_CpGposition")])
table(paternalOrigins.SNVs[,c("fromBase", "toBase","in_CpGposition")])
}

#T->C
length(which(maternalOrigins.SNVs$Reference=="T" & maternalOrigins.SNVs$Variant=="C" & maternalOrigins.SNVs$strand==1))+length(which(maternalOrigins.SNVs$Reference=="A" & maternalOrigins.SNVs$Variant=="G" & maternalOrigins.SNVs$strand==-1))  
length(which(maternalOrigins.SNVs$Reference=="T" & maternalOrigins.SNVs$Variant=="C" & maternalOrigins.SNVs$strand==-1))+length(which(maternalOrigins.SNVs$Reference=="A" & maternalOrigins.SNVs$Variant=="G" & maternalOrigins.SNVs$strand==1))
length(which(paternalOrigins.SNVs$Reference=="T" & paternalOrigins.SNVs$Variant=="C" & paternalOrigins.SNVs$strand==1))+length(which(paternalOrigins.SNVs$Reference=="A" & paternalOrigins.SNVs$Variant=="G" & paternalOrigins.SNVs$strand==-1))
length(which(paternalOrigins.SNVs$Reference=="T" & paternalOrigins.SNVs$Variant=="C" & paternalOrigins.SNVs$strand==-1))+length(which(paternalOrigins.SNVs$Reference=="A" & paternalOrigins.SNVs$Variant=="G" & paternalOrigins.SNVs$strand==1))

#C->T
length(which(maternalOrigins.SNVs.genic$in_CpGposition==0 &  maternalOrigins.SNVs.genic$Reference=="C" & maternalOrigins.SNVs.genic$Variant=="T" & maternalOrigins.SNVs.genic$strand==1))+length(which(maternalOrigins.SNVs.genic$in_CpGposition==0 & maternalOrigins.SNVs.genic$Reference=="G" & maternalOrigins.SNVs.genic$Variant=="A" & maternalOrigins.SNVs.genic$strand==-1))  
length(which(maternalOrigins.SNVs.genic$in_CpGposition==0 & maternalOrigins.SNVs.genic$Reference=="C" & maternalOrigins.SNVs.genic$Variant=="T" & maternalOrigins.SNVs.genic$strand==-1))+length(which(maternalOrigins.SNVs.genic$in_CpGposition==0 & maternalOrigins.SNVs.genic$Reference=="G" & maternalOrigins.SNVs.genic$Variant=="A" & maternalOrigins.SNVs.genic$strand==1))
length(which(paternalOrigins.SNVs$in_CpGposition==0 & paternalOrigins.SNVs$Reference=="C" & paternalOrigins.SNVs$Variant=="T" & paternalOrigins.SNVs$strand==1))+length(which(paternalOrigins.SNVs$in_CpGposition==0 & paternalOrigins.SNVs$Reference=="G" & paternalOrigins.SNVs$Variant=="A" & paternalOrigins.SNVs$strand==-1))
length(which(paternalOrigins.SNVs$in_CpGposition==0 & paternalOrigins.SNVs$Reference=="C" & paternalOrigins.SNVs$Variant=="T" & paternalOrigins.SNVs$strand==-1))+length(which(paternalOrigins.SNVs$in_CpGposition==0 & paternalOrigins.SNVs$Reference=="G" & paternalOrigins.SNVs$Variant=="A" & paternalOrigins.SNVs$strand==1))
  

chisq.test(matrix(c(273,299,894,1284),ncol=2))
fisher.test(matrix(c(273,299,894,1284),ncol=2))

fisher.test(matrix(c(482,692,1381,2386),ncol=2, byrow=T))
fisher.test(matrix(c(856, 639, 1808, 1925),ncol=2, byrow=T))

###looking at 101-823
#NB101.823<-read.delim("allSubstitutions.Annotated.bed", header=T, sep="\t")
#NB101.823<-subset(NB101.823, filter=="None" & HET_samples=="NB-101-823" & nchar(as.character(ref))==1 & nchar(as.character(alt))==1)
#NB101.823<-unique(merge(NB101.823, geneAnnotations, by.x=c("chrom","start"), by.y=c("chrom","start")))
#length(which(NB101.823$ref.x=="C" & NB101.823$alt.x=="T" & NB101.823$strand==1))+length(which(NB101.823$ref.x=="G" & NB101.823$alt.x=="A" & NB101.823$strand==-1))
#length(which(NB101.823$ref.x=="C" & NB101.823$alt.x=="T" & NB101.823$strand==-1))+length(which(NB101.823$ref.x=="G" & NB101.823$alt.x=="A" & NB101.823$strand==1))

```

```{r tstvCpG, eval=FALSE}
setwd("/Users/wendy/work/denovo/denovos.parentalorigin/denovos.radboud.filtered.filteredByCallableRegions//")
putativeDNMs<-read.delim("substitutions.filtered.annotated.filteredByCallableRegions.bed", sep="\t", header=T)
putativeDNMs$pos<-paste(putativeDNMs$chrom, putativeDNMs$end, putativeDNMs$end, sep=".")

putativeDNMs.withParentalOrigin<-read.delim("allDenovos.withPredictedDNM.withParentOfOrigin.filtered.filteredByCallableRegions.txt", sep="\t", header=T)
predictedDNMs.parentalOriginOnly<-subset(putativeDNMs.withParentalOrigin, !(is.na(parentOfOrigin)) &  nchar(as.character(putativeDNMs.withParentalOrigin$Reference))==1 & nchar(as.character(putativeDNMs.withParentalOrigin$Variant))==nchar(as.character(putativeDNMs.withParentalOrigin$Reference)))
predictedDNMs.SNVs<-subset(putativeDNMs.withParentalOrigin, nchar(as.character(putativeDNMs.withParentalOrigin$Reference))==1 & nchar(as.character(putativeDNMs.withParentalOrigin$Variant))==nchar(as.character(putativeDNMs.withParentalOrigin$Reference))  )


predictedDNMs.SNVs<-merge(predictedDNMs.SNVs, unique(subset(putativeDNMs,select=-c(variant_samples, HET_samples, HOM_ALT_samples,variant_id, anno_id))), by=c("pos"), all.x = T)

parentsAgeATConception<-read.delim("parentsAgeAtConception.filtered.tab", sep="\t", header=T, as.is=T)
predictedDNMs.SNVs<-merge(predictedDNMs.SNVs, parentsAgeATConception, by.x="probandID", by.y="Proband.Study.ID")

predictedDNMs.SNVs.in_CpGposition<-subset(predictedDNMs.SNVs, in_CpGposition==1)
Ts.Tv.in_CpGposition.father<-length(which(predictedDNMs.SNVs.in_CpGposition$sub_type=="ts" & predictedDNMs.SNVs.in_CpGposition$parentOfOrigin=="father"))/length(which(predictedDNMs.SNVs.in_CpGposition$sub_type=="tv" & predictedDNMs.SNVs.in_CpGposition$parentOfOrigin=="father"))
Ts.Tv.in_CpGposition.mother<-length(which(predictedDNMs.SNVs.in_CpGposition$sub_type=="ts" & predictedDNMs.SNVs.in_CpGposition$parentOfOrigin=="mother"))/length(which(predictedDNMs.SNVs.in_CpGposition$sub_type=="tv" & predictedDNMs.SNVs.in_CpGposition$parentOfOrigin=="mother"))
print(c(Ts.Tv.in_CpGposition.father,Ts.Tv.in_CpGposition.mother))

predictedDNMs.SNVs.notIn_CpGposition<-subset(predictedDNMs.SNVs, in_CpGposition==0)
Ts.Tv.notIn_CpGposition.father<-length(which(predictedDNMs.SNVs.notIn_CpGposition$sub_type=="ts" & predictedDNMs.SNVs.notIn_CpGposition$parentOfOrigin=="father"))/length(which(predictedDNMs.SNVs.notIn_CpGposition$sub_type=="tv" & predictedDNMs.SNVs.notIn_CpGposition$parentOfOrigin=="father"))
Ts.Tv.notIn_CpGposition.mother<-length(which(predictedDNMs.SNVs.notIn_CpGposition$sub_type=="ts" & predictedDNMs.SNVs.notIn_CpGposition$parentOfOrigin=="mother"))/length(which(predictedDNMs.SNVs.notIn_CpGposition$sub_type=="tv" & predictedDNMs.SNVs.notIn_CpGposition$parentOfOrigin=="mother"))
print(c(Ts.Tv.notIn_CpGposition.father,Ts.Tv.notIn_CpGposition.mother))

#in CpG positions
maternal.inCpGposition<-subset(predictedDNMs.SNVs.in_CpGposition, parentOfOrigin=="mother")
paternal.inCpGposition<-subset(predictedDNMs.SNVs.in_CpGposition, parentOfOrigin=="father")

#alpha
counts.inCpGposition.paternal<-table(paternal.inCpGposition$probandID)
counts.inCpGposition.maternal<-table(maternal.inCpGposition$probandID)
maternalVsPaternal.inCpGposition<-counts.inCpGposition.maternal[which(counts.inCpGposition.paternal>0)]/counts.inCpGposition.paternal[which(counts.inCpGposition.paternal>0)]
prop.maternalVsPaternal.inCpGposition<-parentsAgeATConception[match(names(maternalVsPaternal.inCpGposition),parentsAgeATConception$Proband.Study.ID),]
prop.maternalVsPaternal.inCpGposition$prop<-maternalVsPaternal.inCpGposition
summary(lm(prop~fathersAgeAtConceptionInYears,prop.maternalVsPaternal.inCpGposition))
summary(lm(prop~mothersAgeAtConceptionInYears,prop.maternalVsPaternal.inCpGposition))

#in CpG sites
maternal.in_CpGsite<-subset(predictedDNMs.SNVs,  in_CpGsite==1  & parentOfOrigin=="mother")
paternal.in_CpGsite<-subset(predictedDNMs.SNVs, in_CpGsite==1 & parentOfOrigin=="father")

counts.in_CpGsite.paternal<-table(paternal.in_CpGsite$probandID)
counts.in_CpGsite.maternal<-table(maternal.in_CpGsite$probandID)
maternalVsPaternal.in_CpGsite<-counts.in_CpGsite.maternal[which(counts.in_CpGsite.paternal>0)]/counts.in_CpGsite.paternal[which(counts.in_CpGsite.paternal>0)]
prop.maternalVsPaternal.in_CpGsite<-parentsAgeATConception[match(names(maternalVsPaternal.in_CpGsite),parentsAgeATConception$Proband.Study.ID),]
prop.maternalVsPaternal.in_CpGsite$prop<-maternalVsPaternal.in_CpGsite
summary(lm(prop~mothersAgeAtConceptionInYears,prop.maternalVsPaternal.in_CpGsite))

####see if transitions happen in highly methylated sites? it does seem so
summary(as.numeric(as.character(predictedDNMs.SNVs.in_CpGposition$GSM1010980OvaryBiSeq)))
summary(as.numeric(as.character(predictedDNMs.SNVs.in_CpGposition$GSM1127117TestisBiSeq)))
summary(as.numeric(as.character(maternal.inCpGposition$GSM1010980OvaryBiSeq)))
summary(as.numeric(as.character(paternal.inCpGposition$GSM1127117TestisBiSeq)))

hist(as.numeric(as.character(maternal.inCpGposition$GSM1010980OvaryBiSeq)))
hist(as.numeric(as.character(paternal.inCpGposition$GSM1127117TestisBiSeq)))



#ts, CpG sites, in and out of CpG island
Ts.inCpGsite.inCpGIsland.mother<-length(which(predictedDNMs.SNVs$in_CpGposition==1  & predictedDNMs.SNVs$sub_type=="ts" & predictedDNMs.SNVs$in_cpg_island==1 &  predictedDNMs.SNVs$parentOfOrigin=="mother"))
Ts.inCpGsite.notInCpGIsland.mother<-length(which(predictedDNMs.SNVs$in_CpGposition==1  & predictedDNMs.SNVs$sub_type=="ts" & predictedDNMs.SNVs$in_cpg_island==0 &  predictedDNMs.SNVs$parentOfOrigin=="mother"))
Ts.inCpGsite.inCpGIsland.father<-length(which(predictedDNMs.SNVs$in_CpGposition==1  & predictedDNMs.SNVs$sub_type=="ts" & predictedDNMs.SNVs$in_cpg_island==1 &  predictedDNMs.SNVs$parentOfOrigin=="father"))
Ts.inCpGsite.notInCpGIsland.father<-length(which(predictedDNMs.SNVs$in_CpGposition==1  & predictedDNMs.SNVs$sub_type=="ts" & predictedDNMs.SNVs$in_cpg_island==0 &  predictedDNMs.SNVs$parentOfOrigin=="father"))
print(c(Ts.inCpGsite.inCpGIsland.mother,Ts.inCpGsite.notInCpGIsland.mother,Ts.inCpGsite.inCpGIsland.father,Ts.inCpGsite.notInCpGIsland.father))

#tv, CpG sites, in and out of CpG island
Tv.inCpGsite.inCpGIsland.mother<-length(which(predictedDNMs.SNVs$in_CpGposition==1  & predictedDNMs.SNVs$sub_type=="tv" & predictedDNMs.SNVs$in_cpg_island==1 &  predictedDNMs.SNVs$parentOfOrigin=="mother"))
Tv.inCpGsite.notInCpGIsland.mother<-length(which(predictedDNMs.SNVs$in_CpGposition==1  & predictedDNMs.SNVs$sub_type=="tv" & predictedDNMs.SNVs$in_cpg_island==0 &  predictedDNMs.SNVs$parentOfOrigin=="mother"))
Tv.inCpGsite.inCpGIsland.father<-length(which(predictedDNMs.SNVs$in_CpGposition==1  & predictedDNMs.SNVs$sub_type=="tv" & predictedDNMs.SNVs$in_cpg_island==1 &  predictedDNMs.SNVs$parentOfOrigin=="father"))
Tv.inCpGsite.notInCpGIsland.father<-length(which(predictedDNMs.SNVs$in_CpGposition==1  & predictedDNMs.SNVs$sub_type=="tv" & predictedDNMs.SNVs$in_cpg_island==0 &  predictedDNMs.SNVs$parentOfOrigin=="father"))
print(c(Tv.inCpGsite.inCpGIsland.mother,Tv.inCpGsite.notInCpGIsland.mother,Tv.inCpGsite.inCpGIsland.father,Tv.inCpGsite.notInCpGIsland.father))

#maternal
maternal.inCpGsite<-subset(predictedDNMs.SNVs, parentOfOrigin=="mother" & in_CpGsite==1)
countsBySample.maternal.inCpGsite<-table(maternal.inCpGsite$probandID)
numDenovoWithAge.maternal.inCpGsite<-parentsAgeATConception[match(names(countsBySample.maternal.inCpGsite),parentsAgeATConception$Proband.Study.ID),]
numDenovoWithAge.maternal.inCpGsite$numDenovo<-countsBySample.maternal.inCpGsite
print("in CpG site: numDenovo vs. maternal age")
fit.maternal.inCpGsite<-lm(numDenovo ~  mothersAgeAtConceptionInYears, data=numDenovoWithAge.maternal.inCpGsite)
summary(fit.maternal.inCpGsite)

maternal.inCpGposition<-subset(predictedDNMs.SNVs, parentOfOrigin=="mother" & in_CpGposition==1)
countsBySample.maternal.inCpGposition<-table(maternal.inCpGposition$probandID)
numDenovoWithAge.maternal.inCpGposition<-parentsAgeATConception[match(names(countsBySample.maternal.inCpGposition),parentsAgeATConception$Proband.Study.ID),]
numDenovoWithAge.maternal.inCpGposition$numDenovo<-countsBySample.maternal.inCpGposition
print("in CpG position: numDenovo vs. maternal age")
fit.maternal.inCpGposition<-lm(numDenovo ~  mothersAgeAtConceptionInYears, data=numDenovoWithAge.maternal.inCpGposition)
summary(fit.maternal.inCpGposition)

#paternal
paternal.inCpGsite<-subset(predictedDNMs.SNVs, parentOfOrigin=="father" & in_CpGsite==1)
countsBySample.paternal.inCpGsite<-table(paternal.inCpGsite$probandID)
numDenovoWithAge.paternal.inCpGsite<-parentsAgeATConception[match(names(countsBySample.paternal.inCpGsite),parentsAgeATConception$Proband.Study.ID),]
numDenovoWithAge.paternal.inCpGsite$numDenovo<-countsBySample.paternal.inCpGsite
print("in CpG site: numDenovo vs. paternal age")
fit.paternal.inCpGsite<-lm(numDenovo ~  fathersAgeAtConceptionInYears, data=numDenovoWithAge.paternal.inCpGsite)
summary(fit.paternal.inCpGsite)

paternal.inCpGposition<-subset(predictedDNMs.SNVs, parentOfOrigin=="father" & in_CpGposition==1)
countsBySample.paternal.inCpGposition<-table(paternal.inCpGposition$probandID)
numDenovoWithAge.paternal.inCpGposition<-parentsAgeATConception[match(names(countsBySample.paternal.inCpGposition),parentsAgeATConception$Proband.Study.ID),]
numDenovoWithAge.paternal.inCpGposition$numDenovo<-countsBySample.paternal.inCpGposition
print("in CpG position: numDenovo vs. paternal age")
fit.paternal.inCpGposition<-lm(numDenovo ~  fathersAgeAtConceptionInYears, data=numDenovoWithAge.paternal.inCpGposition)
summary(fit.paternal.inCpGposition)

#Ts/Tv vs. age
#CpG sites
TsBySample.maternal.inCpGsite<-table(maternal.inCpGsite[which(maternal.inCpGsite$sub_type=="ts"),]$probandID)
TvBySample.maternal.inCpGsite<-table(maternal.inCpGsite[which(maternal.inCpGsite$sub_type=="tv"),]$probandID)
TsWithAge.maternal.inCpGsite<-parentsAgeATConception[match(names(TsBySample.maternal.inCpGsite),parentsAgeATConception$Proband.Study.ID),]
TsWithAge.maternal.inCpGsite$Ts<-TsBySample.maternal.inCpGsite
TsWithAge.maternal.inCpGsite$Tv<-TvBySample.maternal.inCpGsite
summary(lm(Ts~mothersAgeAtConceptionInYears, TsWithAge.maternal.inCpGsite))
summary(lm(Tv~mothersAgeAtConceptionInYears, TsWithAge.maternal.inCpGsite))

#CpG postions
TsBySample.maternal.inCpGposition<-table(maternal.inCpGposition[which(maternal.inCpGposition$sub_type=="ts"),]$probandID)
TvBySample.maternal.inCpGposition<-table(maternal.inCpGposition[which(maternal.inCpGposition$sub_type=="tv"),]$probandID)
TsWithAge.maternal.inCpGposition<-parentsAgeATConception[match(names(TsBySample.maternal.inCpGposition),parentsAgeATConception$Proband.Study.ID),]
TsWithAge.maternal.inCpGposition$Ts<-TsBySample.maternal.inCpGposition
TsWithAge.maternal.inCpGposition$Tv<-TvBySample.maternal.inCpGposition
summary(lm(Ts~mothersAgeAtConceptionInYears, TsWithAge.maternal.inCpGposition))
summary(lm(Tv~mothersAgeAtConceptionInYears, TsWithAge.maternal.inCpGposition))

#paternal
#CpG sites
TsBySample.paternal.inCpGsite<-table(paternal.inCpGsite[which(paternal.inCpGsite$sub_type=="ts"),]$probandID)
TvBySample.paternal.inCpGsite<-table(paternal.inCpGsite[which(paternal.inCpGsite$sub_type=="tv"),]$probandID)
TsWithAge.paternal.inCpGsite<-parentsAgeATConception[match(names(TsBySample.paternal.inCpGsite),parentsAgeATConception$Proband.Study.ID),]
TsWithAge.paternal.inCpGsite$Ts<-TsBySample.paternal.inCpGsite
TsWithAge.paternal.inCpGsite$Tv<-TvBySample.paternal.inCpGsite
summary(lm(Ts~fathersAgeAtConceptionInYears, TsWithAge.paternal.inCpGsite))
summary(lm(Tv~fathersAgeAtConceptionInYears, TsWithAge.paternal.inCpGsite))

#CpG positions
TsBySample.paternal.inCpGposition<-table(paternal.inCpGposition[which(paternal.inCpGposition$sub_type=="ts"),]$probandID)
TvBySample.paternal.inCpGposition<-table(paternal.inCpGposition[which(paternal.inCpGposition$sub_type=="tv"),]$probandID)
TsWithAge.paternal.inCpGposition<-parentsAgeATConception[match(names(TsBySample.paternal.inCpGposition),parentsAgeATConception$Proband.Study.ID),]
TsWithAge.paternal.inCpGposition$Ts<-TsBySample.paternal.inCpGposition
TsWithAge.paternal.inCpGposition$Tv<-TvBySample.paternal.inCpGposition
summary(lm(Ts~fathersAgeAtConceptionInYears, TsWithAge.paternal.inCpGposition))
summary(lm(Tv~fathersAgeAtConceptionInYears, TsWithAge.paternal.inCpGposition))

#in nonCpG sites
maternal.inNonCpGsite<-subset(predictedDNMs.SNVs,  in_CpGsite==0 &  parentOfOrigin=="mother")
paternal.inNonCpGsite<-subset(predictedDNMs.SNVs, in_CpGsite==0 & parentOfOrigin=="father")

maternal.inNonCpGsite$motherAgeCatgeory=1
maternal.inNonCpGsite$motherAgeCatgeory[which(maternal.inNonCpGsite$mothersAgeAtConceptionInYears>28)]=2
maternal.inNonCpGsite$motherAgeCatgeory[which(maternal.inNonCpGsite$mothersAgeAtConceptionInYears>35)]=3
table(maternal.inNonCpGsite$motherAgeCatgeory[which(maternal.inNonCpGsite$sub_type=="ts")])/table(maternal.inNonCpGsite$motherAgeCatgeory[which(maternal.inNonCpGsite$sub_type=="tv")])

paternal.inNonCpGsite$fatherAgeCatgeory=1
paternal.inNonCpGsite$fatherAgeCatgeory[which(paternal.inNonCpGsite$fathersAgeAtConceptionInYears>30)]=2
paternal.inNonCpGsite$fatherAgeCatgeory[which(paternal.inNonCpGsite$fathersAgeAtConceptionInYears>37.93)]=3
table(paternal.inNonCpGsite$fatherAgeCatgeory[which(paternal.inNonCpGsite$sub_type=="ts")])/table(paternal.inNonCpGsite$fatherAgeCatgeory[which(paternal.inNonCpGsite$sub_type=="tv")])

```


PHMM by count
```{r phmm}
set.seed(17)
#categories<-c("paternalOld","paternalYoung","maternalOld", "maternalYoung")
allCounts.1MB<-read.delim("~/work/denovo/denovos.parentalorigin/denovos.radboud.filtered.filteredByCallableRegions/filteredCounts.1MB.bed", header=T,  sep="\t", as.is=T)
models<-list()
for (i in 5:8) {
counts<-allCounts.1MB[,i]
#m1 <- depmix(response = counts~1, ns=1,data= as.data.frame(counts),family=poisson(),respstart=log(mean(counts)))
#fit(m1,  em=em.control(maxit=10000))
m2 <- depmix(response = counts~1, ns=2,data= as.data.frame(counts),family=poisson(),respstart=c(log(0.1),log(mean(counts))))
f2<-fit(m2,  em=em.control(maxit=10000))
m3 <- depmix(response = counts~1, ns=3,data= as.data.frame(counts),family=poisson(),respstart=c(log(0.1),log(1), log(5)))
f3<-fit(m3, em=em.control(maxit=10000))
m4 <- depmix(response = counts~1, ns=4,data= as.data.frame(counts),family=poisson(),respstart=c(log(1),log(2), log(4), log(6)))
f4<-fit(m4, em=em.control(maxit=10000))
models[[length(models)+1]]<-c(f2,f3,f4)
}
esttrans.maternalOld <- posterior(models[[3]][[1]])
plot(1:nrow(esttrans.paternalOld), esttrans.paternalOld[,1], type='l', main='Estimated state')

#llratio(f3,f2)

#multivariate
m2 <- depmix(response = list(paternalOld~1, paternalYoung~1, maternalOld~1, maternalYoung~1), ns=2,data= allCounts.1MB,family=list(poisson(),poisson(), poisson(), poisson()))
m3 <- depmix(response = list(paternalOld~1, paternalYoung~1, maternalOld~1, maternalYoung~1), ns=3,data= allCounts.1MB,family=list(poisson(),poisson(), poisson(), poisson()))
#m4 <- depmix(response = list(paternalOld~1, paternalYoung~1, maternalOld~1, maternalYoung~1), ns=4,data= allCounts.1MB,family=list(poisson(),poisson(), poisson(), poisson()))
allCounts.1MB<-allCounts.1MB[order(allCounts.1MB$chrom,decreasing = F),]
allCounts.1MB$chrNum<-substr(allCounts.1MB$chrom,4,6)
allCounts.1MB$chrNum[which(allCounts.1MB$chrNum=="8")]<-0
allCounts.1MB$chrNum[which(allCounts.1MB$chrNum=="9")]<-23
allCounts.1MB<-allCounts.1MB[order(allCounts.1MB$chrNum,decreasing = F),]
m4 <- depmix(response = list(paternalOld~1, paternalYoung~1, maternalOld~1, maternalYoung~1), ns=4,data= allCounts.1MB,family=list(poisson(),poisson(), poisson(), poisson()))
#m5 <- depmix(response = list(paternalOld~1, paternalYoung~1, maternalOld~1, maternalYoung~1), ns=5,data= allCounts.1MB,family=list(poisson(),poisson(), poisson(), poisson()))
set.seed(17)
f4<-fit(m4,  em=em.control(maxit=10000))
summary(f4)
f4.estimate<-matrix( c( 0.53212303, 0.3870004, 0.6868786,-0.02654136, -0.47157026 ,0.5023244,-1.0957111,-0.25445093,-0.02652347 ,-0.3531579 ,-1.5795600,-1.94575681 ,0.55248317 ,0.1396299,-0.7919196,-1.21193323), nrow=4, ncol=4, byrow=T)
exp(f4.estimate)

esttrans <- posterior(f4)
plot(1:nrow(esttrans), esttrans[,1], type='l', main='Estimated state')

write.table(allCounts.1MB[which(esttrans$state==1),],file="phmm.1MB.state1.bed", col.names=T, row.names=F, sep="\t", quote=F)
write.table(allCounts.1MB[which(esttrans$state==2),],file="phmm.1MB.state2.bed", col.names=T, row.names=F, sep="\t", quote=F)
write.table(allCounts.1MB[which(esttrans$state==3),],file="phmm.1MB.state3.bed", col.names=T, row.names=F, sep="\t", quote=F)
write.table(allCounts.1MB[which(esttrans$state==4),],file="phmm.1MB.state4.bed", col.names=T, row.names=F, sep="\t", quote=F)


unCalledWindows<-cbind(callableBases.1MB[which(callableBases.1MB$propCallable<=0.5),c(1:3)],-1)
colnames(unCalledWindows)<-c("chrom","start", "end","state")
predictedStates<-cbind(allCounts.1MB[,c(1:3)],esttrans[,1])
colnames(predictedStates)<-c("chrom","start", "end","state")
predictedStates<-rbind(predictedStates, unCalledWindows)
predictedStates <- predictedStates[order(predictedStates$chrom, predictedStates$start),]
options(scipen=999)
write.table(predictedStates, file="phmm.1MB.states.bed", col.names=T, row.names=F, sep="\t", quote=F)

stateWithCounts<-merge(allCounts.1MB, predictedStates, by=c("chrom","start","end"))
stateWithCounts$stateName<-"NA"
stateWithCounts$stateName[which(stateWithCounts$state==1)]<-"High maternal"
stateWithCounts$stateName[which(stateWithCounts$state==2)]<-"In between"
stateWithCounts$stateName[which(stateWithCounts$state==3)]<-"Average"
stateWithCounts$stateName[which(stateWithCounts$state==4)]<-"High paternal"
write.table(subset(stateWithCounts, select=c(chrom,start,end,paternalOld,paternalYoung,maternalOld,maternalYoung,paternal,maternal,stateName)), file="phmmStates.1MB.bed", col.names=T, row.names=F, sep="\t", quote=F)

write.table(callableBases.1MB[which(callableBases.1MB$propCallable<=0.5),], file="removed.1MB.bed", col.names=T, row.names=F, sep="\t", quote=F)
```

PHMM by rate
```{r phmmRate}
library(depmixS4)
set.seed(17)
setwd("~/work/denovo/denovos.parentalorigin/denovos.radboud.filtered.filteredByCallableRegions/")
allCounts.1MB<-read.delim("allMutationRates.1MB.bed", header=T,  sep="\t", as.is=T)
callableBases.1MB<-read.delim("callableBases.1MB.bed", sep="\t", header=F)
colnames(callableBases.1MB)<-c("chrom", "start", "end", "V4", "numBP", "windowSize", "propCallable")

allCounts.1MB<-subset(allCounts.1MB, callableBases.1MB$propCallable>0.5)

#multivariate
m2 <- depmix(response = list(paternalOld~1, paternalYoung~1, maternalOld~1, maternalYoung~1), ns=2,data= allCounts.1MB,family=list(poisson(),poisson(), poisson(), poisson()))
m3 <- depmix(response = list(paternalOld~1, paternalYoung~1, maternalOld~1, maternalYoung~1), ns=3,data= allCounts.1MB,family=list(poisson(),poisson(), poisson(), poisson()))
m4 <- depmix(response = list(paternalOld~1, paternalYoung~1, maternalOld~1, maternalYoung~1), ns=4,data= allCounts.1MB,family=list(poisson(),poisson(), poisson(), poisson()))
m5 <- depmix(response = list(paternalOld~1, paternalYoung~1, maternalOld~1, maternalYoung~1), ns=5,data= allCounts.1MB,family=list(poisson(),poisson(), poisson(), poisson()))
m6 <- depmix(response = list(paternalOld~1, paternalYoung~1, maternalOld~1, maternalYoung~1), ns=6,data= allCounts.1MB,family=list(poisson(),poisson(), poisson(), poisson()))
set.seed(17)
f2<-fit(m2,  em=em.control(maxit=10000))
f3<-fit(m3,  em=em.control(maxit=10000))
f4<-fit(m4,  em=em.control(maxit=10000))
f5<-fit(m5,  em=em.control(maxit=10000))
f6<-fit(m6,  em=em.control(maxit=10000))
summary(f4)

f4.estimate<-matrix(c(-0.03769305,0.29778230,-0.6613370,-0.53401752,1.01237201,0.03949686,-0.9853219,-1.74587310, 0.75755280,0.51495295,0.7702764,0.08888798, -0.13658072,-0.33429673,-1.6238845,-1.86191666),  nrow=4, ncol=4, byrow=T)


exp(f4.estimate)

esttrans <- posterior(f4)
plot(1:nrow(esttrans), esttrans[,1], type='l', main='Estimated state')

#esttrans.f5 <- posterior(f5)
#plot(1:nrow(esttrans.f5), esttrans.f5[,1], type='l', main='Estimated state')

write.table(allCounts.1MB[which(esttrans$state==1),],file="phmm.1MB.state1.bed", col.names=T, row.names=F, sep="\t", quote=F)
write.table(allCounts.1MB[which(esttrans$state==2),],file="phmm.1MB.state2.bed", col.names=T, row.names=F, sep="\t", quote=F)
write.table(allCounts.1MB[which(esttrans$state==3),],file="phmm.1MB.state3.bed", col.names=T, row.names=F, sep="\t", quote=F)
write.table(allCounts.1MB[which(esttrans$state==4),],file="phmm.1MB.state4.bed", col.names=T, row.names=F, sep="\t", quote=F)

unCalledWindows<-cbind(callableBases.1MB[which(callableBases.1MB$propCallable<=0.5),c(1:3)],0)
colnames(unCalledWindows)<-c("chrom","start", "end","state")
predictedStates<-cbind(allCounts.1MB[,c(1:3)],esttrans[,1])
colnames(predictedStates)<-c("chrom","start", "end","state")
predictedStates<-rbind(predictedStates, unCalledWindows)
predictedStates <- predictedStates[order(predictedStates$chrom, predictedStates$start),]
options(scipen=999)
write.table(predictedStates, file="phmm.1MB.states.bed", col.names=T, row.names=F, sep="\t", quote=F)

stateWithCounts<-merge(allCounts.1MB, predictedStates, by=c("chrom","start","end"))
stateWithCounts$stateName<-"NA"
stateWithCounts$stateName[which(stateWithCounts$state==1)]<-"In between"
stateWithCounts$stateName[which(stateWithCounts$state==2)]<-"High paternal"
stateWithCounts$stateName[which(stateWithCounts$state==3)]<-"High maternal"
stateWithCounts$stateName[which(stateWithCounts$state==4)]<-"Average"
write.table(subset(stateWithCounts, select=c(chrom,start,end,paternalOld,paternalYoung,maternalOld,maternalYoung,paternal,maternal,stateName)), file="phmmStates.1MB.withCounts.bed", col.names=T, row.names=F, sep="\t", quote=F)

```

pca
```{r PCAonWindows, eval=FALSE}
library(ggbiplot)
rownames(allCounts.1MB)<-paste(allCounts.1MB$chrom, ":", allCounts.1MB$start, "-", allCounts.1MB$end, sep="")
fit <- princomp(allCounts.1MB[,5:8], cor=TRUE)
summary(fit) # print variance accounted for 
loadings(fit) # pc loadings 
plot(fit,type="lines") # scree plot 
fit$scores # the principal components
biplot(fit)
ir.pca<-fit
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1, 
               ellipse = TRUE, 
              circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal', 
               legend.position = 'top')
g<-g + theme_bw()
g
ggsave("../figures/slidingWindows.pcaBiPlot.svg")
pcs<-predict(ir.pca, newdata=allCounts.1MB[,5:8])
```


```{r bestglm, eval=FALSE}
library(bestglm)
## Prepare data
lbw.for.best.poisson <- within(countsWithTracks, {
    chrom   <- NULL        # Delete
    start  <- NULL
    mid <- NULL
    end <- NULL
    maternal <- NULL
    paternalOld  <- NULL
    paternalYoung  <- NULL
    maternalOld  <- NULL
    maternalYoung  <- NULL
    y    <- paternal         # bwt into y
    paternal  <- NULL        # Delete bwt
})

## Reorder variables
lbw.for.best.poisson <-
    lbw.for.best.poisson[, c("recombRate.decodeAvg","gcContent.gcContent","replicationTiming.repTime","fetal.testes.DHSs.fetal.testes.DHSs","BisulfiteSeq.testis.BisulfiteSeq.testis","fetal.ovary.DHSs.fetal.ovary.DHSs", "ovary.DHSs.ovary.DHSs","Ovary.H3K27ac", "Ovary.H3K9me3", "Ovary.H3K4me1", "Ovary.H3K36me3","y")]

## Perform
res.best.poisson <-
    bestglm(Xy = lbw.for.best.poisson,
            family = poisson,          # binomial family for logistic
            IC = "AIC",                 # Information criteria for
            method = "exhaustive")

## Show top 5 models
res.best.poisson$BestModels
summary(res.best.poisson$BestModel)
model.pois<-res.best.poisson$BestModel
1 - pchisq(summary(model.pois)$deviance, 
           summary(model.pois)$df.residual
           )

library(mpath)
zeroinfl
be.zeroinfl(y~.|., lbw.for.best.poisson, dist="poisson", alpha=0.05,trace=FALSE)



```


```{r segmentsSummaryStat}
setwd("/Users/wendy/work/denovo/denovos.parentalorigin/denovos.radboud.filtered.filteredByCallableRegions/")
allCounts.1MB<-read.delim("~/work/denovo/denovos.parentalorigin/denovos.radboud.filtered.filteredByCallableRegions/filteredCounts.1MB.bed", header=T,)
phmm.states<-read.delim("phmm.1MB.states.bed", header=T)

summary(allCounts.1MB$paternalOld)
summary(allCounts.1MB$paternalYoung)
summary(allCounts.1MB$maternalOld)
summary(allCounts.1MB$maternalYoung)
summary(allCounts.1MB$paternal)
summary(allCounts.1MB$maternal)
sd(allCounts.1MB$paternalOld)
sd(allCounts.1MB$paternalYoung)
sd(allCounts.1MB$maternalOld)
sd(allCounts.1MB$maternalYoung)
sd(allCounts.1MB$paternal)
sd(allCounts.1MB$maternal)

```

Canonical correlation analysis of epigenomic tracks
```{r ccaAnalysis}
library(yacca)
allMutationRates.1MB<-read.delim("allMutationRates.1MB.bed", header=T, sep="\t", as.is=T)
#epigeneticTracks<-read.delim("epigeneticTracks.1MB.bed", header=T, as.is=T, sep="\t")
epigeneticTracks<-read.delim("countsWithTracks.bed", header=T, as.is=T, sep="\t")
callableBases.1MB<-read.delim("callableBases.1MB.bed", sep="\t", header=F)
colnames(callableBases.1MB)<-c("chrom", "start", "end", "V4", "numBP", "windowSize", "propCallable")

#epigeneticTracks.father<-epigeneticTracks[,c("recombRate.decodeAvg","gcContent.gcContent", "RepliSeqSumSignal.12878.RepliSeqSumSignal.12878","BisulfiteSeq.testis.BisulfiteSeq.testis","H3k9me3.12878", "H3k27ac.12878.H3k27ac.12878", "H3k4me1.12878.H3k4me1.12878","H3k4me3.12878.H3k4me3.12878","RnaSeq.12878.RnaSeq.12878", "H3k27me3.12878.H3k27me3.12878", "H3k36me3.12878.H3k36me3.12878","OpenChromDnase.12878.OpenChromDnase.12878")]
epigeneticTracks.father<-epigeneticTracks[,11:22]
rows.na.father <- apply(epigeneticTracks.father, 1, function(x) any(is.na(x)))
epigeneticTracks.father<-epigeneticTracks.father[which(!rows.na.father & callableBases.1MB$propCallable>0.5)   ,]
mutationRates <- allMutationRates.1MB[which(!rows.na.father & callableBases.1MB$propCallable>0.5), 5:6]
epigenomicFeatures <- epigeneticTracks.father
cca.fit.father <- cca(epigenomicFeatures,mutationRates)
helio.plot(cca.fit.father, cv=2, x.name="epigenomicFeatures",
           y.name="mutationRates", type="correlation")
F.test.cca(cca.fit.father)

epigeneticTracks.mother<-epigeneticTracks[,c("recombRate.decodeAvg","gcContent.gcContent", "RepliSeqSumSignal.12878.RepliSeqSumSignal.12878","BisulfiteSeq.ovary.BisulfiteSeq.ovary","H3k9me3.12878", "H3k27ac.12878.H3k27ac.12878", "H3k4me1.12878.H3k4me1.12878","H3k4me3.12878.H3k4me3.12878","RnaSeq.12878.RnaSeq.12878", "H3k27me3.12878.H3k27me3.12878", "H3k36me3.12878.H3k36me3.12878","OpenChromDnase.12878.OpenChromDnase.12878")]
rows.na.mother <- apply(epigeneticTracks.mother, 1, function(x) any(is.na(x)))
epigeneticTracks.mother<-epigeneticTracks.mother[which(!rows.na.mother & callableBases.1MB$propCallable>0.5)   ,]
mutationRates <- allMutationRates.1MB[which(!rows.na.mother & callableBases.1MB$propCallable>0.5), 7:8]
epigenomicFeatures <- epigeneticTracks.mother
cca.fit.mother <- cca(epigenomicFeatures,mutationRates)
helio.plot(cca.fit.mother, cv=1, x.name="epigenomicFeatures",
           y.name="mutationRates", type="correlation")
F.test.cca(cca.fit.mother)

```

Multiple regression with Epigenomic tracks
```{r regressionWithEpigenomicTracks}
library(FWDselect)
allMutationRates.1MB<-read.delim("allMutationRates.1MB.bed", header=T, sep="\t", as.is=T)
#allMutationRates.1MB<-read.delim("allCounts.1MB.bed", header=T, sep="\t", as.is=T)
epigeneticTracks<-read.delim("epigeneticTracks.1MB.bed", header=T, as.is=T, sep="\t")
callableBases.1MB<-read.delim("callableBases.1MB.bed", sep="\t", header=F)
colnames(callableBases.1MB)<-c("chrom", "start", "end", "V4", "numBP", "windowSize", "propCallable")

#father
epigeneticTracks.father<-epigeneticTracks[,c( "recombRate.decodeAvg","gcContent.gcContent","BisulfiteSeq.testis.BisulfiteSeq.testis","H3k9me3.12878", "H3k27ac.12878.H3k27ac.12878", "H3k4me1.12878.H3k4me1.12878","H3k4me3.12878.H3k4me3.12878","RnaSeq.12878.RnaSeq.12878", "H3k27me3.12878.H3k27me3.12878", "H3k36me3.12878.H3k36me3.12878","OpenChromDnase.12878.OpenChromDnase.12878","RepliSeqGm12878WaveSignal.RepliSeqWaveSignal.12878","weightedCoverage.coverage")]
epigeneticTracks.father<-cbind(allMutationRates.1MB, epigeneticTracks.father)
rows.na.father <- apply(epigeneticTracks.father, 1, function(x) any(is.na(x)))
epigeneticTracks.father<-epigeneticTracks.father[which(!rows.na.father & callableBases.1MB$propCallable>0.5),]
summary(lm(paternalOld~ recombRate.decodeAvg+gcContent.gcContent +RepliSeqGm12878WaveSignal.RepliSeqWaveSignal.12878+ BisulfiteSeq.testis.BisulfiteSeq.testis+H3k9me3.12878 + H3k27ac.12878.H3k27ac.12878 +H3k4me1.12878.H3k4me1.12878+ H3k4me3.12878.H3k4me3.12878+ RnaSeq.12878.RnaSeq.12878+H3k27me3.12878.H3k27me3.12878+ H3k36me3.12878.H3k36me3.12878 +OpenChromDnase.12878.OpenChromDnase.12878,data=epigeneticTracks.father))
summary(lm(paternalYoung~ recombRate.decodeAvg+gcContent.gcContent +RepliSeqGm12878WaveSignal.RepliSeqWaveSignal.12878+ BisulfiteSeq.testis.BisulfiteSeq.testis+H3k9me3.12878 + H3k27ac.12878.H3k27ac.12878 +H3k4me1.12878.H3k4me1.12878+ H3k4me3.12878.H3k4me3.12878+ RnaSeq.12878.RnaSeq.12878+H3k27me3.12878.H3k27me3.12878+ H3k36me3.12878.H3k36me3.12878 +OpenChromDnase.12878.OpenChromDnase.12878,data=epigeneticTracks.father))

# epigeneticTracks.father<-epigeneticTracks.father[which(!rows.na.father & callableBases.1MB$propCallable>0.5 & allMutationRates.1MB$paternalOld>0),]
# obj.paternalYoungVsOld = qselection(epigeneticTracks.father[,11:23], epigeneticTracks.father$paternalYoung/epigeneticTracks.father$paternalOld,  qvector = c(1:11), method = "lm", criterion = "aic",  cluster = FALSE) 
# summary(lm(paternalYoung/paternalOld~ recombRate.decodeAvg,data=epigeneticTracks.father))
# summary(lm(paternalYoung/paternalOld~ depthOfCoverage.coverage+RepliSeqGm12878WaveSignal.RepliSeqWaveSignal.12878,data=epigeneticTracks.father))
# summary(lm(paternalYoung/paternalOld~ weightedCoverage.coverage+ H3k36me3.12878.H3k36me3.12878 + BisulfiteSeq.testis.BisulfiteSeq.testis,data=epigeneticTracks.father))

#mother
epigeneticTracks.mother<-epigeneticTracks[,c("recombRate.decodeAvg","gcContent.gcContent", "RepliSeqGm12878WaveSignal.RepliSeqWaveSignal.12878","BisulfiteSeq.ovary.BisulfiteSeq.ovary","H3k9me3.12878", "H3k27ac.12878.H3k27ac.12878", "H3k4me1.12878.H3k4me1.12878","H3k4me3.12878.H3k4me3.12878","RnaSeq.12878.RnaSeq.12878", "H3k27me3.12878.H3k27me3.12878", "H3k36me3.12878.H3k36me3.12878","OpenChromDnase.12878.OpenChromDnase.12878","weightedCoverage.coverage")]
epigeneticTracks.mother<-cbind(allMutationRates.1MB, epigeneticTracks.mother)
rows.na.mother <- apply(epigeneticTracks.mother, 1, function(x) any(is.na(x)))
epigeneticTracks.mother<-epigeneticTracks.mother[which(!rows.na.mother & callableBases.1MB$propCallable>0.5)   ,]
summary(lm(maternalOld~ recombRate.decodeAvg+gcContent.gcContent +RepliSeqGm12878WaveSignal.RepliSeqWaveSignal.12878+BisulfiteSeq.ovary.BisulfiteSeq.ovary+H3k9me3.12878 + H3k27ac.12878.H3k27ac.12878 +H3k4me1.12878.H3k4me1.12878+ H3k4me3.12878.H3k4me3.12878+ RnaSeq.12878.RnaSeq.12878+H3k27me3.12878.H3k27me3.12878+ H3k36me3.12878.H3k36me3.12878 +OpenChromDnase.12878.OpenChromDnase.12878+weightedCoverage.coverage,data=epigeneticTracks.mother))

# epigeneticTracks.mother<-epigeneticTracks.mother[which(!rows.na.mother & callableBases.1MB$propCallable>0.5 & allMutationRates.1MB$maternalOld>0),]
# obj.maternalYoungVsOld = qselection(epigeneticTracks.mother[,11:23], epigeneticTracks.mother$maternalYoung/epigeneticTracks.mother$maternalOld,  qvector = c(1:11), method = "lm", criterion = "variance",  cluster = FALSE) 
# summary(lm(maternalYoung/maternalOld~ H3k27me3.12878.H3k27me3.12878,data=epigeneticTracks.mother))
# 
# epigeneticTracks.father<-epigeneticTracks.father[which(!rows.na.father & callableBases.1MB$propCallable>0.5 & allMutationRates.1MB$paternal>0)   ,]
# summary(lm(maternal/paternal~ weightedCoverage.coverage+recombRate.decodeAvg+gcContent.gcContent +RepliSeqGm12878WaveSignal.RepliSeqWaveSignal.12878+BisulfiteSeq.testis.BisulfiteSeq.testis+H3k9me3.12878 + H3k27ac.12878.H3k27ac.12878 +H3k4me1.12878.H3k4me1.12878+ H3k4me3.12878.H3k4me3.12878+ RnaSeq.12878.RnaSeq.12878+H3k27me3.12878.H3k27me3.12878+ H3k36me3.12878.H3k36me3.12878 +OpenChromDnase.12878.OpenChromDnase.12878,data=epigeneticTracks.father))
# obj.maternal = qselection(epigeneticTracks.mother[,11:23], epigeneticTracks.mother$maternal,  qvector = c(1:12), method = "lm", criterion = "aic",  cluster = FALSE) 
# obj.paternal = qselection(epigeneticTracks.father[,11:22], epigeneticTracks.father$paternal,  qvector = c(1:12), method = "lm", criterion = "aic",  cluster = FALSE) 

obj.maternalOld = qselection(epigeneticTracks.mother[,11:23], epigeneticTracks.mother$maternalOld,  qvector = c(1:12), method = "lm", criterion = "aic",  cluster = FALSE) 
lm.maternalOld<-lm(maternalOld~RepliSeqGm12878WaveSignal.RepliSeqWaveSignal.12878 + BisulfiteSeq.ovary.BisulfiteSeq.ovary + recombRate.decodeAvg + H3k36me3.12878.H3k36me3.12878 + weightedCoverage.coverage +  H3k27me3.12878.H3k27me3.12878, data=epigeneticTracks.mother)
tval.maternalOld=coef(summary(lm.maternalOld))[,3]
tval.maternalOld<-data.frame(track=c("intercept","Replication timing",  "Methylation","Recombination rate", "H3k36me3", "Weighted coverage",  "H3k27me3"),`t value`=tval.maternalOld)
tval.maternalOld$isSignificant="Not significant"
tval.maternalOld$isSignificant[coef(summary(lm.maternalOld))[,4]<0.05]="Significant"
tval.maternalOld<-tval.maternalOld[-1,]
p.maternalOld<-ggplot(tval.maternalOld, aes(track,`t.value`)) + geom_bar(stat="identity", aes(fill=isSignificant)) + xlab("") +  theme(axis.text.x = element_text(angle = 90, hjust = 1,  colour="black",,size=20)) + theme(axis.text.y = element_text(colour="black",,size=20))+guides(fill=FALSE)


obj.paternalOld = qselection(epigeneticTracks.father[,11:23], epigeneticTracks.father$paternalOld,  qvector = c(1:12), method = "lm", criterion = "aic",  cluster = FALSE) 
lm.paternalOld<-lm(paternalOld~BisulfiteSeq.testis.BisulfiteSeq.testis + recombRate.decodeAvg+ H3k4me1.12878.H3k4me1.12878+ H3k27ac.12878.H3k27ac.12878 + H3k4me3.12878.H3k4me3.12878 + H3k36me3.12878.H3k36me3.12878+ weightedCoverage.coverage, data=epigeneticTracks.father)
tval.paternalOld=coef(summary(lm.paternalOld))[,3]
tval.paternalOld<-data.frame(track=c("intercept", "Methylation" , "Recombination rate",  "H3k4me1" , "H3k27ac", "H3k4me3", "H3k36me3" , "Weighted coverage"),`t value`=tval.paternalOld)
tval.paternalOld$isSignificant="Not significant"
tval.paternalOld$isSignificant[coef(summary(lm.paternalOld))[,4]<0.05]="Significant"
tval.paternalOld<-tval.paternalOld[-1,]
p.paternalOld<-ggplot(tval.paternalOld, aes(track,`t.value`)) + geom_bar(stat="identity", aes(fill=isSignificant)) + xlab("") +  theme(axis.text.x = element_text(angle = 90, hjust = 1,  colour="black",,size=20)) + theme(axis.text.y = element_text(colour="black",,size=20))+guides(fill=FALSE)


obj.maternalYoung = qselection(epigeneticTracks.mother[,11:23], epigeneticTracks.mother$maternalYoung,  qvector = c(1:12), method = "lm", criterion = "aic",  cluster = FALSE) 
lm.maternalYoung<-lm(maternalYoung~BisulfiteSeq.ovary.BisulfiteSeq.ovary + recombRate.decodeAvg + H3k27ac.12878.H3k27ac.12878, data=epigeneticTracks.mother)
tval.maternalYoung=coef(summary(lm.maternalYoung))[,3]
tval.maternalYoung<-data.frame(track=c("intercept", "Methylation","Recombination rate", "H3k27ac"),`t value`=tval.maternalYoung)
tval.maternalYoung$isSignificant="Not significant"
tval.maternalYoung$isSignificant[coef(summary(lm.maternalYoung))[,4]<0.05]="Significant"
levels(tval.maternalYoung$isSignificant)<-c("Not significant","Significant")
tval.maternalYoung<-tval.maternalYoung[-1,]
p.maternalYoung<-ggplot(tval.maternalYoung, aes(track,`t.value`)) + geom_bar(stat="identity", aes(fill=isSignificant)) + xlab("") +  theme(axis.text.x = element_text(angle = 90, hjust = 1,  colour="black",,size=20)) + theme(axis.text.y = element_text(colour="black",,size=20))+guides(fill=FALSE)+scale_fill_manual(values=c("steelblue1", "grey"))


obj.paternalYoung = qselection(epigeneticTracks.father[,11:23], epigeneticTracks.father$paternalYoung,  qvector = c(1:12), method = "lm", criterion = "aic",  cluster = FALSE) 
lm.paternalYoung<-lm(paternalYoung~recombRate.decodeAvg + BisulfiteSeq.testis.BisulfiteSeq.testis + weightedCoverage.coverage + H3k36me3.12878.H3k36me3.12878 + H3k27ac.12878.H3k27ac.12878, data=epigeneticTracks.father)
tval.paternalYoung=coef(summary(lm.paternalYoung))[,3]
tval.paternalYoung<-data.frame(track=c("intercept","Recombination rate","Methylation", "WeightedCoverage", "H3k36me3", "H3k27ac"),`T value`=tval.paternalYoung)
tval.paternalYoung$isSignificant="Not significant"
tval.paternalYoung$isSignificant[coef(summary(lm.paternalYoung))[,4]<0.05]="Significant"
tval.paternalYoung<-tval.paternalYoung[-1,]
p.paternalYoung<-ggplot(tval.paternalYoung, aes(track,`t.value`)) + geom_bar(stat="identity", aes(fill=isSignificant)) + xlab("") +  theme(axis.text.x = element_text(angle = 90, hjust = 1,  colour="black",,size=20)) + theme(axis.text.y = element_text(colour="black",,size=20))+guides(fill=FALSE)+scale_fill_manual(values=c("grey", "steelblue1"))

plot_grid(p.paternalYoung,p.paternalOld,p.maternalYoung, p.maternalOld, labels=c("Paternal (young)","Paternal (old)","Maternal (young)","Maternal (old)"), nrow=2, label_size = 17)
#ggsave("../figures/tracksRegression.svg", scale=2)
#ggsave("../figures/tracksRegression.png", scale=2)

```

Multiple regression with Epigenomic tracks
```{r regressionWithOrigEpigenomicTracks}
library(FWDselect)
allMutationRates.1MB<-read.delim("allMutationRates.1MB.bed", header=T, sep="\t", as.is=T)
#allMutationRates.1MB<-read.delim("allCounts.1MB.bed", header=T, sep="\t", as.is=T)
epigeneticTracks<-read.delim("countsWithTracks.bed", header=T, as.is=T, sep="\t")
callableBases.1MB<-read.delim("callableBases.1MB.bed", sep="\t", header=F)
colnames(callableBases.1MB)<-c("chrom", "start", "end", "V4", "numBP", "windowSize", "propCallable")
allMutationRates.1MB<-allMutationRates.1MB[which(callableBases.1MB$propCallable>0.5),]

epigeneticTracks<-cbind(allMutationRates.1MB, epigeneticTracks[,11:22])
rows.na <- apply(epigeneticTracks, 1, function(x) any(is.na(x)))
epigeneticTracks<-epigeneticTracks[which(!rows.na),]

epigeneticTracks$fetal.testes.DHSs.fetal.testes.DHSs<-log(epigeneticTracks$fetal.testes.DHSs.fetal.testes.DHSs)
epigeneticTracks$BisulfiteSeq.testis.BisulfiteSeq.testis<-log(epigeneticTracks$BisulfiteSeq.testis.BisulfiteSeq.testis)
epigeneticTracks$fetal.ovary.DHSs.fetal.ovary.DHSs<-log(epigeneticTracks$fetal.ovary.DHSs.fetal.ovary.DHSs)
epigeneticTracks$ovary.DHSs.ovary.DHSs<-log(epigeneticTracks$ovary.DHSs.ovary.DHSs)
epigeneticTracks$Ovary.H3K27ac<-log(epigeneticTracks$Ovary.H3K27ac)
epigeneticTracks$Ovary.H3K9me3<-log(epigeneticTracks$Ovary.H3K9me3)
epigeneticTracks$Ovary.H3K4me1<-log(epigeneticTracks$Ovary.H3K4me1)
epigeneticTracks$Ovary.H3K36me3<-log(epigeneticTracks$Ovary.H3K36me3)
epigeneticTracks$BisulfiteSeq.ovary.BisulfiteSeq.ovary<-log(epigeneticTracks$BisulfiteSeq.ovary.BisulfiteSeq.ovary)

write.table(epigeneticTracks,"epigeneticTracksWithRates.bed", sep="\t", col.names=T, row.names=F, quote=F)

cor(epigeneticTracks$fetal.ovary.DHSs.fetal.ovary.DHSs,epigeneticTracks$fetal.testes.DHSs.fetal.testes.DHSs)
#[1] 0.9428211
cor(epigeneticTracks$fetal.ovary.DHSs.fetal.ovary.DHSs,epigeneticTracks$ovary.DHSs.ovary.DHSs)
#[1] 0.9013896

epigeneticTracks.mother<-subset(epigeneticTracks, select=c(chrom,start, end, mid, paternalOld, paternalYoung, maternalOld, maternalYoung, paternal, maternal, recombRate.decodeAvg,gcContent.gcContent, replicationTiming.repTime  ,fetal.ovary.DHSs.fetal.ovary.DHSs, Ovary.H3K27ac, Ovary.H3K9me3, Ovary.H3K4me1, Ovary.H3K36me3,BisulfiteSeq.ovary.BisulfiteSeq.ovary))
epigeneticTracks.father<-subset(epigeneticTracks, select=c(chrom,start, end, mid, paternalOld, paternalYoung, maternalOld, maternalYoung, paternal, maternal, recombRate.decodeAvg,gcContent.gcContent, replicationTiming.repTime, fetal.testes.DHSs.fetal.testes.DHSs, Ovary.H3K27ac, Ovary.H3K9me3, Ovary.H3K4me1, Ovary.H3K36me3, BisulfiteSeq.testis.BisulfiteSeq.testis))

library(robust)

obj.maternalOld = qselection(epigeneticTracks.mother[,11:19], epigeneticTracks$maternalOld,  qvector = c(1:8), method = "lm", criterion = "variance",  cluster = FALSE) 
lm.maternalOld<-rlm(maternalOld~fetal.ovary.DHSs.fetal.ovary.DHSs + BisulfiteSeq.ovary.BisulfiteSeq.ovary + recombRate.decodeAvg + Ovary.H3K9me3 + Ovary.H3K36me3 + Ovary.H3K4me1, data=epigeneticTracks.mother,maxit=40)
tval.maternalOld=coef(summary(lm.maternalOld))[,3]
tval.maternalOld<-data.frame(track=c("intercept", "DHSs","Methylation","RecombRate","H3K9me3","H3K36me3","H3K4me1"),`t value`=tval.maternalOld)
tval.maternalOld<-tval.maternalOld[-1,]
p.maternalOld<-ggplot(tval.maternalOld, aes(track,`t.value`)) + geom_bar(stat="identity", fill="steelblue1") + xlab("") + ylab("T value")  +theme(axis.text.x = element_text(angle = 45, hjust = 1,  colour="black",,size=20)) + theme(axis.text.y = element_text(colour="black",,size=20))+guides(fill=FALSE)+scale_fill_manual(values=c("steelblue1"))

lmRob.maternalOld<-lmRob(Ovary.H3K36me3~fetal.ovary.DHSs.fetal.ovary.DHSs + BisulfiteSeq.ovary.BisulfiteSeq.ovary + recombRate.decodeAvg + Ovary.H3K9me3  + Ovary.H3K4me1, data=epigeneticTracks.mother)
lmrob.paternalOld<-lmRob(paternalOld~Ovary.H3K9me3 + recombRate.decodeAvg + Ovary.H3K36me3 + BisulfiteSeq.testis.BisulfiteSeq.testis + Ovary.H3K4me1,data=epigeneticTracks.father)


obj.paternalOld = qselection(epigeneticTracks.father[,11:19], epigeneticTracks$paternalOld,  qvector = c(1:8), method = "lm", criterion = "variance",  cluster = FALSE) 
lm.paternalOld<-rlm(paternalOld~Ovary.H3K9me3 + recombRate.decodeAvg + Ovary.H3K36me3 + BisulfiteSeq.testis.BisulfiteSeq.testis + Ovary.H3K4me1,data=epigeneticTracks.father)
tval.paternalOld=coef(summary(lm.paternalOld))[,3]
tval.paternalOld<-data.frame(track=c("intercept", "H3K9me3","RecombRate","H3K36me3","Methylation","H3K4me1"),`t value`=tval.paternalOld)
tval.paternalOld<-tval.paternalOld[-1,]
p.paternalOld<-ggplot(tval.paternalOld, aes(track,`t.value`)) + geom_bar(stat="identity", aes(fill="steelblue1")) + xlab("") + ylab("T value")  +  theme(axis.text.x = element_text(angle = 45, hjust = 1,  colour="black",,size=20)) + theme(axis.text.y = element_text(colour="black",,size=20))+guides(fill=FALSE)+scale_fill_manual(values=c("steelblue1"))

library(car)
outlierTest(lm.paternalOld)
ncvTest(lm.paternalOld)
qqPlot(lm.paternalOld, main="QQ Plot")
avPlots(lm.paternalOld)
outlierTest(lm.paternalOld)

obj.maternalYoung = qselection(epigeneticTracks.mother[,11:19], epigeneticTracks$maternalYoung,  qvector = c(1:8), method = "lm", criterion = "variance",  cluster = FALSE) 
lm.maternalYoung<-rlm(maternalYoung ~ BisulfiteSeq.ovary.BisulfiteSeq.ovary + fetal.ovary.DHSs.fetal.ovary.DHSs, data=epigeneticTracks)
tval.maternalYoung=coef(summary(lm.maternalYoung))[,3]
tval.maternalYoung<-data.frame(track=c("intercept", "Methylation"  , "DHSs"),`t value`=tval.maternalYoung)
tval.maternalYoung<-tval.maternalYoung[-1,]
p.maternalYoung<-ggplot(tval.maternalYoung, aes(track,`t.value`)) + geom_bar(stat="identity", aes(fill="steelblue1")) + xlab("") + ylab("T value")  + theme(axis.text.x = element_text(angle = 45, hjust = 1,  colour="black",,size=20)) + theme(axis.text.y = element_text(colour="black",,size=20)) + guides(fill=FALSE)+scale_fill_manual(values=c("steelblue1"))

obj.paternalYoung = qselection(epigeneticTracks.father[,11:19], epigeneticTracks$paternalYoung,  qvector = c(1:8), method = "lm", criterion = "variance",  cluster = FALSE) 
lm.paternalYoung<-rlm(paternalYoung~Ovary.H3K9me3 + recombRate.decodeAvg + fetal.testes.DHSs.fetal.testes.DHSs + Ovary.H3K4me1 + Ovary.H3K36me3, data=epigeneticTracks.father)
tval.paternalYoung=coef(summary(lm.paternalYoung))[,3]
tval.paternalYoung<-data.frame(track=c("intercept", "H3K9me3","RecombRate","DHSs", "H3K4me1","H3K36me3"),`t value`=tval.paternalYoung)
tval.paternalYoung<-tval.paternalYoung[-1,]
p.paternalYoung<-ggplot(tval.paternalYoung, aes(track,`t.value`)) + geom_bar(stat="identity", aes(fill="steelblue1")) + xlab("") + ylab("T value")  + theme(axis.text.x = element_text(angle = 45, hjust = 1,  colour="black",,size=20)) + theme(axis.text.y = element_text(colour="black",,size=20))+guides(fill=FALSE)+scale_fill_manual(values=c("steelblue1"))

ggplot(tval.paternalOld, aes(track,`t.value`)) + geom_bar(stat="identity", aes(fill=isSignificant))+scale_fill_manual(values=c("grey","steelblue1")) 
ggsave("../figures/tracksRegression.caption.svg")

plot_grid(p.paternalYoung,p.paternalOld,p.maternalYoung, p.maternalOld, labels=c("  Paternal (young)","  Paternal (old)","Maternal (young)","  Maternal (old)"), nrow=2, label_size = 17)
ggsave("../figures/tracksRegression.svg", scale=2)
ggsave("../figures/tracksRegression.png", scale=2)

obj.maternal = qselection(epigeneticTracks[,11:22], epigeneticTracks$maternal,  qvector = c(1:11), method = "lm", criterion = "aic",  cluster = FALSE) 
obj.paternal = qselection(epigeneticTracks[,11:22], epigeneticTracks$paternal,  qvector = c(1:11), method = "lm", criterion = "variance",  cluster = FALSE) 

```

Poisson regression with Encode Tracks
```{r encodeTracksCorrelation}
library(car)
countsWithTracks<-read.delim("countsWithTracks.bed", header=T, as.is=T, sep="\t")
rows.na <- apply(countsWithTracks[,11:22], 1, function(x) any(is.na(x)))
countsWithTracks<-countsWithTracks[which(!rows.na),]

for (i in 11:22) {
  countsWithTracks[,i]<-countsWithTracks[,i]/sum(countsWithTracks[,i])
}

glm.paternal <- glm(paternal ~ fetal.ovary.DHSs.fetal.ovary.DHSs + Ovary.H3K9me3 + BisulfiteSeq.ovary.BisulfiteSeq.ovary+ recombRate.decodeAvg + BisulfiteSeq.testis.BisulfiteSeq.testis + Ovary.H3K4me1 + Ovary.H3K36me3, family="poisson", data=countsWithTracks)
glm.paternal <- glm(paternal ~ recombRate.decodeAvg + gcContent.gcContent+ replicationTiming.repTime+ fetal.testes.DHSs.fetal.testes.DHSs+  Ovary.H3K9me3 , family="poisson", data=countsWithTracks)
vif(glm.paternal)

obj.paternal = qselection(countsWithTracks[,c(11:22)], countsWithTracks[,9], qvector = c(1:11), method = "glm", criterion = "bic", family="poisson", cluster = FALSE) 
summary(glm.paternal <- glm(paternal ~ recombRate.decodeAvg + Ovary.H3K9me3 + BisulfiteSeq.ovary.BisulfiteSeq.ovary+ fetal.ovary.DHSs.fetal.ovary.DHSs+ replicationTiming.repTime + BisulfiteSeq.testis.BisulfiteSeq.testis + Ovary.H3K4me1 + Ovary.H3K36me3 , family="poisson", data=countsWithTracks))
vif(glm.paternal)

mods<-fitall(countsWithTracks[,9], countsWithTracks[,c(11:22)], method = "glm")
## Extract AIC from each model
fitall.out.aic <- t(sapply(mods, extractAIC))

## Create an order list of increasing AIC
final.out.order <- order(fitall.out.aic[,2])

## Show the result for the best model
mods[final.out.order][1]


obj.maternal = qselection(countsWithTracks[,c(11:22)], countsWithTracks[,10], qvector = c(1:11), method = "glm", criterion = "bic", family="poisson", cluster = FALSE, nfolds=10) 
summary(glm.maternal<-glm(maternal~recombRate.decodeAvg + fetal.ovary.DHSs.fetal.ovary.DHSs + BisulfiteSeq.ovary.BisulfiteSeq.ovary + BisulfiteSeq.testis.BisulfiteSeq.testis + replicationTiming.repTime,family="poisson", data=countsWithTracks))

obj.paternalOld = qselection(countsWithTracks[,c(11:22)], countsWithTracks[,5], qvector = c(1:11), method = "glm", criterion = "bic", family="poisson", cluster = FALSE) 
obj.paternalYoung = qselection(countsWithTracks[,c(11:22)], countsWithTracks[,6], qvector = c(1:11), method = "glm", criterion = "bic", family="poisson", cluster = FALSE) 
obj.maternalOld = qselection(countsWithTracks[,c(11:22)], countsWithTracks[,7], qvector = c(1:11), method = "glm", criterion = "bic", family="poisson", cluster = FALSE) 
obj.maternalYoung = qselection(countsWithTracks[,c(11:22)], countsWithTracks[,8], qvector = c(1:11), method = "glm", criterion = "bic", family="poisson", cluster = FALSE) 

glm.paternal <- glm(paternal ~ recombRate.decodeAvg + Ovary.H3K9me3 + replicationTiming.repTime + Ovary.H3K36me3 + Ovary.H3K4me1 + BisulfiteSeq.testis.BisulfiteSeq.testis , family="poisson", data=countsWithTracks)
vif(glm.paternal)

glm.paternalOld <- glm(paternalOld ~ recombRate.decodeAvg+ Ovary.H3K9me3+ replicationTiming.repTime+ Ovary.H3K36me3, Ovary.H3K4me1+ BisulfiteSeq.testis.BisulfiteSeq.testis, family="poisson", data=countsWithTracks)
glm.paternalYoung <- glm(paternalYoung ~ recombRate.decodeAvg, fetal.ovary.DHSs.fetal.ovary.DHSs, BisulfiteSeq.ovary.BisulfiteSeq.ovary, Ovary.H3K4me1, replicationTiming.repTime, BisulfiteSeq.testis.BisulfiteSeq.testis, Ovary.H3K9me3, family="poisson", data=countsWithTracks)
glm.maternalOld <- glm(maternalOld ~ recombRate.decodeAvg, Ovary.H3K9me3, BisulfiteSeq.testis.BisulfiteSeq.testis, fetal.ovary.DHSs.fetal.ovary.DHSs, replicationTiming.repTime, BisulfiteSeq.ovary.BisulfiteSeq.ovary , family="poisson", data=countsWithTracks)
glm.maternalYoung <- glm(maternalYoung ~ recombRate.decodeAvg BisulfiteSeq.testis.BisulfiteSeq.testis, fetal.ovary.DHSs.fetal.ovary.DHSs, replicationTiming.repTime , family="poisson", data=countsWithTracks)

```

Compare with external DNMs segments
```{r externalDNMSegments}
setwd("/Users/wendy/work/denovo/denovos.parentalorigin/denovos.radboud.filtered.filteredByCallableRegions/")
allMutationRates.1MB<-read.delim("allMutationRates.1MB.bed", header=T, sep="\t", as.is=T)

counts.Kong.1MB<-read.delim("../external.data/DNMs_Kong.hg19.1MB.bed", header=F, sep="\t", as.is=T)
counts.gonl.1MB<-read.delim("../external.data/DNMs_gonl.1MB.bed", header=F, sep="\t", as.is=T)
counts.gonl.father.1MB<-read.delim("../external.data/DNMs_gonl.father.1MB.bed", header=F, sep="\t", as.is=T)
counts.gonl.mother.1MB<-read.delim("../external.data/DNMs_gonl.mother.1MB.bed", header=F, sep="\t", as.is=T)
callableBases.1MB<-read.delim("callableBases.1MB.bed", sep="\t", header=F)
colnames(callableBases.1MB)<-c("chrom", "start", "end", "V4", "numBP", "windowSize", "propCallable")

cor(counts.Kong.1MB$V4, counts.gonl.1MB$V4)
cor(allCounts.1MB$paternal+allCounts.1MB$maternal, counts.gonl.1MB$V4)
cor(counts.Kong.1MB$V4, allCounts.1MB$paternal+allCounts.1MB$maternal)

cor.test(counts.Kong.1MB$V4, counts.gonl.1MB$V4,conf.level = 0.95)
cor.test(allCounts.1MB$paternal+allCounts.1MB$maternal, counts.gonl.1MB$V4,conf.level = 0.95)
cor.test(counts.Kong.1MB$V4, allCounts.1MB$paternal+allCounts.1MB$maternal,conf.level = 0.95)
cor.test(counts.Kong.1MB$V4+counts.gonl.1MB$V4, allCounts.1MB$paternal+allCounts.1MB$maternal,conf.level = 0.95)

cor.test(allCounts.1MB$paternal,counts.gonl.father.1MB$V4)
cor.test(allCounts.1MB$maternal,counts.gonl.mother.1MB$V4)
cor.test(allCounts.1MB$paternal,counts.gonl.mother.1MB$V4)
cor.test(allCounts.1MB$maternal,counts.gonl.father.1MB$V4)

cor((allCounts.1MB$paternal+allCounts.1MB$maternal)[which(callableBases.1MB$propCallable>0.5)], counts.gonl.1MB$V4[which(callableBases.1MB$propCallable>0.5)])

```

Pearson's correlation with tracks
```{r correlationWithEncodeTrakcs}
library(ppcor)
library(reshape)
countsWithTracks<-read.delim("countsWithTracks.bed", as.is=T, header=T, sep="\t")

rows.na <- apply(countsWithTracks[,11:22], 1, function(x) any(is.na(x)))

#pcor.test(countsWithTracks[which(!rows.na),9],countsWithTracks[which(!rows.na),11],
#          countsWithTracks[ which(!rows.na),10])$estimate

pcors.paternalOld<-pcor(countsWithTracks[which(!rows.na),c(5,11:22)], method="pearson")$estimate
pcors.paternalYoung<-pcor(countsWithTracks[which(!rows.na),c(6,11:22)], method="pearson")$estimate
pcors.maternalOld<-pcor(countsWithTracks[which(!rows.na),c(7,11:22)], method="pearson")$estimate
pcors.maternalYoung<-pcor(countsWithTracks[which(!rows.na),c(8,11:22)], method="pearson")$estimate
pcors.paternal<-pcor(countsWithTracks[which(!rows.na),c(9,11:22)], method="pearson")$estimate
pcors.maternal<-pcor(countsWithTracks[which(!rows.na),c(10,11:22)], method="pearson")$estimate
pcors<-cbind(pcors.paternalOld[2:13,1],pcors.paternalYoung[2:13,1],pcors.maternalOld[2:13,1],pcors.maternalYoung[2:13,1], pcors.paternal[2:13,1],pcors.maternal[2:13,1])
colnames(pcors)<-c("paternalOld", "paternalYoung", "maternalOld", "maternalYoung", "paternal", "maternal")
pcors.melt<-melt(pcors)

cors<-cor(countsWithTracks[,5:22], use="complete.obs", method="pearson")
cors<-cors[7:18,1:6]
cors.melt<-melt(cors)

#H3k9me3.K562 -ve with paternal but H3k9me3.12878 +ve with paternal
pval.Corr<-as.data.frame(matrix(ncol = 6, nrow = 12))
pval.PCorr<-as.data.frame(matrix(ncol = 6, nrow = 12))
for (i in 5:10) {
  for (j in 11:22) {
    #print (paste(colnames(allCounts.1MB.withCovariates)[i], colnames(allCounts.1MB.withCovariates)[j]))
    pval.Corr[j-10,i-4]<-cor.test(countsWithTracks[,i], countsWithTracks[,j])$p.value
    pval.PCorr[j-10,i-4]<-pcor.test(countsWithTracks[,i], countsWithTracks[,j])$p.value
  }
}
colnames(pval.Corr)<-colnames(countsWithTracks)[5:10]
rownames(pval.Corr)<-colnames(countsWithTracks)[11:22]
colnames(pval.PCorr)<-colnames(countsWithTracks)[5:10]
rownames(pval.PCorr)<-colnames(countsWithTracks)[11:22]

cor.test(countsWithTracks$`paternal`, countsWithTracks$`BisulfiteSeq.testis`)
cor.test(countsWithTracks$`maternal`, countsWithTracks$`BisulfiteSeq.ovary`)
cor.test(countsWithTracks$`paternal`, countsWithTracks$`replicationTiming$repTime`)
cor.test(countsWithTracks$`maternal`, countsWithTracks$`replicationTiming$repTime`)
cor.test(countsWithTracks$`paternal`, countsWithTracks$`Ovary.H3K9me3`)
cor.test(countsWithTracks$`maternal`, countsWithTracks$`Ovary.H3K9me3`)
cor.test(countsWithTracks$`paternal`, countsWithTracks$`recombRate`)
cor.test(countsWithTracks$`maternal`, countsWithTracks$`recombRate`)
cor.test(countsWithTracks$`maternal`, countsWithTracks$`Ovary.H3K36me3`)
cor.test(countsWithTracks$`paternal`, countsWithTracks$`Ovary.H3K36me3`)



qplot(x=Var2, y=Var1, data=cors.melt, fill=`value`, geom="tile") + xlab("")+ylab("")+scale_fill_gradient2(name="Correlation\n(Pearson)")+ theme(axis.text.x = element_text(angle = 90, hjust = 1,  colour="black",,size=20)) + 
  theme(axis.text.y = element_text( colour="black",size=20)) + geom_text(aes(fill = cors.melt$value, label = round(cors.melt$value, 2)), size=7) +
  scale_y_discrete(breaks=names(cors[,1]), labels=c("Recombination rate", "GC Content", "Replication Timing", "DHSs (fetal testes)", "BisulfiteSeq (adult testis)", "DHSs (fetal ovary)", "DHSs (adult ovary)","H3K27ac (adult ovary)","H3K9me3 (adult ovary)", "H3K4me1 (adult ovary)", "H3K36me3 (adult ovary)", "BisulfiteSeq (adult ovary)")) +
  scale_x_discrete(breaks=names(cors[1,]), labels=c("Paternal (old)", "Paternal (young)", "Maternal (old)","Maternal(young)", "Paternal","Maternal" ))
ggsave("../figures/corrMutationRate.png")
ggsave("../figures/corrMutationRate.svg", scale=2)

qplot(x=X2, y=X1, data=pcors.melt, fill=`value`, geom="tile") + xlab("")+ylab("")+scale_fill_gradient2(name="Correlation\n(Pearson)")+ theme(axis.text.x = element_text(angle = 90, hjust = 1,  colour="black",,size=20)) + 
  theme(axis.text.y = element_text( colour="black",size=20)) + geom_text(aes(fill = pcors.melt$value, label = round(pcors.melt$value, 2)), size=7) +
  scale_y_discrete(breaks=names(pcors[,1]), labels=c("Recombination rate", "GC Content", "Replication Timing", "DHSs (fetal testes)", "BisulfiteSeq (adult testis)", "DHSs (fetal ovary)", "DHSs (adult ovary)","H3K27ac (adult ovary)","H3K9me3 (adult ovary)", "H3K4me1 (adult ovary)", "H3K36me3 (adult ovary)", "BisulfiteSeq (adult ovary)")) +
  scale_x_discrete(breaks=names(pcors[1,]), labels=c("Paternal (old)", "Paternal (young)", "Maternal (old)","Maternal(young)", "Paternal","Maternal" ))
ggsave("../figures/pcorrMutationRate.png")
ggsave("../figures/pcorrMutationRate.svg", scale=2)

```

####correlation with genomic features in each state
```{r corGenomicFeatures}
library(reshape)
require(cowplot)
phmmStates<-read.delim("phmm.1MB.states.bed", header=T)
#countsWithTracks<-read.delim("countsWithTracks.bed", header=T, sep="\t")
epigeneticTracks<-read.delim("epigeneticTracks.1MB.bed", header=T, sep="\t")
allMutationRates.1MB<-read.delim("allMutationRates.1MB.bed", header=T, sep="\t", as.is=T)

#phmmStates<-subset(phmmStates, state!=0)

epigeneticTracks<-epigeneticTracks[,c("recombRate.decodeAvg","gcContent.gcContent", "RepliSeqGm12878WaveSignal.RepliSeqWaveSignal.12878","BisulfiteSeq.ovary.BisulfiteSeq.ovary","H3k9me3.12878", "H3k27ac.12878.H3k27ac.12878", "H3k4me1.12878.H3k4me1.12878","H3k4me3.12878.H3k4me3.12878","RnaSeq.12878.RnaSeq.12878", "H3k27me3.12878.H3k27me3.12878", "H3k36me3.12878.H3k36me3.12878","OpenChromDnase.12878.OpenChromDnase.12878","weightedCoverage.coverage")]

epigeneticTracks<-cbind(allMutationRates.1MB, epigeneticTracks)

#countsWithTracks$
phmmNoState1Tracks<-epigeneticTracks[which(phmmStates$state!=3 & phmmStates$state!=0),]
phmmState1Tracks<-epigeneticTracks[which(phmmStates$state==3),]


#pvals
pValsState1<-rep(-1,13)
for (i in 11:23) {
  w.test<-wilcox.test(phmmState1Tracks[,i],phmmNoState1Tracks[,i])
 # if (w.test$p.value<0.05/13) {
    print(colnames(phmmState1Tracks)[i])
  print (w.test)
  #}  
}

#paternal high
phmmNoState4Tracks<-countsWithTracks[which(phmmStates$state!=2),]
phmmState4Tracks<-countsWithTracks[which(phmmStates$state==2),]

#pvals
pValsState1<-rep(-1,12)
for (i in 11:22) {
  w.test<-wilcox.test(phmmState4Tracks[,i],phmmNoState1Tracks[,i])
  if (w.test$p.value<0.05/12) {
    print(colnames(phmmState4Tracks)[i])
    print(w.test$p.value)
  }  
}

countsWithTracksWithStates<-countsWithTracks
countsWithTracksWithStates$state<-"High maternal rate"
countsWithTracksWithStates$state[which(phmmStates$state==1)]<-"In between"
countsWithTracksWithStates$state[which(phmmStates$state==4)]<-"Average rate"
countsWithTracksWithStates$state[which(phmmStates$state==2)]<-"High paternal rate"
countsWithTracksWithStates<-countsWithTracksWithStates[,c(11:23)]
countsWithTracksWithStates$state<-as.factor(countsWithTracksWithStates$state)


ggplot(countsWithTracksWithStates[,c(1,13)], aes(x=state, y=recombRate.decodeAvg, fill=as.factor(state)))+geom_violin()+ guides(fill = guide_legend(override.aes = list(colour = NULL)))+ theme(legend.position="top", legend.text=element_text(size=20))
ggsave("../figures/violinPlotStates.legend.svg", scale=2)


for (i in 1:12) {
  countsWithTracksWithStates[,i]<-countsWithTracksWithStates[,i]/mean(countsWithTracksWithStates[,i],na.rm = T)
}

plot.recomb<-ggplot(countsWithTracksWithStates[,c("recombRate.decodeAvg","state")], aes(x=as.factor(state), y=recombRate.decodeAvg, fill=as.factor(state)))+geom_violin()+ theme(legend.position="none")+xlab("")+ylab("")+ scale_x_discrete(breaks=NULL)
plot.H3k9me3<-ggplot(countsWithTracksWithStates[,c("Ovary.H3K9me3","state")], aes(x=as.factor(state), y=Ovary.H3K9me3, fill=as.factor(state)))+geom_violin()+ theme(legend.position="none")+xlab("")+ylab("")+ scale_x_discrete(breaks=NULL)
plot.bisulfiteSeqTestis<-ggplot(countsWithTracksWithStates[,c("BisulfiteSeq.testis.BisulfiteSeq.testis","state")], aes(x=as.factor(state), y=BisulfiteSeq.testis.BisulfiteSeq.testis, fill=as.factor(state)))+geom_violin()+ theme(legend.position="none")+xlab("")+ylab("")+ scale_x_discrete(breaks=NULL)
plot.bisulfiteSeqOvary<-ggplot(countsWithTracksWithStates[,c("BisulfiteSeq.ovary.BisulfiteSeq.ovary","state")], aes(x=as.factor(state), y=BisulfiteSeq.ovary.BisulfiteSeq.ovary, fill=as.factor(state)))+geom_violin()+ theme(legend.position="none")+xlab("")+ylab("")+ scale_x_discrete(breaks=NULL)
plot_grid(plot.recomb,plot.H3k9me3,plot.bisulfiteSeqTestis,plot.bisulfiteSeqOvary,labels=c("Recombination rate","H3K9me3 (adult ovary)","BisulfiteSeq (adult testis)","BisulfiteSeq (adult ovary)"), nrow=2, label_size = 17)

ggsave("../figures/violinplot.svg", scale=2)
```

```{r simulateStates}
#try simulate
y <- rnorm(2659)
trst <- c(8.023522e-01, 0.19764779, 7.159247e-157, 6.578989e-41, 6.485687e-30, 0.04352027,  3.468065e-01, 6.096733e-01, 3.026966e-130, 0.05376114,  8.898983e-01, 5.634058e-02, 1.214385e-02, 0.12774813,  1.418555e-01, 7.182525e-01)

df <- data.frame(y=rep(1:2659))
f4asModel <- depmix(y~1,data=df,trst=trst,inst=c(0.25,0.25,0.25,0.25),nti=2659,nst=4)

tracksOnly<-countsWithTracks[,c(11:22)]

countsWithTracksWithStatesNums<-countsWithTracksWithStates
countsWithTracksWithStatesNums$stateNum<-1
countsWithTracksWithStatesNums$stateNum[which(countsWithTracksWithStatesNums$state=="In between")]<-2
countsWithTracksWithStatesNums$stateNum[which(countsWithTracksWithStatesNums$state=="Average rate")]<-3
countsWithTracksWithStatesNums$stateNum[which(countsWithTracksWithStatesNums$state=="High paternal rate")]<-4

observedDiff<-data.frame(state1=rep(0,12), state2=rep(0,12), state3=rep(0,12),state4=rep(0,12))
for (j in 1:12) {
  for (state in 1:4) {
      observedDiff[j,state]<-median(countsWithTracksWithStatesNums[which(countsWithTracksWithStatesNums$stateNum==state),j], na.rm=T)-median(countsWithTracksWithStatesNums[,j], na.rm=T)
    }
}

#simulation
nsim=1000
simCompare<-data.frame(state1=rep(0,12), state2=rep(0,12), state3=rep(0,12),state4=rep(0,12))

for (i in 1:10000) {
  f4.simulated<-simulate(f4asModel, nsim=1)
  simStates<-slot(f4.simulated, "states")
  for (j in 1:12) {
    for (state in 1:4) {
      diff<-median(countsWithTracksWithStatesNums[which(simStates[,1]==state),j], na.rm=T)-median(countsWithTracksWithStatesNums[,j], na.rm=T)
      if (observedDiff[j,state]>0 && diff>observedDiff[j,state]) {
        simCompare[j,state]=simCompare[j,state]+1
      } else if (observedDiff[j,state]<0 && diff<observedDiff[j,state]) {
        simCompare[j,state]=simCompare[j,state]+1
      }
    }
  }
}

simSignificance<-simCompare
for (i in 1:4) {
  simSignificance[which(simCompare[,i]<500),i]<-1
  simSignificance[which(simCompare[,i]>500),i]<-0
}
simSignificance$features<-1:12
  
  #c("Recombination rate", "GC Content", "Replication Timing", "DHSs (fetal testes)", "BisulfiteSeq (adult testis)", "DHSs (fetal ovary)", "DHSs (adult ovary)","H3K27ac (adult ovary)","H3K9me3 (adult ovary)", "H3K4me1 (adult ovary)", "H3K36me3 (adult ovary)", "BisulfiteSeq (adult ovary)")

simSignificance.melt<-melt(simSignificance, id="features")
colnames(simSignificance.melt)<-c("features", "state", "significance")
simSignificance.melt$state<-sub("state","", simSignificance.melt$state)

simSignificance.melt$sign="-"
for (j in 1:12) {
  for (i in 1:4) {
      if(observedDiff[j,i]>0) {
        simSignificance.melt$sign[which(simSignificance.melt$feature==j & simSignificance.melt$state==i)]<-"+"
    }
}
}

simSignificance.melt$status<-"not significant"
simSignificance.melt$status[which(simSignificance.melt$significance==1 & simSignificance.melt$sign=="+")]<-"enriched"
simSignificance.melt$status[which(simSignificance.melt$significance==1 & simSignificance.melt$sign=="-")]<-"depleted"


qplot(x=state, y=features, data=simSignificance.melt, fill=`status`, geom="tile") + xlab("")+ylab("")+ theme(axis.text.x = element_text(angle = 90, hjust = 1, colour="black",,size=20)) + 
  theme(axis.text.y = element_text( colour="black",size=20)) +
  scale_y_discrete(breaks=unique(simSignificance.melt$features), labels=c("Recombination rate", "GC Content", "Replication Timing", "DHSs (fetal testes)", "BisulfiteSeq (adult testis)", "DHSs (fetal ovary)", "DHSs (adult ovary)","H3K27ac (adult ovary)","H3K9me3 (adult ovary)", "H3K4me1 (adult ovary)", "H3K36me3 (adult ovary)", "BisulfiteSeq (adult ovary)")) +
  scale_x_discrete(labels=c("High maternal rate","In between","Average rate","High paternal rate"))
ggsave("../figures/simSignificantStates.svg", scale=2)
ggsave("../figures/simSignificantStates.png", scale=2)
                   
```

```{r highMaternalMutationRegions}
library(xlsx)
#state4<-read.delim("phmm.1MB.state4.bed", header=T, sep="\t", as.is=T)
state4<-read.xlsx("phmm.1MB.state4.segments.xlsx", sheetIndex = 1)
state4$maternal<-state4$maternalOld+state4$maternalYoung
state4$paternal<-state4$paternalOld+state4$paternalYoung

state4$maternalVsPaternal<-state4$maternal/state4$paternal
state4$maternalOldVsPaternalOld<-state4$maternalOld/state4$paternalOld

sumBySegment<-data.frame(maternal=unlist(tapply(state4$maternal, state4$segment, sum)), paternal=unlist(tapply(state4$paternal, state4$segment, sum)), maternalOld=unlist(tapply(state4$maternalOld, state4$segment, sum)), paternalOld=unlist(tapply(state4$paternalOld, state4$segment, sum)))

```

```{r barPlotsForCounts}
library(ggplot2)
library(scales)
setwd("/Users/wendy/work/denovo/denovos.parentalorigin/denovos.radboud.filtered.filteredByCallableRegions/")
#~/work/denovo/denovos.parentalorigin/denovos.radboud.filtered.filteredByCallableRegions/filteredCounts.1MB.bed
parentsAgeATConception.102<-read.delim("/Users/wendy/work/denovo/project102data/parentsAgeAtConception.ilmn.tab", sep="\t", header=T)
chr16.ilmn<-read.delim("../project102/chr16.phased.bed", header=F, sep="\t")
chr8.ilmn<-read.delim("../project102/chr8.phased.bed", header=F, sep="\t")
chr4.ilmn<-read.delim("../project102/chr4.phased.bed", header=F, sep="\t")
chr7.ilmn<-read.delim("../project102/chr7.phased.bed", header=F, sep="\t")
chr2.ilmn<-read.delim("../project102/chr2.phased.bed", header=F, sep="\t")
chr12.ilmn<-read.delim("../project102/chr12.phased.bed", header=F, sep="\t")
chr14.ilmn<-read.delim("../project102/chr14.phased.bed", header=F, sep="\t")
chr3.ilmn<-read.delim("../project102/chr3.phased.bed", header=F, sep="\t")

phased.gonl<-read.delim("/Users/wendy/work/denovo/denovos.parentalorigin/external.data/DNMs_gonl.bed", header=F, sep="\t", as.is=T)
phased.gonl<-subset(phased.gonl, V13!="unknown",select=c(V8,V9,V10,V11,V12,V13))
colnames(phased.gonl)<-c("chrom","start","end", "ref", "alt","parentOfOrigin")

allChr.ilmn<-rbind(chr16.ilmn, chr8.ilmn, chr4.ilmn, chr7.ilmn, chr2.ilmn,chr12.ilmn,chr14.ilmn, chr3.ilmn)
allChr.ilmn.counts<-as.data.frame(table(allChr.ilmn$V5))
colnames(allChr.ilmn.counts)<-c("parent of origin", "counts")
allChr.ilmn.counts$`parent of origin`<-c("Father","Mother")
allChr.ilmn.plot<-ggplot(data=allChr.ilmn.counts, aes(x=`parent of origin`, y=counts, fill=`parent of origin`)) +
    geom_bar(stat="identity") +guides(fill=FALSE) + 
   # xlab("Whole genome") + ylab ("Number of DNMs in second cohort") + 
     xlab("") + ylab ("") + 
    scale_fill_manual(values=c(Father="blue", Mother="red"))+theme(axis.text=element_text(size=15))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))+ scale_y_continuous(labels = comma)

#Gonl data
allChr.gonl.counts<-as.data.frame(table(phased.gonl$parentOfOrigin))
colnames(allChr.gonl.counts)<-c("parent of origin", "counts")
allChr.gonl.counts$`parent of origin`<-c("Father","Mother")
allChr.gonl.plot<-ggplot(data=allChr.gonl.counts, aes(x=`parent of origin`, y=counts, fill=`parent of origin`)) +
    geom_bar(stat="identity") +guides(fill=FALSE) + 
     xlab("") + ylab ("") + 
    scale_fill_manual(values=c(Father="blue", Mother="red"))+theme(axis.text=element_text(size=15))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))+ scale_y_continuous(labels = comma)


chr16.ilmn$Family_ID<-substr(chr16.ilmn$V4, 1, 9)
chr8.ilmn$Family_ID<-substr(chr8.ilmn$V4, 1, 9)
chr4.ilmn$Family_ID<-substr(chr4.ilmn$V4, 1, 9)
chr7.ilmn$Family_ID<-substr(chr7.ilmn$V4, 1, 9)

median(parentsAgeATConception.102$mothersAgeAtConceptionInYears[which(parentsAgeATConception.102$Family_ID %in% chr16.ilmn$Family_ID)]) #31.69726
median(parentsAgeATConception.102$fathersAgeAtConceptionInYears) #33.63288

#WWOX.ilmn<-subset(chr16.ilmn, V2>=78000000 & V3<=79000000)
WWOX.ilmn<-subset(chr16.ilmn, V2>=78099413 & V3<=79212667)
WWOX.ilmn$Family_ID<-substr(WWOX.ilmn$V4, 1, 9)
WWOX.ilmn<-merge(WWOX.ilmn, parentsAgeATConception.102, by="Family_ID")
mean(WWOX.ilmn$mothersAgeAtConceptionInYears[which(WWOX.ilmn$V5=="M")])

WWOX.ilmn.counts<-as.data.frame(table(WWOX.ilmn$V5))
colnames(WWOX.ilmn.counts)<-c("parent of origin", "counts")
WWOX.ilmn.counts$`parent of origin`<-c("Father","Mother")

#chr4:7-8MB, chr8:3-4MB and chr16:78-79MB

WWOX.ilmn.plot<-ggplot(data=WWOX.ilmn.counts, aes(x=`parent of origin`, y=counts, fill=`parent of origin`)) +
    geom_bar(stat="identity")  +guides(fill=FALSE) + 
    xlab("") + ylab ("")+
      scale_fill_manual(values=c(Father="blue", Mother="red"))+theme(axis.text=element_text(size=15))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))

#WWOX gonl
WWOX.gonl<-subset(phased.gonl, start>=78099413 & end<=79212667 & chrom=="chr16")
WWOX.gonl.counts<-as.data.frame(table(WWOX.gonl$parentOfOrigin))
colnames(WWOX.gonl.counts)<-c("parent of origin", "counts")
WWOX.gonl.counts$`parent of origin`<-c("Father","Mother")

WWOX.gonl.plot<-ggplot(data=WWOX.gonl.counts, aes(x=`parent of origin`, y=counts, fill=`parent of origin`)) +
    geom_bar(stat="identity")  +guides(fill=FALSE) + 
    xlab("") + ylab ("")+
      scale_fill_manual(values=c(Father="blue", Mother="red"))+theme(axis.text=element_text(size=15))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))+ scale_y_discrete(limits=c(0,1,2))


#CSMD1.ilmn<-subset(chr8.ilmn,V2>=3000000 & V3<=4000000)
CSMD1.ilmn<-subset(chr8.ilmn,V2>=2935353 & V3<=4994972)
CSMD1.ilmn<-merge(CSMD1.ilmn, parentsAgeATConception.102, by="Family_ID")
CSMD1.ilmn.counts<-as.data.frame(table(CSMD1.ilmn$V5))
colnames(CSMD1.ilmn.counts)<-c("parent of origin", "counts")
CSMD1.ilmn.counts$`parent of origin`<-c("Father","Mother")
CSMD1.ilmn.plot<-ggplot(data=CSMD1.ilmn.counts, aes(x=`parent of origin`, y=counts, fill=`parent of origin`)) +
    geom_bar(stat="identity") +guides(fill=FALSE) + 
    xlab("") + ylab ("Number of DNMs in second cohort") + 
    scale_fill_manual(values=c(Father="blue", Mother="red"))+theme(axis.text=element_text(size=15))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))

#CSMD1 gonl
CSMD1.gonl<-subset(phased.gonl, start>=2935353 & end<=4994972 & chrom=="chr8")
CSMD1.gonl.counts<-as.data.frame(table(CSMD1.gonl$parentOfOrigin))
colnames(CSMD1.gonl.counts)<-c("parent of origin", "counts")
CSMD1.gonl.counts$`parent of origin`<-c("Father","Mother")
CSMD1.gonl.plot<-ggplot(data=CSMD1.gonl.counts, aes(x=`parent of origin`, y=counts, fill=`parent of origin`)) +
    geom_bar(stat="identity") +guides(fill=FALSE) + 
    xlab("") + ylab ("Number of DNMs in the GoNL cohort") + 
    scale_fill_manual(values=c(Father="blue", Mother="red"))+theme(axis.text=element_text(size=15))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))

####CGI
maternal.SNVs<-read.delim("SNVs.MaternalOriginOnly.filtered.filteredByCallableBases.txt",header=T, sep="\t")
maternal.SNVs$parentOfOrigin<-"Mother"
paternal.SNVs<-read.delim("SNVs.PaternalOriginOnly.filtered.filteredByCallableBases.txt",header=T, sep="\t")
paternal.SNVs$parentOfOrigin<-"Father"
snvs.withParentalOrigin<-rbind(paternal.SNVs, maternal.SNVs)

allChrs.cgi.counts<-as.data.frame(table(as.data.frame(subset(snvs.withParentalOrigin, select=c(parentOfOrigin)))))
colnames(allChrs.cgi.counts)=c("parent of origin", "counts")
allChrs.cgi.plot<-ggplot(data=allChrs.cgi.counts, aes(x=`parent of origin`, y=counts, fill=`parent of origin`)) +
    geom_bar(stat="identity") +guides(fill=FALSE) + 
   # xlab("Whole genome") + ylab ("Number of DNMs in the analysis cohort")+
  xlab("") + ylab ("")+
  scale_fill_manual(values=c(Father="blue", Mother="red"))+theme(axis.text=element_text(size=15))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))+ scale_y_continuous(labels = comma)

#WWOX.cgi.counts<-as.data.frame(t(subset(allCounts.1MB, chrom=="chr16" & start>=78000000 & End.position<=79000000, select=c(parentOfOrigin))))
WWOX.cgi.counts<-as.data.frame(table(as.data.frame(subset(snvs.withParentalOrigin, Chromosome=="chr16" & start>=78099413 & End.position<=79212667, select=c(parentOfOrigin)))))
colnames(WWOX.cgi.counts)=c("parent of origin", "counts")
WWOX.cgi.plot<-ggplot(data=WWOX.cgi.counts, aes(x=`parent of origin`, y=counts, fill=`parent of origin`)) +
    geom_bar(stat="identity") +guides(fill=FALSE) + 
  #  xlab("WWOX") + ylab ("Number of DNMs in the analysis cohort")+
  xlab("") + ylab ("")+
  scale_fill_manual(values=c(Father="blue", Mother="red"))+theme(axis.text=element_text(size=15))+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black")) + scale_y_discrete(limits=c(0,5,10))

#CSMD1.cgi.counts<-as.data.frame(t(subset(allCounts.1MB, chrom=="chr8" & start>=3000000 & end<=4000000, select=c(paternal, maternal))))
CSMD1.cgi.counts<-as.data.frame(table(as.data.frame(subset(snvs.withParentalOrigin, Chromosome=="chr8" & start>=2935353 & End.position<=4994972, select=c(parentOfOrigin)))))
colnames(CSMD1.cgi.counts)=c("parent of origin", "counts")
CSMD1.cgi.plot<-ggplot(data=CSMD1.cgi.counts, aes(x=`parent of origin`, y=counts, fill=`parent of origin`)) +
    geom_bar(stat="identity") +guides(fill=FALSE) + 
    xlab("") + ylab ("Number of DNMs in the analysis cohort")+
    scale_fill_manual(values=c(Father="blue", Mother="red"))+theme(axis.text=element_text(size=15))+
  theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), axis.line = element_line(colour = "black"))
  

#all.cgi.plot<-ggplot(data=all.cgi.counts, aes(x=`parent of origin`, y=counts, fill=`parent of origin`)) +
#    geom_bar(stat="identity") +guides(fill=FALSE) + 
#    xlab("all") + ylab ("number of de novo mutations in the analysis cohort")+
#    scale_fill_manual(values=c(father="blue", mother="red"))+theme(axis.text=element_text(size=12))+ theme_bw()


library(cowplot)
p<-plot_grid(allChrs.cgi.plot ,allChr.ilmn.plot,  CSMD1.cgi.plot,CSMD1.ilmn.plot,WWOX.cgi.plot,WWOX.ilmn.plot, nrow=3,labels=c("    Whole Genome","    Whole Genome*","         CSMD1","         CSMD1", "         WWOX", "         WWOX"), align="v", label_size=15 )
#save_plot( "../figures/dnmCountsInRegions.svg", p,scale=2)

plotWithGonl<-plot_grid(allChrs.cgi.plot ,allChr.ilmn.plot, allChr.gonl.plot,  CSMD1.cgi.plot,CSMD1.ilmn.plot, CSMD1.gonl.plot, WWOX.cgi.plot,WWOX.ilmn.plot, WWOX.gonl.plot, nrow=3,labels=c("    Whole Genome","    Whole Genome*","     Whole Genome","         CSMD1","         CSMD1","         CSMD1", "         WWOX", "         WWOX","         WWOX"), align="v", label_size=15 )
save_plot( "../figures/dnmCountsInRegionsWithGonl.svg", plotWithGonl,scale=2)
save_plot( "../figures/dnmCountsInRegionsWithGonl.png", plotWithGonl,scale=2)
```

```{r unbalhaar}
#unbalhaar
normalized.1MB.filtered<-subset(normalized.1MB, paternalOld+paternalYoung+maternalOld+maternalYoung>0)
#normalized.1MB.filtered$maternalOld<-normalized.1MB.filtered$maternalOld/sum(normalized.1MB.filtered$maternalOld)
library(unbalhaar)
x.uh <- best.unbal.haar(normalized.1MB.filtered$maternalOld[which(normalized.1MB.filtered$chrom=="chr16")])
x.uh <-best.unbal.haar(log2(normalized.1MB.filtered$maternalOld[which(normalized.1MB.filtered$chrom=="chr16")]+0.1))
x.uh.th <- hard.thresh(x.uh , sigma=0.02084771)
x.uh.th.r <- reconstr(x.uh.th)
ts.plot(x.uh.th.r)

x.uh <- best.unbal.haar(normalized.1MB.filtered$maternalYoung[which(normalized.1MB.filtered$chrom=="chr16")])
x.uh <-best.unbal.haar(log2(normalized.1MB.filtered$maternalYoung[which(normalized.1MB.filtered$chrom=="chr16")]+0.1))
x.uh.th <- hard.thresh(x.uh , sigma=0.01607143)
x.uh.th.r <- reconstr(x.uh.th)
ts.plot(x.uh.th.r)

x.uh <- best.unbal.haar(normalized.1MB.filtered$paternalOld[which(normalized.1MB.filtered$chrom=="chr16")])
x.uh <-best.unbal.haar(log2(normalized.1MB.filtered$paternalOld[which(normalized.1MB.filtered$chrom=="chr16")]+0.1))
x.uh.th <- hard.thresh(x.uh , sigma=0.005270804)
x.uh.th.r <- reconstr(x.uh.th)
ts.plot(x.uh.th.r)

x.uh <- best.unbal.haar(normalized.1MB.filtered$paternalYoung[which(normalized.1MB.filtered$chrom=="chr16")])
x.uh <-best.unbal.haar(log2(normalized.1MB.filtered$paternalYoung[which(normalized.1MB.filtered$chrom=="chr16")]+0.1))
x.uh.th <- hard.thresh(x.uh , sigma=0.02811088)
x.uh.th.r <- reconstr(x.uh.th)
ts.plot(x.uh.th.r)

normalized.1MB[which(x.uh.th.r>3),]

ind <- which(diff(x.uh.th.r) != 0)
DNMs.father.every10.positions[ind]
val <- x.uh.th.r [c(ind, ind+1)]




#try Ward Hierarchical Clustering with Bootstrapped p values
d<- dist(subset(normalized.1MB.filtered, select=c(paternalOld,paternalYoung,maternalOld,maternalYoung)), method = "euclidean") # distance matrix
fit <- hclust(d, method="complete") 
plot(fit)
groups <- cutree(fit, k=10) # cut tree into 5 clusters
# draw dendogram with red borders around the 5 clusters 
rect.hclust(fit, k=10, border="red")
which(normalized.1MB.filtered$chrom=="chr16" & normalized.1MB.filtered$start=="78000000")
which(normalized.1MB.filtered$chrom=="chr7" & normalized.1MB.filtered$start=="158000000")
groups[169:171]
groups[427:429]
normalized.1MB.filtered[which(groups==1),]

fit <- pvclust(scale(t(subset(normalized.1MB.filtered, select=c(paternalOld,paternalYoung,maternalOld,maternalYoung)))), method.hclust="average",method.dist="correlation")
plot(fit) # dendogram with p values
# add rectangles around groups highly supported by the data
pvrect(fit, alpha=.95)

chr<-"chr16"

normalized.1MB.chr<-subset(normalized.1MB, chrom==chr)
library("reshape2")
library(ggplot2)
test<-melt(normalized.1MB.chr,id=c("chrom","start", "end", "mid"))
ggplot(test, aes(x=mid, y=value, colour=variable)) + geom_point()

#

#in one figure
plot(spline(paternal.1MB$start[which(paternal.1MB$chrom==chr)], pmax(paternal.1MB$numOld[which(paternal.1MB$chrom==chr)],maternal.1MB$numOld[which(maternal.1MB$chrom==chr)]) , method="natural"), type="n")
lines(spline(maternal.1MB$start[which(maternal.1MB$chrom==chr)], maternal.1MB$numOld[which(maternal.1MB$chrom==chr)], method="natural"), col="green")
lines(spline(maternal.1MB$start[which(maternal.1MB$chrom==chr)], maternal.1MB$numYoung[which(maternal.1MB$chrom==chr)], method="natural"), col="red")
lines(spline(paternal.1MB$start[which(paternal.1MB$chrom==chr)], paternal.1MB$numOld[which(paternal.1MB$chrom==chr)], method="natural"), col="blue")
lines(spline(paternal.1MB$start[which(paternal.1MB$chrom==chr)], paternal.1MB$numYoung[which(paternal.1MB$chrom==chr)], method="natural"), col="purple")
lines(repTimes$V3[which(repTimes$V1==chr)], repTimes$V4[which(repTimes$V1==chr)], col="cyan")


#In 4 figures
par(mfrow=c(3,1)) 
plot(spline(maternal.1MB$start[which(maternal.1MB$chrom==chr)], maternal.1MB$numOld[which(maternal.1MB$chrom==chr)], method="natural"), col="green", type="l")
plot(spline(maternal.1MB$start[which(maternal.1MB$chrom==chr)], maternal.1MB$numYoung[which(maternal.1MB$chrom==chr)], method="natural"), col="red", type="l")
plot(spline(paternal.1MB$start[which(paternal.1MB$chrom==chr)], paternal.1MB$numOld[which(paternal.1MB$chrom==chr)], method="natural"), col="blue",type="l")
plot(spline(paternal.1MB$start[which(paternal.1MB$chrom==chr)], paternal.1MB$numYoung[which(paternal.1MB$chrom==chr)], method="natural"), col="purple",type="l")
plot(repTimes$V3[which(repTimes$V1==chr)], repTimes$V4[which(repTimes$V1==chr)], col="cyan",type="l")

```

```{r fixedWindowSize102}
parentsAgeATConception.102<-read.delim("/Users/wendy/work/denovo/project102data/parentsAgeAtConception.ilmn.tab", sep="\t", header=T)
parentsAgeATConception.102<-unique(parentsAgeATConception.102)

medianMothersAge.102<-median(parentsAgeATConception.102$mothersAgeAtConceptionInYears)
medianFathersAge.102<-median(parentsAgeATConception.102$fathersAgeAtConceptionInYears)
parentsAgeATConception.102$is.mother.old<-0
parentsAgeATConception.102$is.mother.old[which(parentsAgeATConception.102$mothersAgeAtConceptionInYears>medianMothersAge.102)]<-1
parentsAgeATConception.102$is.father.old<-0
parentsAgeATConception.102$is.father.old[which(parentsAgeATConception.102$fathersAgeAtConceptionInYears>medianFathersAge.102)]<-1

paternal.1MB.102<-read.delim("/Users/wendy/work/denovo/project102data/project102.paternal.snvs.1MB.bed", sep="\t", header=F)
colnames(paternal.1MB.102)<-c("chrom", "start", "end", "ids")
maternal.1MB.102<-read.delim("/Users/wendy/work/denovo/project102data/project102.maternal.snvs.1MB.bed", sep="\t", header=F)
colnames(maternal.1MB.102)<-c("chrom", "start", "end", "ids")

paternal.1MB.uniqIDs.102<-strsplit(as.character(paternal.1MB.102$ids), split=",")
paternal.1MB.102$numProband<-lapply(paternal.1MB.uniqIDs.102, length)
maternal.1MB.uniqIDs.102<-strsplit(as.character(maternal.1MB.102$ids), split=",")
maternal.1MB.102$numProband<-lapply(maternal.1MB.uniqIDs.102, length)

paternal.1MB.ages.102<-lapply(paternal.1MB.uniqIDs.102, function(x)  parentsAgeATConception.102$fathersAgeAtConceptionInYears[match(substr(x,1,9), parentsAgeATConception.102$Family_ID)])
maternal.1MB.ages.102<-lapply(maternal.1MB.uniqIDs.102, function(x)  parentsAgeATConception.102$mothersAgeAtConceptionInYears[match(substr(x,1,9), parentsAgeATConception.102$Family_ID)])

paternal.1MB.102$numOld<-sapply(paternal.1MB.ages.102, function(x)  length(which(x>medianFathersAge.102)) )
paternal.1MB.102$numYoung<-sapply(paternal.1MB.ages.102, function(x)  length(which(x<=medianFathersAge.102)) )
maternal.1MB.102$numOld<-sapply(maternal.1MB.ages.102, function(x)  length(which(x>medianMothersAge.102)) )
maternal.1MB.102$numYoung<-sapply(maternal.1MB.ages.102, function(x)  length(which(x<=medianMothersAge.102)) )


#normalized.1MB<-data.frame(chrom=maternal.1MB$chrom, start=maternal.1MB$start, end=maternal.1MB$end, mid=(maternal.1MB$start+maternal.1MB$end)/2, paternalOld=paternal.1MB$numOld/(paternal.1MB$numOld+paternal.1MB$numYoung+maternal.1MB$numOld+maternal.1MB$numYoung), paternalYoung=paternal.1MB$numYoung/(paternal.1MB$numOld+paternal.1MB$numYoung+maternal.1MB$numOld+maternal.1MB$numYoung), maternalOld=maternal.1MB$numOld/(paternal.1MB$numOld+paternal.1MB$numYoung+maternal.1MB$numOld+maternal.1MB$numYoung), maternalYoung=maternal.1MB$numYoung/(paternal.1MB$numYoung+paternal.1MB$numYoung+maternal.1MB$numOld+maternal.1MB$numYoung) )
normalized.1MB.102<-data.frame(chrom=maternal.1MB.102$chrom, start=maternal.1MB.102$start, end=maternal.1MB.102$end, mid=(maternal.1MB.102$start+maternal.1MB.102$end)/2, paternalOld=paternal.1MB.102$numOld/sum(paternal.1MB.102$numOld), paternalYoung=paternal.1MB.102$numYoung/sum(paternal.1MB.102$numYoung), maternalOld=maternal.1MB.102$numOld/sum(maternal.1MB.102$numOld), maternalYoung=maternal.1MB.102$numYoung/sum(maternal.1MB.102$numYoung) )

normalized.1MB.102[which(normalized.1MB.102$maternalOld>0.01),]

```

```{r slidingwindow}
parentsOrigin<-subset(predictedDNMs.parentalOriginOnly, select=c(probandID, Chromosome, Start.position,parentOfOrigin))
colnames(parentsOrigin)<-c("sample", "chrom", "position", "parentOfOrigin")


hg19.genome.sizes<-read.delim("../external.data/human.hg19.genome", sep="\t", header=F, as.is=T)
colnames(hg19.genome.sizes)<-c("chrom","size")

DNMs.mother<-subset(parentsOrigin, parentOfOrigin=="mother")
DNMs.father<-subset(parentsOrigin, parentOfOrigin=="father")
putativeDNMs<-read.delim("substitutions.filtered.annotated.bed", sep="\t", header=T)



chr<-16
snpSize<-5

for (chr in 1:22) {
DNMs.father.chrom<-subset(parentsOrigin, parentOfOrigin=="father" & chrom==paste("chr", chr, sep=""))
DNMs.mother.chrom<-subset(parentsOrigin, parentOfOrigin=="mother" & chrom==paste("chr", chr, sep=""))

DNMs.father.chrom<-DNMs.father.chrom[order(DNMs.father.chrom$position),]
DNMs.mother.chrom<-DNMs.mother.chrom[order(DNMs.mother.chrom$position),]

DNMs.father.index<-1:nrow(DNMs.father.chrom)
i<-0
DNMs.father.every10<-c(DNMs.father.index[1:(i+snpSize)==(i+snpSize)], nrow(DNMs.father.chrom))
DNMs.father.every10.positions<-DNMs.father.chrom$position[DNMs.father.every10]
DNMs.father.every10.positions[length(DNMs.father.every10.positions)]<-hg19.genome.sizes$size[which(hg19.genome.sizes$chrom==paste("chr", chr, sep=""))]

DNMs.mother.chrom.totalCounts<-unlist(lapply(DNMs.father.every10.positions, function(x) length(which(DNMs.mother.chrom$position<=x))))
DNMs.mother.chrom.totalCounts<-c(DNMs.mother.chrom.totalCounts[1], diff(DNMs.mother.chrom.totalCounts))
DNMs.chrom.positions<-diff(c(0,DNMs.father.every10.positions))/2+c(c(0, DNMs.father.every10.positions[1:length(DNMs.father.every10.positions)-1]))

plot(DNMs.chrom.positions,DNMs.mother.chrom.totalCounts/snpSize)
print(DNMs.mother.chrom.totalCounts/snpSize)
}

```

```{r telomeric, eval=FALSE}
parentsOrigin<-read.delim(pipe("sort -k1,1 -k2,2g /Users/wendy/work/denovo/denovos.parentalorigin/parentOfOrigin.Radboud.tab"), sep="\t", header=F, as.is=T)
colnames(parentsOrigin)<-c("sample", "chrom", "position", "parentOfOrigin")
parentOfOrigin<-subset(parentsOrigin, chrom!="chrX")

hg19.genome.sizes<-read.delim("/Users/wendy/work/denovo/radboud//human.hg19.genome", sep="\t", header=F, as.is=T)
colnames(hg19.genome.sizes)<-c("chrom","size")

DNMs.mother<-subset(parentsOrigin, parentOfOrigin=="mother")
DNMs.father<-subset(parentsOrigin, parentOfOrigin=="father")

counts.front.father<-rep(-1,22)
counts.front.mother<-rep(-1,22)
counts.end.father<-rep(-1,22)
counts.end.mother<-rep(-1,22)

for (chr in 1:22) {
  DNMs.father.chrom<-subset(parentsOrigin, parentOfOrigin=="father" & chrom==paste("chr", chr, sep=""))
  DNMs.mother.chrom<-subset(parentsOrigin, parentOfOrigin=="mother" & chrom==paste("chr", chr, sep=""))
  
  chrom.size<-hg19.genome.sizes$size[which(hg19.genome.sizes$chrom==paste("chr", chr, sep=""))]

  counts.front.father[chr]<-length(which(DNMs.father.chrom$position<100000)) 
  counts.front.mother[chr]<-length(which(DNMs.mother.chrom$position<100000))
  
  counts.end.father[chr]<-length(which(DNMs.father.chrom$position>(chrom.size-1000000))) 
  counts.end.mother[chr]<-length(which(DNMs.mother.chrom$position>(chrom.size-1000000)))
}


```

```{r plotGenome}
library(Gviz)
library(GenomicRanges)
data(cpgIslands)

chr<-as.character(unique(seqnames(cpgIslands)))
gen<-genome(cpgIslands)
atrack<-AnnotationTrack(cpgIslands,name="CpG")

plotTracks(atrack)
gtrack<-GenomeAxisTrack()
plotTracks(list(gtrack,atrack))
itrack<-IdeogramTrack(genome=gen, chromosome=chr)
plotTracks(list(itrack, gtrack, atrack))

data(twoGroups)

```

```{r plotGenome}
setwd("/Users/wendy/work/denovo/denovos.parentalorigin/")

hg19.genome.sizes<-read.delim("~/bin/bedtools2/genomes/human.hg19.genome", sep="\t", header=F, as.is=T)
colnames(hg19.genome.sizes)<-c("chrom","size")

putativeDNMs.withParentalOrigin<-read.delim("parentsOrigin/allDenovos.withPredictedDNM.withParentOfOrigin.txt", sep="\t", header=T)
predictedDNMs.parentalOriginOnly<-subset(putativeDNMs.withParentalOrigin, is.Denovo==TRUE & Chromosome!="chrX" & !(is.na(parentOfOrigin)) &  nchar(as.character(putativeDNMs.withParentalOrigin$Reference))==1 & nchar(as.character(putativeDNMs.withParentalOrigin$Variant)))

DNMs.mother<-subset(predictedDNMs.parentalOriginOnly, parentOfOrigin=="mother", select=c("Chromosome", "End.position"))
DNMs.father<-subset(predictedDNMs.parentalOriginOnly, parentOfOrigin=="father", select=c("Chromosome", "End.position"))

library(unbalhaar)

chr<-16
snpSize<-5

ratios <- vector(mode="numeric", length=0)
starts <- vector(mode="numeric", length=0)
ends <- vector(mode="numeric", length=0)
chrs<-vector(mode="character", length=0)
  

for (chr in 1:22) {

DNMs.father.chrom<-subset(DNMs.father, Chromosome==paste("chr", chr, sep=""))
DNMs.mother.chrom<-subset(DNMs.mother, Chromosome==paste("chr", chr, sep=""))
  
DNMs.father.chrom<-DNMs.father.chrom[order(DNMs.father.chrom$End.position),]
DNMs.mother.chrom<-DNMs.mother.chrom[order(DNMs.mother.chrom$End.position),]

DNMs.father.index<-1:nrow(DNMs.father.chrom)
i<-0
DNMs.father.every10<-c(DNMs.father.index[1:(i+snpSize)==(i+snpSize)], nrow(DNMs.father.chrom))
DNMs.father.every10.positions<-DNMs.father.chrom$End.position[DNMs.father.every10]
DNMs.father.every10.positions[length(DNMs.father.every10.positions)]<-hg19.genome.sizes$size[which(hg19.genome.sizes$chrom==paste("chr", chr, sep=""))]

DNMs.mother.chrom.totalCounts<-unlist(lapply(DNMs.father.every10.positions, function(x) length(which(DNMs.mother.chrom$End.position<=x))))
DNMs.mother.chrom.totalCounts<-c(DNMs.mother.chrom.totalCounts[1], diff(DNMs.mother.chrom.totalCounts))
DNMs.chrom.positions<-diff(c(0,DNMs.father.every10.positions))/2+c(c(0, DNMs.father.every10.positions[1:length(DNMs.father.every10.positions)-1]))

plot(DNMs.chrom.positions,DNMs.mother.chrom.totalCounts/snpSize)
#print(DNMs.mother.chrom.totalCounts/snpSize)

ratios<-c(ratios, DNMs.mother.chrom.totalCounts/snpSize)
starts<-c(starts, c(0,DNMs.father.every10.positions))
ends<-c(ends,DNMs.father.every10.positions[1:length(DNMs.father.every10.positions)-1],hg19.genome.sizes$size[which(hg19.genome.sizes$chrom==paste("chr", chr, sep=""))])
chrs<-c(chrs, rep(paste("chr", chr, sep=""), length(DNMs.father.every10.positions)))

#unbalhaar

x.uh <- best.unbal.haar(DNMs.mother.chrom.totalCounts/snpSize)
x.uh <- best.unbal.haar(ratios)
x.uh.th <- hard.thresh(x.uh, sigma=.3)
x.uh.th.r <- reconstr(x.uh.th)
ts.plot(x.uh.th.r)

ind <- which(diff(x.uh.th.r) != 0)
DNMs.father.every10.positions[ind]
val <- x.uh.th.r [c(ind, ind+1)]


gr <- GRanges(seqnames = rep("chr8",length(DNMs.mother.chrom.totalCounts)),
ranges = IRanges( start=DNMs.chrom.positions,  width = rep(1, length(DNMs.mother.chrom.totalCounts))),
ratio = DNMs.mother.chrom.totalCounts/snpSize,
)

ideoTrack<-IdeogramTrack(genome="hg19", chromosome="chr8")
gtrack<-GenomeAxisTrack()
dTrack<-DataTrack(gr, name="mother")
plotTracks(list(ideoTrack,gtrack,dTrack), showSampleNames=TRUE)

plotTracks(dTrack,type="horiz",  showSampleNames=TRUE)
}

ratios

```

```{r alphaRatio}
numDenovoWithAge.father<-read.delim("numDenovoWithAge.father.tab", sep="\t", header=T)
numDenovoWithAge.mother<-read.delim("numDenovoWithAge.mother.tab", sep="\t", header=T)

numDenovoWithAge.father$fathersAgeAtConceptionInYearsRounded<-round(numDenovoWithAge.father$fathersAgeAtConceptionInYears)
numDenovoWithAge.mother$mothersAgeAtConceptionInYearsRounded<-round(numDenovoWithAge.mother$mothersAgeAtConceptionInYears)

breaks <- c(15, 20, 25, 30, 35,40,45)
numDenovoWithAge.mother$ageCategory<-cut(numDenovoWithAge.mother$mothersAgeAtConceptionInYears,breaks=breaks)
numDenovoWithAge.father$ageCategory<-cut(numDenovoWithAge.father$fathersAgeAtConceptionInYears,breaks=breaks)
library(plyr)
meanDenovos.father<-ddply(numDenovoWithAge.father,~ageCategory,summarise,mean=mean(numDenovo),sd=sd(numDenovo))
meanDenovos.mother<-ddply(numDenovoWithAge.mother,~ageCategory,summarise,mean=mean(numDenovo),sd=sd(numDenovo))

meanDenovos.father$mean[1:6]/meanDenovos.mother$mean[1:6]
meanDenovos.father$mean[1:6]-meanDenovos.mother$mean[1:6]

library(mratios)
t.test.ratio(meanDenovos.father$mean[1:6],meanDenovos.mother$mean)

t.test.ratio(numDenovoWithAge.father$numDenovo,numDenovoWithAge.mother$numDenovo)

```

```{r countIlluminaCohorts}
ilmn.chr8<-read.delim("~/work/denovo/denovos.parentalorigin/project102/chr8.phased.bed", header=F)
ilmn.chr4<-read.delim("~/work/denovo/denovos.parentalorigin/project102/chr4.phased.bed", header=F)
ilmn.chr7<-read.delim("~/work/denovo/denovos.parentalorigin/project102/chr7.phased.bed", header=F)

ilmn.chr8$FamilyID<-substr(ilmn.chr8$V4,1,9)

ilmn.chr8.probandIDs<-unique(ilmn.chr8$V4)
length(ilmn.chr8.probandIDs)

ilmn.chr4.probandIDs<-unique(ilmn.chr4$V4)
length(ilmn.chr4.probandIDs)

ilmn.chr7.probandIDs<-unique(ilmn.chr7$V4)
length(ilmn.chr7.probandIDs)

ilmn.all<-read.delim("~/work/denovo/denovos.parentalorigin/project102/all.phased.bed", header=F)
ilmn.all.probandIDs<-unique(ilmn.all$V4)
length(ilmn.all.probandIDs)
ilmn.all$FamilyID<-substr(ilmn.all$V4,1,9)
length(unique(ilmn.all$FamilyID))

length(grep("-03A", ilmn.all.probandIDs))
length(grep("-03B", ilmn.all.probandIDs))
length(grep("-03C", ilmn.all.probandIDs))

intersect(ilmn.all$FamilyID[grep("-03A", ilmn.all.probandIDs)],ilmn.all$FamilyID[grep("-03C", ilmn.all.probandIDs)])
intersect(ilmn.all$FamilyID[grep("-03B", ilmn.all.probandIDs)],ilmn.all$FamilyID[grep("-03C", ilmn.all.probandIDs)])
intersect(ilmn.all$FamilyID[grep("-03B", ilmn.all.probandIDs)],ilmn.all$FamilyID[grep("-03A", ilmn.all.probandIDs)])

```



check father's country of birth latitude with number of DNMs
```{r ratioParental, eval=FALSE}
setwd("/Users/wendy/work/denovo/denovos.parentalorigin/denovos.radboud.filtered.filteredByCallableRegions//")
maternalOrigin<-read.delim("SNVs.MaternalOriginOnly.filtered.filteredByCallableBases.txt", header=T, sep="\t")
paternalOrigin<-read.delim("SNVs.PaternalOriginOnly.filtered.filteredByCallableBases.txt", header=T, sep="\t")
parentsAgeATConception<-read.delim("parentsAgeAtConception.filtered.tab", header=T, sep="\t")
maternalOrigin$probandID <- factor(maternalOrigin$probandID, levels = unique(parentsAgeATConception$Proband.Study.ID))
paternalOrigin$probandID <- factor(paternalOrigin$probandID, levels = unique(parentsAgeATConception$Proband.Study.ID))
countsBySample.maternal<-table(maternalOrigin$probandID)
numDenovoWithAge.maternal<-parentsAgeATConception[match(names(countsBySample.maternal),parentsAgeATConception$Proband.Study.ID),]
numDenovoWithAge.maternal$numDenovo<-countsBySample.maternal
numDenovoWithAge.maternal$numDenovo<-as.numeric(numDenovoWithAge.maternal$numDenovo)
countsBySample.paternal<-table(paternalOrigin$probandID)
numDenovoWithAge.paternal<-parentsAgeATConception[match(names(countsBySample.paternal),parentsAgeATConception$Proband.Study.ID),]
numDenovoWithAge.paternal$numDenovo<-countsBySample.paternal
numDenovoWithAge.paternal$numDenovo<-as.numeric(numDenovoWithAge.paternal$numDenovo)

numDenovoWithAge.parents<-merge(numDenovoWithAge.paternal, numDenovoWithAge.maternal, by="Proband.Study.ID")
numDenovoWithAge.parents$Father.ID<-paste("F-", numDenovoWithAge.parents$Family.Study.ID.x, sep="")

countryOfOrigin<-read.delim("~/work/project101/countryOfOriginsWithLatLon_101Fathers.tab", sep="\t", header=T, as.is=T)


allDenovos<-read.delim("allDenovos.withPredictedDNM.withParentOfOrigin.filtered.filteredByCallableRegions.txt", header=T, sep="\t", as.is=T)
allDenovos<-subset(allDenovos, nchar(Reference)==1 & nchar(Variant)==1,  select=c(pos, Chromosome, Start.position, End.position,probandID,parentOfOrigin))
countsBySample.total<-table(allDenovos$probandID)
countsBySample.phased<-table(allDenovos$probandID[which(!is.na(allDenovos$parentOfOrigin))])
propPhased<-data.frame(propPhased=countsBySample.phased/countsBySample.total, probandID=names(countsBySample.total))

numDenovoWithAge.parentsWithCOB<-merge(numDenovoWithAge.parents, countryOfOrigin, by.x="Father.ID", by.y="itmisubjectid")
numDenovoWithAge.parentsWithCOB<-merge(numDenovoWithAge.parentsWithCOB, propPhased, by.x="Proband.Study.ID", by.y="probandID")
numDenovoWithAge.parentsWithCOB$numDenovoFather<-numDenovoWithAge.parentsWithCOB$numDenovo.x/numDenovoWithAge.parentsWithCOB$propPhased.Freq

numDenovoWithAge.parentsWithCOB$lowLat<-1
numDenovoWithAge.parentsWithCOB$lowLat[which(abs(numDenovoWithAge.parentsWithCOB$lat)>25)]<-2
summary(lm(numDenovoFather~fathersAgeAtConceptionInYears.x+abs(lat),numDenovoWithAge.parentsWithCOB))

```